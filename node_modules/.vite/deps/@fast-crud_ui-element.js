import {
  ElDialog,
  ElMessage,
  ElMessageBox,
  ElNotification,
  useFormItem
} from "./chunk-6D23MNO6.js";
import {
  dist_exports
} from "./chunk-SOLM7MTW.js";
import "./chunk-HQLKDWMK.js";
import {
  R,
  l
} from "./chunk-TMD4VLGD.js";
import "./chunk-OBCII6EX.js";
import {
  isFunction_default,
  lodash_default_default
} from "./chunk-6KFXODJP.js";
import "./chunk-XUBID5G4.js";
import {
  createTextVNode,
  createVNode
} from "./chunk-7Q7JYBSX.js";
import "./chunk-AUZ3RYOM.js";

// node_modules/@fast-crud/ui-element/dist/ui-element.mjs
var {
  buildBinding: d,
  creator: t
} = R();
var N = class {
  constructor(s) {
    this.type = "element", this.modelValue = "modelValue", this.switch = t({
      activeColor: "active-color",
      activeText: "active-text",
      activeValue: "active-value",
      inactiveColor: "inactive-color",
      inactiveText: "inactive-text",
      inactiveValue: "inactive-value",
      modelValue: "modelValue",
      name: "el-switch"
    }), this.formWrapper = t({
      visible: "modelValue",
      customClass: (e) => "class",
      titleSlotName: "header",
      buildOnClosedBind(e, l2) {
        return {
          onClosed: l2
        };
      },
      buildWidthBind(e, l2) {
        return {
          width: l2
        };
      },
      buildInitBind(e) {
        return {};
      },
      buildInnerBind() {
        return {};
      },
      name: "fs-form-wrapper"
    }), this.messageBox = t({
      name: "el-message-box",
      instance: void 0,
      open: async (e) => this.messageBox.instance(e),
      confirm: async (e) => this.messageBox.instance(e)
    }), this.message = t({
      instance: void 0,
      name: "el-message",
      open: (e) => {
        this.message.instance.open(e);
      },
      success: (e) => {
        this.message.instance.success(e);
      },
      error: (e) => {
        this.message.instance.error(e);
      },
      warn: (e) => {
        this.message.instance.warning(e);
      },
      info: (e) => {
        this.message.instance(e);
      }
    }), this.notification = t({
      instance: void 0,
      name: "el-notification",
      open: (e) => {
        this.notification.instance.open(e);
      },
      success: (e) => {
        this.notification.instance.success(e);
      },
      error: (e) => {
        this.notification.instance.error(e);
      },
      warn: (e) => {
        this.notification.instance.warn(e);
      },
      info: (e) => {
        this.notification.instance.success(e);
      }
    }), this.icon = t({
      name: "",
      isComponent: false
    }), this.icons = {
      add: "plus",
      columnsFilter: "set-up",
      compact: "rank",
      edit: "edit",
      remove: "delete",
      search: "search",
      refresh: "refresh",
      export: "upload",
      check: "check",
      sort: "sort",
      left: "arrow-left",
      right: "arrow-right",
      close: "close",
      arrowLeft: "left",
      arrowRight: "right",
      more: "more",
      plus: "plus",
      zoomIn: "zoom-in",
      zoomOut: "zoom-out",
      refreshLeft: "refresh-left",
      refreshRight: "refresh-right",
      upload: "upload",
      fullScreen: "full-screen",
      unFullScreen: "full-screen",
      question: "question-filled",
      caretUp: "CaretTop",
      caretDown: "CaretBottom",
      eye: "View",
      info: "warning"
    }, this.dialog = t({
      name: "el-dialog",
      visible: "modelValue",
      customClass: "class",
      titleSlotName: "header",
      footerSlotName: "footer",
      buildOnClosedBind(e) {
        return {
          onClosed: e
        };
      },
      footer() {
        return {};
      },
      open(e) {
        ElDialog.open(e);
      },
      builder(e) {
        return d(this, e, {
          props: {
            title: e.title,
            width: e.width
          },
          slots: {
            footer: e.footer
          }
        });
      }
    }), this.buttonGroup = t({
      name: "el-button-group"
    }), this.col = t({
      name: "el-col"
    }), this.row = t({
      name: "el-row"
    }), this.card = t({
      name: "el-card"
    }), this.checkboxGroup = t({
      name: "el-checkbox-group",
      modelValue: "modelValue"
    }), this.checkbox = t({
      name: "el-checkbox",
      resolveEvent(e) {
        return e;
      },
      modelValue: "modelValue",
      value: "label",
      onChange(e) {
        return {
          "onUpdate:modelValue": e
        };
      }
    }), this.drawer = t({
      name: "el-drawer",
      visible: "modelValue",
      customClass: "class",
      width: "size"
    }), this.collapseTransition = t({
      name: "el-collapse-transition"
    }), this.option = t({
      name: "el-option",
      value: "value",
      label: "label"
    }), this.select = t({
      name: "el-select",
      modelValue: "modelValue",
      clearable: "clearable",
      filterable: "filterable",
      buildMultiBinding(e) {
        return {
          multiple: e
        };
      }
    }), this.treeSelect = t({
      name: "el-tree-select",
      modelValue: "modelValue",
      clearable: "select.clearable",
      options: "data",
      value: "tree.value",
      label: "tree.label",
      children: "tree.children"
    }), this.radio = t({
      name: "el-radio",
      value: "label",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioButton = t({
      name: "el-radio-button",
      value: "label",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioGroup = t({
      name: "el-radio-group",
      modelValue: "modelValue"
    }), this.cascader = t({
      name: "el-cascader",
      modelValue: "modelValue",
      clearable: "clearable",
      fieldNames(e) {
        return {
          props: e
        };
      }
    }), this.form = t({
      name: "el-form",
      inlineLayout: {
        layout: "inline",
        inline: true
      },
      validateWrap: async (e) => e.validate(),
      transformValidateErrors: (e) => {
        const l2 = {};
        return lodash_default_default.forEach(e, (n, a) => {
          l2[a] = true;
        }), l2;
      }
    }), this.formItem = t({
      name: "el-form-item",
      prop: "prop",
      label: "label",
      rules: "rules",
      skipValidationWrapper: "div",
      injectFormItemContext() {
        const {
          formItem: e
        } = useFormItem();
        return {
          async onChange() {
            await (e == null ? void 0 : e.validate("change"));
          },
          async onBlur() {
            await (e == null ? void 0 : e.validate("blur"));
          }
        };
      }
    }), this.button = t({
      name: "el-button",
      textType: {
        type: "text"
      },
      linkType: {
        type: "text"
      },
      circle: {
        circle: true
      },
      colors: (e) => ({
        type: e
      })
    }), this.pagination = t({
      name: "el-pagination",
      currentPage: "currentPage",
      total: "total",
      pageCount: null,
      onChange({
        setCurrentPage: e,
        setPageSize: l2,
        doAfterChange: n
      }) {
        return {
          // element 页码改动回调
          onCurrentChange(a) {
            e(a), n();
          },
          onSizeChange(a) {
            l2(a), n();
          }
        };
      }
    }), this.tableColumn = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.tableColumnGroup = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.table = t({
      name: "el-table",
      data: "data",
      renderMode: "slot",
      defaultRowKey: "id",
      fixedHeaderNeedComputeBodyHeight: false,
      buildMaxHeight: (e) => ({
        maxHeight: e
      }),
      hasMaxHeight: (e) => (e == null ? void 0 : e.maxHeight) != null,
      headerDomSelector: "",
      vLoading: "loading",
      // 没太大用
      setSelectedRows({
        multiple: e,
        selectedRowKeys: l2,
        tableRef: n,
        getRowKey: a
      }) {
        const i = a(), o = [];
        for (const r of l2.value)
          for (const c of n.data)
            c[i] === r && o.push(c);
        if (e)
          for (const r of o)
            n.toggleRowSelection(r, true);
        else
          l2.value.length > 0 && n.setCurrentRow(o[0]);
      },
      buildSelectionCrudOptions(e) {
        function l2(n) {
          const a = e.getRowKey(), i = e.getPageData();
          let o = a;
          isFunction_default(a) || (o = (m) => m[a]);
          const r = i.map(o), c = e.selectedRowKeys.value.filter((m) => !r.includes(m));
          return lodash_default_default.union(c, n);
        }
        return e.multiple ? {
          table: {
            onSelectionChange: (a = []) => {
              const i = e.getRowKey();
              let o = a.map((r) => r[i]);
              e.crossPage && (o = l2(o)), e.onSelectedKeysChanged(o);
            }
          },
          columns: {
            $checked: {
              form: {
                show: false
              },
              column: {
                type: "selection",
                align: "center",
                width: "55px",
                order: -9999,
                reserveSelection: e.crossPage,
                columnSetDisabled: true
                //禁止在列设置中选择
              }
            }
          }
        } : {
          table: {
            highlightCurrentRow: true,
            onCurrentChange: (a) => {
              if (a == null) {
                e.onSelectedKeysChanged([]);
                return;
              }
              const i = e.getRowKey(), o = [a[i]];
              e.onSelectedKeysChanged(o);
            }
          }
        };
      },
      rebuildRenderScope: (e) => e,
      scrollTo(e) {
        var l2, n;
        (n = (l2 = e.tableRef) == null ? void 0 : l2.value) == null || n.setScrollTop(e.top);
      },
      onChange({
        onSortChange: e,
        onFilterChange: l2,
        bubbleUp: n
      }) {
        return {
          onSortChange: (a) => {
            const {
              column: i,
              prop: o,
              order: r
            } = a;
            e && e({
              isServerSort: o && i.sortable === "custom",
              prop: o,
              order: r,
              asc: r === "ascending"
            }), n((c) => {
              c.onSortChange && c.onSortChange(a);
            });
          },
          onFilterChange: (a) => {
            l2(a), n((i) => {
              i.onFilterChange && i.onFilterChange(a);
            });
          }
        };
      }
    }), this.textArea = t({
      name: "el-input",
      type: "textarea",
      modelValue: "modelValue",
      clearable: "clearable"
    }), this.tag = t({
      name: "el-tag",
      type: "type",
      colors: ["info", "success", "warning", "danger"]
    }), this.inputGroup = t({
      name: "el-input-group"
    }), this.input = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue"
    }), this.inputPassword = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue",
      passwordType: {
        showPassword: true
      }
    }), this.number = t({
      name: "el-input-number",
      modelValue: "modelValue",
      builder(e) {
        return d(this, e, {});
      }
    }), this.datePicker = t({
      name: "el-date-picker",
      modelValue: "modelValue",
      buildDateType(e) {
        return {
          name: "el-date-picker",
          type: e
        };
      }
    }), this.timePicker = t({
      name: "el-time-picker",
      modelValue: "modelValue"
    }), this.dropdown = t({
      name: "el-dropdown",
      command(e) {
        return {
          onCommand(l2) {
            e(l2);
          }
        };
      },
      slotName: "dropdown",
      renderMode: "slot"
    }), this.dropdownMenu = t({
      name: "el-dropdown-menu",
      command: () => ({})
    }), this.dropdownItem = t({
      name: "el-dropdown-item",
      command: "command"
    }), this.imageGroup = t({
      name: "fs-box"
    }), this.image = t({
      name: "el-image",
      buildPreviewBind: ({
        url: e,
        urls: l2,
        previewUrl: n,
        previewUrls: a,
        index: i
      }) => ({
        "preview-src-list": a,
        "initial-index": i
      }),
      fallback: "error"
    }), this.progress = t({
      name: "el-progress"
    }), this.loading = t({
      name: "loading",
      type: "directive"
    }), this.upload = t({
      id: "uid",
      name: "el-upload",
      type: "",
      typeImageCard: "picture-card",
      typeImage: "picture",
      getStatusFromEvent(e) {
        return e == null ? void 0 : e.status;
      },
      getFileListFromEvent(e, l2, n) {
        return n;
      },
      status: {
        success: "success",
        uploading: "uploading"
      },
      isSuccess(e) {
        return e.status === "success";
      },
      limitAdd: 1
    }), this.tabs = t({
      name: "el-tabs",
      modelValue: "modelValue"
    }), this.tabPane = t({
      name: "el-tab-pane",
      key: "name",
      tab: "label"
    }), this.collapse = t({
      name: "el-collapse",
      modelValue: "modelValue",
      keyName: "name"
    }), this.collapseItem = t({
      name: "el-collapse-item",
      key: "name",
      titleSlotName: "title",
      /**
       * element collapse只支持title插槽
       */
      extraSlotName: "not_support_extra",
      builder(e) {
        return d(this, e, {
          slots: {
            [this.titleSlotName]() {
              return createVNode("div", {
                class: "fsel-collapse-item-title fsel-flex-row space-between"
              }, [createVNode("span", {
                class: "title-text"
              }, [e.titleSlot(), createTextVNode(" ")]), createVNode("span", {
                class: "title-extra"
              }, [e.extraSlot()])]);
            }
          }
        });
      }
    }), this.badge = t({
      name: "el-badge",
      value: "value",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.tooltip = t({
      name: "el-tooltip",
      content: "content",
      trigger: "default"
    }), this.divider = t({
      name: "el-divider"
    }), this.popover = t({
      name: "el-popover",
      contentSlotName: "default",
      triggerSlotName: "reference",
      visible: "visible"
    }), s && (this.notification.instance = s.Notification, this.message.instance = s.Message, this.messageBox.instance = s.MessageBox);
  }
};
var g = dist_exports;
function K(u) {
  for (const s in g)
    u.component(s, g[s]);
}
function f() {
  const u = new N({
    Message: ElMessage,
    Notification: ElNotification,
    MessageBox: ElMessageBox
  });
  return l.set(u), u;
}
var I = {
  install(u, s = {}) {
    return s.setupIcons !== false && K(u), f();
  },
  set: f
};
export {
  N as Element,
  I as default
};
//# sourceMappingURL=@fast-crud_ui-element.js.map
