import {
  Cd,
  _9
} from "./chunk-HBLLDVYX.js";
import "./chunk-3VNCHJQI.js";
import "./chunk-HL2MGXCM.js";
import "./chunk-RT6XIFAZ.js";
import "./chunk-PBJIO4MK.js";
import {
  w
} from "./chunk-TMD4VLGD.js";
import "./chunk-OBCII6EX.js";
import "./chunk-6KFXODJP.js";
import "./chunk-XUBID5G4.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createVNode,
  defineComponent,
  getCurrentInstance,
  mergeProps,
  normalizeClass,
  openBlock,
  reactive,
  ref,
  renderList,
  resolveComponent,
  resolveDynamicComponent,
  watch,
  withCtx
} from "./chunk-7Q7JYBSX.js";
import "./chunk-AUZ3RYOM.js";

// node_modules/@fast-crud/fast-extends/dist/fs-cropper-uploader-7c221ccc.mjs
var ee = defineComponent({
  name: "FsCropperUploader",
  props: {
    disabled: {},
    // 初始图片url,或者是数组
    modelValue: {
      type: [String, Array]
    },
    img: {},
    // 上传后端类型，[form, cos, qiniu , alioss]
    type: {
      type: String
    },
    // 上传提示
    uploadTip: {
      type: String
    },
    // 对话框标题
    title: String,
    // cropper的高度，默认为浏览器可视窗口高度的40%，最小270
    cropperHeight: {
      type: [String, Number]
    },
    // 对话框宽度，默认50%
    dialogWidth: {
      type: [String, Number],
      default: "50%"
    },
    // 图片大小限制，单位MB
    maxSize: {
      type: Number,
      default: 5
    },
    // 图片数量限制,0为不限制
    limit: {
      type: Number,
      default: 1
    },
    // 可接收的文件后缀
    accept: {
      type: String,
      default: ".jpg, .jpeg, .png, .gif, .webp"
    },
    // [cropperjs的参数](https://github.com/fengyuanchen/cropperjs)
    cropper: {
      type: Object
    },
    // 上传参数，会临时覆盖全局上传配置参数[d2p-uploader](/guide/extends/uploader.html)
    uploader: {
      type: Object
    },
    // 构建下载url方法,不影响提交的value
    buildUrl: {
      type: Function,
      default: async function(e) {
        return typeof e == "object" ? e.url : e;
      }
    },
    /**
     * 返回值类型
     * 支持：`[url,key,object]`
     */
    valueType: {
      type: String,
      // url ,key, object
      default: "url"
    }
  },
  emits: ["update:modelValue", "change", "ready"],
  setup(e, s) {
    const { ui: b } = w(), g = ref(), R = ref(), C = ref(), l = ref([]), u = b.formItem.injectFormItemContext();
    let v = e.modelValue;
    n(e.modelValue);
    async function n(o) {
      const t = [];
      if (o == null || o === "") {
        l.value = t;
        return;
      }
      if (typeof o == "string")
        t.push({ url: await e.buildUrl(o), value: o, status: "done" });
      else
        for (const i of o)
          t.push({ url: await e.buildUrl(i), value: i, status: "done" });
      l.value = t;
    }
    function y() {
      e.disabled || (C.value = void 0, g.value.clear(), g.value.open());
    }
    function U(o) {
      l.value.splice(o, 1), T();
    }
    function B() {
      const o = l.value;
      if (o && o.length > 0) {
        for (const t of o)
          if (t.status === "uploading")
            return true;
      }
      return false;
    }
    async function F(o) {
      const t = o.blob, i = o.dataUrl, O = o.file, p = reactive({
        url: void 0,
        dataUrl: i,
        status: "uploading",
        progress: 0
      }), W = (a) => {
        p.progress = a.percent;
      }, z = (a) => {
        p.status = "error", p.message = "文件上传出错:" + a.message, console.error(a);
      }, A = {
        file: t,
        fileName: O.name,
        onProgress: W,
        onError: z
      };
      l.value.push(p);
      try {
        const a = await j(A);
        let S = a;
        e.valueType !== "object" && (S = a[e.valueType]), p.url = await e.buildUrl(S), p.value = S, p.status = "done", T();
      } catch (a) {
        z(a);
      }
    }
    async function j(o) {
      o.options = e.uploader || {};
      const { getUploaderImpl: t } = _9();
      let i = await t(o.options.type);
      if (i == null)
        throw new Error("Sorry，The component is not ready yet");
      return await (i == null ? void 0 : i.upload(o));
    }
    async function T() {
      const o = [];
      for (const i of l.value)
        typeof i == "string" ? o.push(i) : o.push(i.value);
      let t = o;
      e.limit === 1 && (t = o && o.length > 0 ? o[0] : void 0), v = t, s.emit("update:modelValue", t), await u.onChange(), await u.onBlur();
    }
    function $(o) {
      return o.dataUrl ? o.dataUrl : o.url;
    }
    const k = ref(false), V = ref();
    function _(o) {
      k.value = true, V.value = $(o);
    }
    function D() {
      k.value = false, V.value = null;
    }
    watch(
      () => e.modelValue,
      async (o) => {
        s.emit("change", o), o !== v && await n(o);
      }
    );
    const H = getCurrentInstance();
    function L(o) {
      s.emit("ready", {
        uploaderRef: H,
        ...o
      });
    }
    return {
      ui: b,
      cropperRef: g,
      uploaderImplRef: R,
      indexRef: C,
      listRef: l,
      addNewImage: y,
      hasUploading: B,
      cropComplete: F,
      doUpload: j,
      removeImage: U,
      getImageSrc: $,
      previewUrl: V,
      previewVisible: k,
      preview: _,
      closePreview: D,
      doReady: L
    };
  }
});
var oe = { class: "image-list" };
var te = { class: "image-slot" };
var ie = { class: "delete" };
var ne = {
  key: 0,
  class: "status-uploading"
};
var re = {
  key: 1,
  class: "status-done"
};
var le = { class: "fs-cropper-preview-content" };
var ae = ["src"];
function se(e, s, b, g, R, C) {
  const l = resolveComponent("fs-loading"), u = resolveComponent("fs-icon"), v = resolveComponent("fs-cropper");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["fs-cropper-uploader", { "is-disabled": e.disabled }])
  }, [
    createBaseVNode("div", oe, [
      (openBlock(), createBlock(resolveDynamicComponent(e.ui.imageGroup.name), null, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.listRef, (n, y) => (openBlock(), createElementBlock("div", {
            key: y,
            class: "image-item"
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(e.ui.image.name), mergeProps({
              class: "image",
              src: e.getImageSrc(n)
            }, e.img), {
              placeholder: withCtx(() => [
                createBaseVNode("div", te, [
                  createVNode(l, { loading: true })
                ])
              ]),
              _: 2
            }, 1040, ["src"])),
            createBaseVNode("div", ie, [
              e.disabled ? createCommentVNode("", true) : (openBlock(), createBlock(u, {
                key: 0,
                icon: e.ui.icons.remove,
                onClick: (U) => e.removeImage(y)
              }, null, 8, ["icon", "onClick"])),
              createVNode(u, {
                icon: e.ui.icons.search,
                onClick: (U) => e.preview(n)
              }, null, 8, ["icon", "onClick"])
            ]),
            n.status === "uploading" ? (openBlock(), createElementBlock("div", ne, [
              (openBlock(), createBlock(resolveDynamicComponent(e.ui.progress.name), {
                type: "circle",
                percentage: n.progress,
                width: 70
              }, null, 8, ["percentage"]))
            ])) : n.status === "done" ? (openBlock(), createElementBlock("div", re, [
              createVNode(u, {
                icon: e.ui.icons.check,
                class: "status-down-icon"
              }, null, 8, ["icon"])
            ])) : createCommentVNode("", true)
          ]))), 128)),
          e.limit <= 0 || e.limit > e.listRef.length ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "image-item image-plus",
            onClick: s[0] || (s[0] = (...n) => e.addNewImage && e.addNewImage(...n))
          }, [
            createVNode(u, {
              icon: e.ui.icons.plus,
              class: "cropper-uploader-icon"
            }, null, 8, ["icon"])
          ])) : createCommentVNode("", true)
        ]),
        _: 1
      }))
    ]),
    createVNode(v, {
      ref: "cropperRef",
      title: e.title,
      "cropper-height": e.cropperHeight,
      "dialog-width": e.dialogWidth,
      accept: e.accept,
      "upload-tip": e.uploadTip,
      "max-size": e.maxSize,
      cropper: e.cropper,
      output: "all",
      onDone: e.cropComplete,
      onReady: e.doReady
    }, null, 8, ["title", "cropper-height", "dialog-width", "accept", "upload-tip", "max-size", "cropper", "onDone", "onReady"]),
    createBaseVNode("div", {
      class: normalizeClass(["fs-cropper-preview", { open: e.previewVisible }]),
      onClick: s[1] || (s[1] = (...n) => e.closePreview && e.closePreview(...n))
    }, [
      createBaseVNode("div", le, [
        e.previewUrl ? (openBlock(), createElementBlock("img", {
          key: 0,
          src: e.previewUrl,
          class: "preview-image"
        }, null, 8, ae)) : createCommentVNode("", true)
      ])
    ], 2)
  ], 2);
}
var me = Cd(ee, [["render", se]]);
export {
  me as default
};
//# sourceMappingURL=fs-cropper-uploader-7c221ccc-PPGJLFHG.js.map
