import {
  Cd
} from "./chunk-HBLLDVYX.js";
import "./chunk-3VNCHJQI.js";
import {
  tt
} from "./chunk-HL2MGXCM.js";
import "./chunk-RT6XIFAZ.js";
import "./chunk-PBJIO4MK.js";
import {
  w
} from "./chunk-TMD4VLGD.js";
import "./chunk-OBCII6EX.js";
import "./chunk-6KFXODJP.js";
import "./chunk-XUBID5G4.js";
import {
  Fragment,
  computed2 as computed,
  createBaseVNode,
  createBlock,
  createElementBlock,
  createVNode,
  defineComponent,
  h,
  mergeProps,
  normalizeClass,
  openBlock,
  ref,
  renderList,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  vShow,
  withCtx,
  withDirectives
} from "./chunk-7Q7JYBSX.js";
import "./chunk-AUZ3RYOM.js";

// node_modules/@fast-crud/fast-extends/dist/fs-cropper-effc19ff.mjs
function ee(a, t) {
  var i = Object.keys(a);
  if (Object.getOwnPropertySymbols) {
    var e = Object.getOwnPropertySymbols(a);
    t && (e = e.filter(function(n) {
      return Object.getOwnPropertyDescriptor(a, n).enumerable;
    })), i.push.apply(i, e);
  }
  return i;
}
function ve(a) {
  for (var t = 1; t < arguments.length; t++) {
    var i = arguments[t] != null ? arguments[t] : {};
    t % 2 ? ee(Object(i), true).forEach(function(e) {
      $e(a, e, i[e]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(a, Object.getOwnPropertyDescriptors(i)) : ee(Object(i)).forEach(function(e) {
      Object.defineProperty(a, e, Object.getOwnPropertyDescriptor(i, e));
    });
  }
  return a;
}
function Lt(a) {
  "@babel/helpers - typeof";
  return Lt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Lt(a);
}
function je(a, t) {
  if (!(a instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ie(a, t) {
  for (var i = 0; i < t.length; i++) {
    var e = t[i];
    e.enumerable = e.enumerable || false, e.configurable = true, "value" in e && (e.writable = true), Object.defineProperty(a, e.key, e);
  }
}
function Ve(a, t, i) {
  return t && ie(a.prototype, t), i && ie(a, i), Object.defineProperty(a, "prototype", {
    writable: false
  }), a;
}
function $e(a, t, i) {
  return t in a ? Object.defineProperty(a, t, {
    value: i,
    enumerable: true,
    configurable: true,
    writable: true
  }) : a[t] = i, a;
}
function be(a) {
  return Fe(a) || Ge(a) || qe(a) || Ze();
}
function Fe(a) {
  if (Array.isArray(a))
    return Ht(a);
}
function Ge(a) {
  if (typeof Symbol < "u" && a[Symbol.iterator] != null || a["@@iterator"] != null)
    return Array.from(a);
}
function qe(a, t) {
  if (a) {
    if (typeof a == "string")
      return Ht(a, t);
    var i = Object.prototype.toString.call(a).slice(8, -1);
    if (i === "Object" && a.constructor && (i = a.constructor.name), i === "Map" || i === "Set")
      return Array.from(a);
    if (i === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))
      return Ht(a, t);
  }
}
function Ht(a, t) {
  (t == null || t > a.length) && (t = a.length);
  for (var i = 0, e = new Array(t); i < t; i++)
    e[i] = a[i];
  return e;
}
function Ze() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var Ot = typeof window < "u" && typeof window.document < "u";
var V = Ot ? window : {};
var Ft = Ot && V.document.documentElement ? "ontouchstart" in V.document.documentElement : false;
var Gt = Ot ? "PointerEvent" in V : false;
var D = "cropper";
var qt = "all";
var we = "crop";
var ye = "move";
var xe = "zoom";
var K = "e";
var tt2 = "w";
var rt = "s";
var q = "n";
var pt = "ne";
var ut = "nw";
var ft = "se";
var dt = "sw";
var Yt = "".concat(D, "-crop");
var ae = "".concat(D, "-disabled");
var I = "".concat(D, "-hidden");
var re = "".concat(D, "-hide");
var Qe = "".concat(D, "-invisible");
var Tt = "".concat(D, "-modal");
var Pt = "".concat(D, "-move");
var mt = "".concat(D, "Action");
var Et = "".concat(D, "Preview");
var Zt = "crop";
var De = "move";
var Ce = "none";
var Wt = "crop";
var Xt = "cropend";
var Ut = "cropmove";
var jt = "cropstart";
var oe = "dblclick";
var Je = Ft ? "touchstart" : "mousedown";
var Ke = Ft ? "touchmove" : "mousemove";
var ti = Ft ? "touchend touchcancel" : "mouseup";
var ne = Gt ? "pointerdown" : Je;
var se = Gt ? "pointermove" : Ke;
var he = Gt ? "pointerup pointercancel" : ti;
var ce = "ready";
var le = "resize";
var pe = "wheel";
var Vt = "zoom";
var ue = "image/jpeg";
var ei = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;
var ii = /^data:/;
var ai = /^data:image\/jpeg;base64,/;
var ri = /^img|canvas$/i;
var Ee = 200;
var Me = 100;
var fe = {
  // Define the view mode of the cropper
  viewMode: 0,
  // 0, 1, 2, 3
  // Define the dragging mode of the cropper
  dragMode: Zt,
  // 'crop', 'move' or 'none'
  // Define the initial aspect ratio of the crop box
  initialAspectRatio: NaN,
  // Define the aspect ratio of the crop box
  aspectRatio: NaN,
  // An object with the previous cropping result data
  data: null,
  // A selector for adding extra containers to preview
  preview: "",
  // Re-render the cropper when resize the window
  responsive: true,
  // Restore the cropped area after resize the window
  restore: true,
  // Check if the current image is a cross-origin image
  checkCrossOrigin: true,
  // Check the current image's Exif Orientation information
  checkOrientation: true,
  // Show the black modal
  modal: true,
  // Show the dashed lines for guiding
  guides: true,
  // Show the center indicator for guiding
  center: true,
  // Show the white modal to highlight the crop box
  highlight: true,
  // Show the grid background
  background: true,
  // Enable to crop the image automatically when initialize
  autoCrop: true,
  // Define the percentage of automatic cropping area when initializes
  autoCropArea: 0.8,
  // Enable to move the image
  movable: true,
  // Enable to rotate the image
  rotatable: true,
  // Enable to scale the image
  scalable: true,
  // Enable to zoom the image
  zoomable: true,
  // Enable to zoom the image by dragging touch
  zoomOnTouch: true,
  // Enable to zoom the image by wheeling mouse
  zoomOnWheel: true,
  // Define zoom ratio when zoom the image by wheeling mouse
  wheelZoomRatio: 0.1,
  // Enable to move the crop box
  cropBoxMovable: true,
  // Enable to resize the crop box
  cropBoxResizable: true,
  // Toggle drag mode between "crop" and "move" when click twice on the cropper
  toggleDragModeOnDblclick: true,
  // Size limitation
  minCanvasWidth: 0,
  minCanvasHeight: 0,
  minCropBoxWidth: 0,
  minCropBoxHeight: 0,
  minContainerWidth: Ee,
  minContainerHeight: Me,
  // Shortcuts of events
  ready: null,
  cropstart: null,
  cropmove: null,
  cropend: null,
  crop: null,
  zoom: null
};
var oi = '<div class="cropper-container" touch-action="none"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-cropper-action="e"></span><span class="cropper-line line-n" data-cropper-action="n"></span><span class="cropper-line line-w" data-cropper-action="w"></span><span class="cropper-line line-s" data-cropper-action="s"></span><span class="cropper-point point-e" data-cropper-action="e"></span><span class="cropper-point point-n" data-cropper-action="n"></span><span class="cropper-point point-w" data-cropper-action="w"></span><span class="cropper-point point-s" data-cropper-action="s"></span><span class="cropper-point point-ne" data-cropper-action="ne"></span><span class="cropper-point point-nw" data-cropper-action="nw"></span><span class="cropper-point point-sw" data-cropper-action="sw"></span><span class="cropper-point point-se" data-cropper-action="se"></span></div></div>';
var ni = Number.isNaN || V.isNaN;
function v(a) {
  return typeof a == "number" && !ni(a);
}
var de = function(t) {
  return t > 0 && t < 1 / 0;
};
function It(a) {
  return typeof a > "u";
}
function et(a) {
  return Lt(a) === "object" && a !== null;
}
var si = Object.prototype.hasOwnProperty;
function ot(a) {
  if (!et(a))
    return false;
  try {
    var t = a.constructor, i = t.prototype;
    return t && i && si.call(i, "isPrototypeOf");
  } catch {
    return false;
  }
}
function k(a) {
  return typeof a == "function";
}
var hi = Array.prototype.slice;
function Te(a) {
  return Array.from ? Array.from(a) : hi.call(a);
}
function O(a, t) {
  return a && k(t) && (Array.isArray(a) || v(a.length) ? Te(a).forEach(function(i, e) {
    t.call(a, i, e, a);
  }) : et(a) && Object.keys(a).forEach(function(i) {
    t.call(a, a[i], i, a);
  })), a;
}
var C = Object.assign || function(t) {
  for (var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)
    e[n - 1] = arguments[n];
  return et(t) && e.length > 0 && e.forEach(function(r) {
    et(r) && Object.keys(r).forEach(function(o) {
      t[o] = r[o];
    });
  }), t;
};
var ci = /\.\d*(?:0|9){12}\d*$/;
function st(a) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e11;
  return ci.test(a) ? Math.round(a * t) / t : a;
}
var li = /^width|height|left|top|marginLeft|marginTop$/;
function Z(a, t) {
  var i = a.style;
  O(t, function(e, n) {
    li.test(n) && v(e) && (e = "".concat(e, "px")), i[n] = e;
  });
}
function pi(a, t) {
  return a.classList ? a.classList.contains(t) : a.className.indexOf(t) > -1;
}
function S(a, t) {
  if (t) {
    if (v(a.length)) {
      O(a, function(e) {
        S(e, t);
      });
      return;
    }
    if (a.classList) {
      a.classList.add(t);
      return;
    }
    var i = a.className.trim();
    i ? i.indexOf(t) < 0 && (a.className = "".concat(i, " ").concat(t)) : a.className = t;
  }
}
function j(a, t) {
  if (t) {
    if (v(a.length)) {
      O(a, function(i) {
        j(i, t);
      });
      return;
    }
    if (a.classList) {
      a.classList.remove(t);
      return;
    }
    a.className.indexOf(t) >= 0 && (a.className = a.className.replace(t, ""));
  }
}
function nt(a, t, i) {
  if (t) {
    if (v(a.length)) {
      O(a, function(e) {
        nt(e, t, i);
      });
      return;
    }
    i ? S(a, t) : j(a, t);
  }
}
var ui = /([a-z\d])([A-Z])/g;
function Qt(a) {
  return a.replace(ui, "$1-$2").toLowerCase();
}
function $t(a, t) {
  return et(a[t]) ? a[t] : a.dataset ? a.dataset[t] : a.getAttribute("data-".concat(Qt(t)));
}
function vt(a, t, i) {
  et(i) ? a[t] = i : a.dataset ? a.dataset[t] = i : a.setAttribute("data-".concat(Qt(t)), i);
}
function fi(a, t) {
  if (et(a[t]))
    try {
      delete a[t];
    } catch {
      a[t] = void 0;
    }
  else if (a.dataset)
    try {
      delete a.dataset[t];
    } catch {
      a.dataset[t] = void 0;
    }
  else
    a.removeAttribute("data-".concat(Qt(t)));
}
var Oe = /\s\s*/;
var Ne = function() {
  var a = false;
  if (Ot) {
    var t = false, i = function() {
    }, e = Object.defineProperty({}, "once", {
      get: function() {
        return a = true, t;
      },
      /**
       * This setter can fix a `TypeError` in strict mode
       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}
       * @param {boolean} value - The value to set
       */
      set: function(r) {
        t = r;
      }
    });
    V.addEventListener("test", i, e), V.removeEventListener("test", i, e);
  }
  return a;
}();
function U(a, t, i) {
  var e = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, n = i;
  t.trim().split(Oe).forEach(function(r) {
    if (!Ne) {
      var o = a.listeners;
      o && o[r] && o[r][i] && (n = o[r][i], delete o[r][i], Object.keys(o[r]).length === 0 && delete o[r], Object.keys(o).length === 0 && delete a.listeners);
    }
    a.removeEventListener(r, n, e);
  });
}
function P(a, t, i) {
  var e = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, n = i;
  t.trim().split(Oe).forEach(function(r) {
    if (e.once && !Ne) {
      var o = a.listeners, s = o === void 0 ? {} : o;
      n = function() {
        delete s[r][i], a.removeEventListener(r, n, e);
        for (var l = arguments.length, h2 = new Array(l), c = 0; c < l; c++)
          h2[c] = arguments[c];
        i.apply(a, h2);
      }, s[r] || (s[r] = {}), s[r][i] && a.removeEventListener(r, s[r][i], e), s[r][i] = n, a.listeners = s;
    }
    a.addEventListener(r, n, e);
  });
}
function ht(a, t, i) {
  var e;
  return k(Event) && k(CustomEvent) ? e = new CustomEvent(t, {
    detail: i,
    bubbles: true,
    cancelable: true
  }) : (e = document.createEvent("CustomEvent"), e.initCustomEvent(t, true, true, i)), a.dispatchEvent(e);
}
function Se(a) {
  var t = a.getBoundingClientRect();
  return {
    left: t.left + (window.pageXOffset - document.documentElement.clientLeft),
    top: t.top + (window.pageYOffset - document.documentElement.clientTop)
  };
}
var zt = V.location;
var di = /^(\w+:)\/\/([^:/?#]*):?(\d*)/i;
function ge(a) {
  var t = a.match(di);
  return t !== null && (t[1] !== zt.protocol || t[2] !== zt.hostname || t[3] !== zt.port);
}
function me(a) {
  var t = "timestamp=".concat((/* @__PURE__ */ new Date()).getTime());
  return a + (a.indexOf("?") === -1 ? "?" : "&") + t;
}
function gt(a) {
  var t = a.rotate, i = a.scaleX, e = a.scaleY, n = a.translateX, r = a.translateY, o = [];
  v(n) && n !== 0 && o.push("translateX(".concat(n, "px)")), v(r) && r !== 0 && o.push("translateY(".concat(r, "px)")), v(t) && t !== 0 && o.push("rotate(".concat(t, "deg)")), v(i) && i !== 1 && o.push("scaleX(".concat(i, ")")), v(e) && e !== 1 && o.push("scaleY(".concat(e, ")"));
  var s = o.length ? o.join(" ") : "none";
  return {
    WebkitTransform: s,
    msTransform: s,
    transform: s
  };
}
function gi(a) {
  var t = ve({}, a), i = 0;
  return O(a, function(e, n) {
    delete t[n], O(t, function(r) {
      var o = Math.abs(e.startX - r.startX), s = Math.abs(e.startY - r.startY), p = Math.abs(e.endX - r.endX), l = Math.abs(e.endY - r.endY), h2 = Math.sqrt(o * o + s * s), c = Math.sqrt(p * p + l * l), u = (c - h2) / h2;
      Math.abs(u) > Math.abs(i) && (i = u);
    });
  }), i;
}
function Mt(a, t) {
  var i = a.pageX, e = a.pageY, n = {
    endX: i,
    endY: e
  };
  return t ? n : ve({
    startX: i,
    startY: e
  }, n);
}
function mi(a) {
  var t = 0, i = 0, e = 0;
  return O(a, function(n) {
    var r = n.startX, o = n.startY;
    t += r, i += o, e += 1;
  }), t /= e, i /= e, {
    pageX: t,
    pageY: i
  };
}
function Q(a) {
  var t = a.aspectRatio, i = a.height, e = a.width, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "contain", r = de(e), o = de(i);
  if (r && o) {
    var s = i * t;
    n === "contain" && s > e || n === "cover" && s < e ? i = e / t : e = i * t;
  } else
    r ? i = e / t : o && (e = i * t);
  return {
    width: e,
    height: i
  };
}
function vi(a) {
  var t = a.width, i = a.height, e = a.degree;
  if (e = Math.abs(e) % 180, e === 90)
    return {
      width: i,
      height: t
    };
  var n = e % 90 * Math.PI / 180, r = Math.sin(n), o = Math.cos(n), s = t * o + i * r, p = t * r + i * o;
  return e > 90 ? {
    width: p,
    height: s
  } : {
    width: s,
    height: p
  };
}
function bi(a, t, i, e) {
  var n = t.aspectRatio, r = t.naturalWidth, o = t.naturalHeight, s = t.rotate, p = s === void 0 ? 0 : s, l = t.scaleX, h2 = l === void 0 ? 1 : l, c = t.scaleY, u = c === void 0 ? 1 : c, g = i.aspectRatio, m = i.naturalWidth, y = i.naturalHeight, b = e.fillColor, E = b === void 0 ? "transparent" : b, T = e.imageSmoothingEnabled, x = T === void 0 ? true : T, z = e.imageSmoothingQuality, B = z === void 0 ? "low" : z, f = e.maxWidth, w2 = f === void 0 ? 1 / 0 : f, M = e.maxHeight, A = M === void 0 ? 1 / 0 : M, L = e.minWidth, $ = L === void 0 ? 0 : L, X = e.minHeight, H = X === void 0 ? 0 : X, _ = document.createElement("canvas"), R = _.getContext("2d"), F = Q({
    aspectRatio: g,
    width: w2,
    height: A
  }), J = Q({
    aspectRatio: g,
    width: $,
    height: H
  }, "cover"), it = Math.min(F.width, Math.max(J.width, m)), ct = Math.min(F.height, Math.max(J.height, y)), bt = Q({
    aspectRatio: n,
    width: w2,
    height: A
  }), wt = Q({
    aspectRatio: n,
    width: $,
    height: H
  }, "cover"), lt = Math.min(bt.width, Math.max(wt.width, r)), at = Math.min(bt.height, Math.max(wt.height, o)), Nt = [-lt / 2, -at / 2, lt, at];
  return _.width = st(it), _.height = st(ct), R.fillStyle = E, R.fillRect(0, 0, it, ct), R.save(), R.translate(it / 2, ct / 2), R.rotate(p * Math.PI / 180), R.scale(h2, u), R.imageSmoothingEnabled = x, R.imageSmoothingQuality = B, R.drawImage.apply(R, [a].concat(be(Nt.map(function(St) {
    return Math.floor(st(St));
  })))), R.restore(), _;
}
var Re = String.fromCharCode;
function wi(a, t, i) {
  var e = "";
  i += t;
  for (var n = t; n < i; n += 1)
    e += Re(a.getUint8(n));
  return e;
}
var yi = /^data:.*,/;
function xi(a) {
  var t = a.replace(yi, ""), i = atob(t), e = new ArrayBuffer(i.length), n = new Uint8Array(e);
  return O(n, function(r, o) {
    n[o] = i.charCodeAt(o);
  }), e;
}
function Di(a, t) {
  for (var i = [], e = 8192, n = new Uint8Array(a); n.length > 0; )
    i.push(Re.apply(null, Te(n.subarray(0, e)))), n = n.subarray(e);
  return "data:".concat(t, ";base64,").concat(btoa(i.join("")));
}
function Ci(a) {
  var t = new DataView(a), i;
  try {
    var e, n, r;
    if (t.getUint8(0) === 255 && t.getUint8(1) === 216)
      for (var o = t.byteLength, s = 2; s + 1 < o; ) {
        if (t.getUint8(s) === 255 && t.getUint8(s + 1) === 225) {
          n = s;
          break;
        }
        s += 1;
      }
    if (n) {
      var p = n + 4, l = n + 10;
      if (wi(t, p, 4) === "Exif") {
        var h2 = t.getUint16(l);
        if (e = h2 === 18761, (e || h2 === 19789) && t.getUint16(l + 2, e) === 42) {
          var c = t.getUint32(l + 4, e);
          c >= 8 && (r = l + c);
        }
      }
    }
    if (r) {
      var u = t.getUint16(r, e), g, m;
      for (m = 0; m < u; m += 1)
        if (g = r + m * 12 + 2, t.getUint16(g, e) === 274) {
          g += 8, i = t.getUint16(g, e), t.setUint16(g, 1, e);
          break;
        }
    }
  } catch {
    i = 1;
  }
  return i;
}
function Ei(a) {
  var t = 0, i = 1, e = 1;
  switch (a) {
    case 2:
      i = -1;
      break;
    case 3:
      t = -180;
      break;
    case 4:
      e = -1;
      break;
    case 5:
      t = 90, e = -1;
      break;
    case 6:
      t = 90;
      break;
    case 7:
      t = 90, i = -1;
      break;
    case 8:
      t = -90;
      break;
  }
  return {
    rotate: t,
    scaleX: i,
    scaleY: e
  };
}
var Mi = {
  render: function() {
    this.initContainer(), this.initCanvas(), this.initCropBox(), this.renderCanvas(), this.cropped && this.renderCropBox();
  },
  initContainer: function() {
    var t = this.element, i = this.options, e = this.container, n = this.cropper, r = Number(i.minContainerWidth), o = Number(i.minContainerHeight);
    S(n, I), j(t, I);
    var s = {
      width: Math.max(e.offsetWidth, r >= 0 ? r : Ee),
      height: Math.max(e.offsetHeight, o >= 0 ? o : Me)
    };
    this.containerData = s, Z(n, {
      width: s.width,
      height: s.height
    }), S(t, I), j(n, I);
  },
  // Canvas (image wrapper)
  initCanvas: function() {
    var t = this.containerData, i = this.imageData, e = this.options.viewMode, n = Math.abs(i.rotate) % 180 === 90, r = n ? i.naturalHeight : i.naturalWidth, o = n ? i.naturalWidth : i.naturalHeight, s = r / o, p = t.width, l = t.height;
    t.height * s > t.width ? e === 3 ? p = t.height * s : l = t.width / s : e === 3 ? l = t.width / s : p = t.height * s;
    var h2 = {
      aspectRatio: s,
      naturalWidth: r,
      naturalHeight: o,
      width: p,
      height: l
    };
    this.canvasData = h2, this.limited = e === 1 || e === 2, this.limitCanvas(true, true), h2.width = Math.min(Math.max(h2.width, h2.minWidth), h2.maxWidth), h2.height = Math.min(Math.max(h2.height, h2.minHeight), h2.maxHeight), h2.left = (t.width - h2.width) / 2, h2.top = (t.height - h2.height) / 2, h2.oldLeft = h2.left, h2.oldTop = h2.top, this.initialCanvasData = C({}, h2);
  },
  limitCanvas: function(t, i) {
    var e = this.options, n = this.containerData, r = this.canvasData, o = this.cropBoxData, s = e.viewMode, p = r.aspectRatio, l = this.cropped && o;
    if (t) {
      var h2 = Number(e.minCanvasWidth) || 0, c = Number(e.minCanvasHeight) || 0;
      s > 1 ? (h2 = Math.max(h2, n.width), c = Math.max(c, n.height), s === 3 && (c * p > h2 ? h2 = c * p : c = h2 / p)) : s > 0 && (h2 ? h2 = Math.max(h2, l ? o.width : 0) : c ? c = Math.max(c, l ? o.height : 0) : l && (h2 = o.width, c = o.height, c * p > h2 ? h2 = c * p : c = h2 / p));
      var u = Q({
        aspectRatio: p,
        width: h2,
        height: c
      });
      h2 = u.width, c = u.height, r.minWidth = h2, r.minHeight = c, r.maxWidth = 1 / 0, r.maxHeight = 1 / 0;
    }
    if (i)
      if (s > (l ? 0 : 1)) {
        var g = n.width - r.width, m = n.height - r.height;
        r.minLeft = Math.min(0, g), r.minTop = Math.min(0, m), r.maxLeft = Math.max(0, g), r.maxTop = Math.max(0, m), l && this.limited && (r.minLeft = Math.min(o.left, o.left + (o.width - r.width)), r.minTop = Math.min(o.top, o.top + (o.height - r.height)), r.maxLeft = o.left, r.maxTop = o.top, s === 2 && (r.width >= n.width && (r.minLeft = Math.min(0, g), r.maxLeft = Math.max(0, g)), r.height >= n.height && (r.minTop = Math.min(0, m), r.maxTop = Math.max(0, m))));
      } else
        r.minLeft = -r.width, r.minTop = -r.height, r.maxLeft = n.width, r.maxTop = n.height;
  },
  renderCanvas: function(t, i) {
    var e = this.canvasData, n = this.imageData;
    if (i) {
      var r = vi({
        width: n.naturalWidth * Math.abs(n.scaleX || 1),
        height: n.naturalHeight * Math.abs(n.scaleY || 1),
        degree: n.rotate || 0
      }), o = r.width, s = r.height, p = e.width * (o / e.naturalWidth), l = e.height * (s / e.naturalHeight);
      e.left -= (p - e.width) / 2, e.top -= (l - e.height) / 2, e.width = p, e.height = l, e.aspectRatio = o / s, e.naturalWidth = o, e.naturalHeight = s, this.limitCanvas(true, false);
    }
    (e.width > e.maxWidth || e.width < e.minWidth) && (e.left = e.oldLeft), (e.height > e.maxHeight || e.height < e.minHeight) && (e.top = e.oldTop), e.width = Math.min(Math.max(e.width, e.minWidth), e.maxWidth), e.height = Math.min(Math.max(e.height, e.minHeight), e.maxHeight), this.limitCanvas(false, true), e.left = Math.min(Math.max(e.left, e.minLeft), e.maxLeft), e.top = Math.min(Math.max(e.top, e.minTop), e.maxTop), e.oldLeft = e.left, e.oldTop = e.top, Z(this.canvas, C({
      width: e.width,
      height: e.height
    }, gt({
      translateX: e.left,
      translateY: e.top
    }))), this.renderImage(t), this.cropped && this.limited && this.limitCropBox(true, true);
  },
  renderImage: function(t) {
    var i = this.canvasData, e = this.imageData, n = e.naturalWidth * (i.width / i.naturalWidth), r = e.naturalHeight * (i.height / i.naturalHeight);
    C(e, {
      width: n,
      height: r,
      left: (i.width - n) / 2,
      top: (i.height - r) / 2
    }), Z(this.image, C({
      width: e.width,
      height: e.height
    }, gt(C({
      translateX: e.left,
      translateY: e.top
    }, e)))), t && this.output();
  },
  initCropBox: function() {
    var t = this.options, i = this.canvasData, e = t.aspectRatio || t.initialAspectRatio, n = Number(t.autoCropArea) || 0.8, r = {
      width: i.width,
      height: i.height
    };
    e && (i.height * e > i.width ? r.height = r.width / e : r.width = r.height * e), this.cropBoxData = r, this.limitCropBox(true, true), r.width = Math.min(Math.max(r.width, r.minWidth), r.maxWidth), r.height = Math.min(Math.max(r.height, r.minHeight), r.maxHeight), r.width = Math.max(r.minWidth, r.width * n), r.height = Math.max(r.minHeight, r.height * n), r.left = i.left + (i.width - r.width) / 2, r.top = i.top + (i.height - r.height) / 2, r.oldLeft = r.left, r.oldTop = r.top, this.initialCropBoxData = C({}, r);
  },
  limitCropBox: function(t, i) {
    var e = this.options, n = this.containerData, r = this.canvasData, o = this.cropBoxData, s = this.limited, p = e.aspectRatio;
    if (t) {
      var l = Number(e.minCropBoxWidth) || 0, h2 = Number(e.minCropBoxHeight) || 0, c = s ? Math.min(n.width, r.width, r.width + r.left, n.width - r.left) : n.width, u = s ? Math.min(n.height, r.height, r.height + r.top, n.height - r.top) : n.height;
      l = Math.min(l, n.width), h2 = Math.min(h2, n.height), p && (l && h2 ? h2 * p > l ? h2 = l / p : l = h2 * p : l ? h2 = l / p : h2 && (l = h2 * p), u * p > c ? u = c / p : c = u * p), o.minWidth = Math.min(l, c), o.minHeight = Math.min(h2, u), o.maxWidth = c, o.maxHeight = u;
    }
    i && (s ? (o.minLeft = Math.max(0, r.left), o.minTop = Math.max(0, r.top), o.maxLeft = Math.min(n.width, r.left + r.width) - o.width, o.maxTop = Math.min(n.height, r.top + r.height) - o.height) : (o.minLeft = 0, o.minTop = 0, o.maxLeft = n.width - o.width, o.maxTop = n.height - o.height));
  },
  renderCropBox: function() {
    var t = this.options, i = this.containerData, e = this.cropBoxData;
    (e.width > e.maxWidth || e.width < e.minWidth) && (e.left = e.oldLeft), (e.height > e.maxHeight || e.height < e.minHeight) && (e.top = e.oldTop), e.width = Math.min(Math.max(e.width, e.minWidth), e.maxWidth), e.height = Math.min(Math.max(e.height, e.minHeight), e.maxHeight), this.limitCropBox(false, true), e.left = Math.min(Math.max(e.left, e.minLeft), e.maxLeft), e.top = Math.min(Math.max(e.top, e.minTop), e.maxTop), e.oldLeft = e.left, e.oldTop = e.top, t.movable && t.cropBoxMovable && vt(this.face, mt, e.width >= i.width && e.height >= i.height ? ye : qt), Z(this.cropBox, C({
      width: e.width,
      height: e.height
    }, gt({
      translateX: e.left,
      translateY: e.top
    }))), this.cropped && this.limited && this.limitCanvas(true, true), this.disabled || this.output();
  },
  output: function() {
    this.preview(), ht(this.element, Wt, this.getData());
  }
};
var Ti = {
  initPreview: function() {
    var t = this.element, i = this.crossOrigin, e = this.options.preview, n = i ? this.crossOriginUrl : this.url, r = t.alt || "The image to preview", o = document.createElement("img");
    if (i && (o.crossOrigin = i), o.src = n, o.alt = r, this.viewBox.appendChild(o), this.viewBoxImage = o, !!e) {
      var s = e;
      typeof e == "string" ? s = t.ownerDocument.querySelectorAll(e) : e.querySelector && (s = [e]), this.previews = s, O(s, function(p) {
        var l = document.createElement("img");
        vt(p, Et, {
          width: p.offsetWidth,
          height: p.offsetHeight,
          html: p.innerHTML
        }), i && (l.crossOrigin = i), l.src = n, l.alt = r, l.style.cssText = 'display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"', p.innerHTML = "", p.appendChild(l);
      });
    }
  },
  resetPreview: function() {
    O(this.previews, function(t) {
      var i = $t(t, Et);
      Z(t, {
        width: i.width,
        height: i.height
      }), t.innerHTML = i.html, fi(t, Et);
    });
  },
  preview: function() {
    var t = this.imageData, i = this.canvasData, e = this.cropBoxData, n = e.width, r = e.height, o = t.width, s = t.height, p = e.left - i.left - t.left, l = e.top - i.top - t.top;
    !this.cropped || this.disabled || (Z(this.viewBoxImage, C({
      width: o,
      height: s
    }, gt(C({
      translateX: -p,
      translateY: -l
    }, t)))), O(this.previews, function(h2) {
      var c = $t(h2, Et), u = c.width, g = c.height, m = u, y = g, b = 1;
      n && (b = u / n, y = r * b), r && y > g && (b = g / r, m = n * b, y = g), Z(h2, {
        width: m,
        height: y
      }), Z(h2.getElementsByTagName("img")[0], C({
        width: o * b,
        height: s * b
      }, gt(C({
        translateX: -p * b,
        translateY: -l * b
      }, t))));
    }));
  }
};
var Oi = {
  bind: function() {
    var t = this.element, i = this.options, e = this.cropper;
    k(i.cropstart) && P(t, jt, i.cropstart), k(i.cropmove) && P(t, Ut, i.cropmove), k(i.cropend) && P(t, Xt, i.cropend), k(i.crop) && P(t, Wt, i.crop), k(i.zoom) && P(t, Vt, i.zoom), P(e, ne, this.onCropStart = this.cropStart.bind(this)), i.zoomable && i.zoomOnWheel && P(e, pe, this.onWheel = this.wheel.bind(this), {
      passive: false,
      capture: true
    }), i.toggleDragModeOnDblclick && P(e, oe, this.onDblclick = this.dblclick.bind(this)), P(t.ownerDocument, se, this.onCropMove = this.cropMove.bind(this)), P(t.ownerDocument, he, this.onCropEnd = this.cropEnd.bind(this)), i.responsive && P(window, le, this.onResize = this.resize.bind(this));
  },
  unbind: function() {
    var t = this.element, i = this.options, e = this.cropper;
    k(i.cropstart) && U(t, jt, i.cropstart), k(i.cropmove) && U(t, Ut, i.cropmove), k(i.cropend) && U(t, Xt, i.cropend), k(i.crop) && U(t, Wt, i.crop), k(i.zoom) && U(t, Vt, i.zoom), U(e, ne, this.onCropStart), i.zoomable && i.zoomOnWheel && U(e, pe, this.onWheel, {
      passive: false,
      capture: true
    }), i.toggleDragModeOnDblclick && U(e, oe, this.onDblclick), U(t.ownerDocument, se, this.onCropMove), U(t.ownerDocument, he, this.onCropEnd), i.responsive && U(window, le, this.onResize);
  }
};
var Ni = {
  resize: function() {
    if (!this.disabled) {
      var t = this.options, i = this.container, e = this.containerData, n = i.offsetWidth / e.width, r = i.offsetHeight / e.height, o = Math.abs(n - 1) > Math.abs(r - 1) ? n : r;
      if (o !== 1) {
        var s, p;
        t.restore && (s = this.getCanvasData(), p = this.getCropBoxData()), this.render(), t.restore && (this.setCanvasData(O(s, function(l, h2) {
          s[h2] = l * o;
        })), this.setCropBoxData(O(p, function(l, h2) {
          p[h2] = l * o;
        })));
      }
    }
  },
  dblclick: function() {
    this.disabled || this.options.dragMode === Ce || this.setDragMode(pi(this.dragBox, Yt) ? De : Zt);
  },
  wheel: function(t) {
    var i = this, e = Number(this.options.wheelZoomRatio) || 0.1, n = 1;
    this.disabled || (t.preventDefault(), !this.wheeling && (this.wheeling = true, setTimeout(function() {
      i.wheeling = false;
    }, 50), t.deltaY ? n = t.deltaY > 0 ? 1 : -1 : t.wheelDelta ? n = -t.wheelDelta / 120 : t.detail && (n = t.detail > 0 ? 1 : -1), this.zoom(-n * e, t)));
  },
  cropStart: function(t) {
    var i = t.buttons, e = t.button;
    if (!(this.disabled || (t.type === "mousedown" || t.type === "pointerdown" && t.pointerType === "mouse") && // No primary button (Usually the left button)
    (v(i) && i !== 1 || v(e) && e !== 0 || t.ctrlKey))) {
      var n = this.options, r = this.pointers, o;
      t.changedTouches ? O(t.changedTouches, function(s) {
        r[s.identifier] = Mt(s);
      }) : r[t.pointerId || 0] = Mt(t), Object.keys(r).length > 1 && n.zoomable && n.zoomOnTouch ? o = xe : o = $t(t.target, mt), ei.test(o) && ht(this.element, jt, {
        originalEvent: t,
        action: o
      }) !== false && (t.preventDefault(), this.action = o, this.cropping = false, o === we && (this.cropping = true, S(this.dragBox, Tt)));
    }
  },
  cropMove: function(t) {
    var i = this.action;
    if (!(this.disabled || !i)) {
      var e = this.pointers;
      t.preventDefault(), ht(this.element, Ut, {
        originalEvent: t,
        action: i
      }) !== false && (t.changedTouches ? O(t.changedTouches, function(n) {
        C(e[n.identifier] || {}, Mt(n, true));
      }) : C(e[t.pointerId || 0] || {}, Mt(t, true)), this.change(t));
    }
  },
  cropEnd: function(t) {
    if (!this.disabled) {
      var i = this.action, e = this.pointers;
      t.changedTouches ? O(t.changedTouches, function(n) {
        delete e[n.identifier];
      }) : delete e[t.pointerId || 0], i && (t.preventDefault(), Object.keys(e).length || (this.action = ""), this.cropping && (this.cropping = false, nt(this.dragBox, Tt, this.cropped && this.options.modal)), ht(this.element, Xt, {
        originalEvent: t,
        action: i
      }));
    }
  }
};
var Si = {
  change: function(t) {
    var i = this.options, e = this.canvasData, n = this.containerData, r = this.cropBoxData, o = this.pointers, s = this.action, p = i.aspectRatio, l = r.left, h2 = r.top, c = r.width, u = r.height, g = l + c, m = h2 + u, y = 0, b = 0, E = n.width, T = n.height, x = true, z;
    !p && t.shiftKey && (p = c && u ? c / u : 1), this.limited && (y = r.minLeft, b = r.minTop, E = y + Math.min(n.width, e.width, e.left + e.width), T = b + Math.min(n.height, e.height, e.top + e.height));
    var B = o[Object.keys(o)[0]], f = {
      x: B.endX - B.startX,
      y: B.endY - B.startY
    }, w2 = function(A) {
      switch (A) {
        case K:
          g + f.x > E && (f.x = E - g);
          break;
        case tt2:
          l + f.x < y && (f.x = y - l);
          break;
        case q:
          h2 + f.y < b && (f.y = b - h2);
          break;
        case rt:
          m + f.y > T && (f.y = T - m);
          break;
      }
    };
    switch (s) {
      case qt:
        l += f.x, h2 += f.y;
        break;
      case K:
        if (f.x >= 0 && (g >= E || p && (h2 <= b || m >= T))) {
          x = false;
          break;
        }
        w2(K), c += f.x, c < 0 && (s = tt2, c = -c, l -= c), p && (u = c / p, h2 += (r.height - u) / 2);
        break;
      case q:
        if (f.y <= 0 && (h2 <= b || p && (l <= y || g >= E))) {
          x = false;
          break;
        }
        w2(q), u -= f.y, h2 += f.y, u < 0 && (s = rt, u = -u, h2 -= u), p && (c = u * p, l += (r.width - c) / 2);
        break;
      case tt2:
        if (f.x <= 0 && (l <= y || p && (h2 <= b || m >= T))) {
          x = false;
          break;
        }
        w2(tt2), c -= f.x, l += f.x, c < 0 && (s = K, c = -c, l -= c), p && (u = c / p, h2 += (r.height - u) / 2);
        break;
      case rt:
        if (f.y >= 0 && (m >= T || p && (l <= y || g >= E))) {
          x = false;
          break;
        }
        w2(rt), u += f.y, u < 0 && (s = q, u = -u, h2 -= u), p && (c = u * p, l += (r.width - c) / 2);
        break;
      case pt:
        if (p) {
          if (f.y <= 0 && (h2 <= b || g >= E)) {
            x = false;
            break;
          }
          w2(q), u -= f.y, h2 += f.y, c = u * p;
        } else
          w2(q), w2(K), f.x >= 0 ? g < E ? c += f.x : f.y <= 0 && h2 <= b && (x = false) : c += f.x, f.y <= 0 ? h2 > b && (u -= f.y, h2 += f.y) : (u -= f.y, h2 += f.y);
        c < 0 && u < 0 ? (s = dt, u = -u, c = -c, h2 -= u, l -= c) : c < 0 ? (s = ut, c = -c, l -= c) : u < 0 && (s = ft, u = -u, h2 -= u);
        break;
      case ut:
        if (p) {
          if (f.y <= 0 && (h2 <= b || l <= y)) {
            x = false;
            break;
          }
          w2(q), u -= f.y, h2 += f.y, c = u * p, l += r.width - c;
        } else
          w2(q), w2(tt2), f.x <= 0 ? l > y ? (c -= f.x, l += f.x) : f.y <= 0 && h2 <= b && (x = false) : (c -= f.x, l += f.x), f.y <= 0 ? h2 > b && (u -= f.y, h2 += f.y) : (u -= f.y, h2 += f.y);
        c < 0 && u < 0 ? (s = ft, u = -u, c = -c, h2 -= u, l -= c) : c < 0 ? (s = pt, c = -c, l -= c) : u < 0 && (s = dt, u = -u, h2 -= u);
        break;
      case dt:
        if (p) {
          if (f.x <= 0 && (l <= y || m >= T)) {
            x = false;
            break;
          }
          w2(tt2), c -= f.x, l += f.x, u = c / p;
        } else
          w2(rt), w2(tt2), f.x <= 0 ? l > y ? (c -= f.x, l += f.x) : f.y >= 0 && m >= T && (x = false) : (c -= f.x, l += f.x), f.y >= 0 ? m < T && (u += f.y) : u += f.y;
        c < 0 && u < 0 ? (s = pt, u = -u, c = -c, h2 -= u, l -= c) : c < 0 ? (s = ft, c = -c, l -= c) : u < 0 && (s = ut, u = -u, h2 -= u);
        break;
      case ft:
        if (p) {
          if (f.x >= 0 && (g >= E || m >= T)) {
            x = false;
            break;
          }
          w2(K), c += f.x, u = c / p;
        } else
          w2(rt), w2(K), f.x >= 0 ? g < E ? c += f.x : f.y >= 0 && m >= T && (x = false) : c += f.x, f.y >= 0 ? m < T && (u += f.y) : u += f.y;
        c < 0 && u < 0 ? (s = ut, u = -u, c = -c, h2 -= u, l -= c) : c < 0 ? (s = dt, c = -c, l -= c) : u < 0 && (s = pt, u = -u, h2 -= u);
        break;
      case ye:
        this.move(f.x, f.y), x = false;
        break;
      case xe:
        this.zoom(gi(o), t), x = false;
        break;
      case we:
        if (!f.x || !f.y) {
          x = false;
          break;
        }
        z = Se(this.cropper), l = B.startX - z.left, h2 = B.startY - z.top, c = r.minWidth, u = r.minHeight, f.x > 0 ? s = f.y > 0 ? ft : pt : f.x < 0 && (l -= c, s = f.y > 0 ? dt : ut), f.y < 0 && (h2 -= u), this.cropped || (j(this.cropBox, I), this.cropped = true, this.limited && this.limitCropBox(true, true));
        break;
    }
    x && (r.width = c, r.height = u, r.left = l, r.top = h2, this.action = s, this.renderCropBox()), O(o, function(M) {
      M.startX = M.endX, M.startY = M.endY;
    });
  }
};
var Ri = {
  // Show the crop box manually
  crop: function() {
    return this.ready && !this.cropped && !this.disabled && (this.cropped = true, this.limitCropBox(true, true), this.options.modal && S(this.dragBox, Tt), j(this.cropBox, I), this.setCropBoxData(this.initialCropBoxData)), this;
  },
  // Reset the image and crop box to their initial states
  reset: function() {
    return this.ready && !this.disabled && (this.imageData = C({}, this.initialImageData), this.canvasData = C({}, this.initialCanvasData), this.cropBoxData = C({}, this.initialCropBoxData), this.renderCanvas(), this.cropped && this.renderCropBox()), this;
  },
  // Clear the crop box
  clear: function() {
    return this.cropped && !this.disabled && (C(this.cropBoxData, {
      left: 0,
      top: 0,
      width: 0,
      height: 0
    }), this.cropped = false, this.renderCropBox(), this.limitCanvas(true, true), this.renderCanvas(), j(this.dragBox, Tt), S(this.cropBox, I)), this;
  },
  /**
   * Replace the image's src and rebuild the cropper
   * @param {string} url - The new URL.
   * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.
   * @returns {Cropper} this
   */
  replace: function(t) {
    var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return !this.disabled && t && (this.isImg && (this.element.src = t), i ? (this.url = t, this.image.src = t, this.ready && (this.viewBoxImage.src = t, O(this.previews, function(e) {
      e.getElementsByTagName("img")[0].src = t;
    }))) : (this.isImg && (this.replaced = true), this.options.data = null, this.uncreate(), this.load(t))), this;
  },
  // Enable (unfreeze) the cropper
  enable: function() {
    return this.ready && this.disabled && (this.disabled = false, j(this.cropper, ae)), this;
  },
  // Disable (freeze) the cropper
  disable: function() {
    return this.ready && !this.disabled && (this.disabled = true, S(this.cropper, ae)), this;
  },
  /**
   * Destroy the cropper and remove the instance from the image
   * @returns {Cropper} this
   */
  destroy: function() {
    var t = this.element;
    return t[D] ? (t[D] = void 0, this.isImg && this.replaced && (t.src = this.originalUrl), this.uncreate(), this) : this;
  },
  /**
   * Move the canvas with relative offsets
   * @param {number} offsetX - The relative offset distance on the x-axis.
   * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.
   * @returns {Cropper} this
   */
  move: function(t) {
    var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t, e = this.canvasData, n = e.left, r = e.top;
    return this.moveTo(It(t) ? t : n + Number(t), It(i) ? i : r + Number(i));
  },
  /**
   * Move the canvas to an absolute point
   * @param {number} x - The x-axis coordinate.
   * @param {number} [y=x] - The y-axis coordinate.
   * @returns {Cropper} this
   */
  moveTo: function(t) {
    var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t, e = this.canvasData, n = false;
    return t = Number(t), i = Number(i), this.ready && !this.disabled && this.options.movable && (v(t) && (e.left = t, n = true), v(i) && (e.top = i, n = true), n && this.renderCanvas(true)), this;
  },
  /**
   * Zoom the canvas with a relative ratio
   * @param {number} ratio - The target ratio.
   * @param {Event} _originalEvent - The original event if any.
   * @returns {Cropper} this
   */
  zoom: function(t, i) {
    var e = this.canvasData;
    return t = Number(t), t < 0 ? t = 1 / (1 - t) : t = 1 + t, this.zoomTo(e.width * t / e.naturalWidth, null, i);
  },
  /**
   * Zoom the canvas to an absolute ratio
   * @param {number} ratio - The target ratio.
   * @param {Object} pivot - The zoom pivot point coordinate.
   * @param {Event} _originalEvent - The original event if any.
   * @returns {Cropper} this
   */
  zoomTo: function(t, i, e) {
    var n = this.options, r = this.canvasData, o = r.width, s = r.height, p = r.naturalWidth, l = r.naturalHeight;
    if (t = Number(t), t >= 0 && this.ready && !this.disabled && n.zoomable) {
      var h2 = p * t, c = l * t;
      if (ht(this.element, Vt, {
        ratio: t,
        oldRatio: o / p,
        originalEvent: e
      }) === false)
        return this;
      if (e) {
        var u = this.pointers, g = Se(this.cropper), m = u && Object.keys(u).length ? mi(u) : {
          pageX: e.pageX,
          pageY: e.pageY
        };
        r.left -= (h2 - o) * ((m.pageX - g.left - r.left) / o), r.top -= (c - s) * ((m.pageY - g.top - r.top) / s);
      } else
        ot(i) && v(i.x) && v(i.y) ? (r.left -= (h2 - o) * ((i.x - r.left) / o), r.top -= (c - s) * ((i.y - r.top) / s)) : (r.left -= (h2 - o) / 2, r.top -= (c - s) / 2);
      r.width = h2, r.height = c, this.renderCanvas(true);
    }
    return this;
  },
  /**
   * Rotate the canvas with a relative degree
   * @param {number} degree - The rotate degree.
   * @returns {Cropper} this
   */
  rotate: function(t) {
    return this.rotateTo((this.imageData.rotate || 0) + Number(t));
  },
  /**
   * Rotate the canvas to an absolute degree
   * @param {number} degree - The rotate degree.
   * @returns {Cropper} this
   */
  rotateTo: function(t) {
    return t = Number(t), v(t) && this.ready && !this.disabled && this.options.rotatable && (this.imageData.rotate = t % 360, this.renderCanvas(true, true)), this;
  },
  /**
   * Scale the image on the x-axis.
   * @param {number} scaleX - The scale ratio on the x-axis.
   * @returns {Cropper} this
   */
  scaleX: function(t) {
    var i = this.imageData.scaleY;
    return this.scale(t, v(i) ? i : 1);
  },
  /**
   * Scale the image on the y-axis.
   * @param {number} scaleY - The scale ratio on the y-axis.
   * @returns {Cropper} this
   */
  scaleY: function(t) {
    var i = this.imageData.scaleX;
    return this.scale(v(i) ? i : 1, t);
  },
  /**
   * Scale the image
   * @param {number} scaleX - The scale ratio on the x-axis.
   * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.
   * @returns {Cropper} this
   */
  scale: function(t) {
    var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t, e = this.imageData, n = false;
    return t = Number(t), i = Number(i), this.ready && !this.disabled && this.options.scalable && (v(t) && (e.scaleX = t, n = true), v(i) && (e.scaleY = i, n = true), n && this.renderCanvas(true, true)), this;
  },
  /**
   * Get the cropped area position and size data (base on the original image)
   * @param {boolean} [rounded=false] - Indicate if round the data values or not.
   * @returns {Object} The result cropped data.
   */
  getData: function() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, i = this.options, e = this.imageData, n = this.canvasData, r = this.cropBoxData, o;
    if (this.ready && this.cropped) {
      o = {
        x: r.left - n.left,
        y: r.top - n.top,
        width: r.width,
        height: r.height
      };
      var s = e.width / e.naturalWidth;
      if (O(o, function(h2, c) {
        o[c] = h2 / s;
      }), t) {
        var p = Math.round(o.y + o.height), l = Math.round(o.x + o.width);
        o.x = Math.round(o.x), o.y = Math.round(o.y), o.width = l - o.x, o.height = p - o.y;
      }
    } else
      o = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    return i.rotatable && (o.rotate = e.rotate || 0), i.scalable && (o.scaleX = e.scaleX || 1, o.scaleY = e.scaleY || 1), o;
  },
  /**
   * Set the cropped area position and size with new data
   * @param {Object} data - The new data.
   * @returns {Cropper} this
   */
  setData: function(t) {
    var i = this.options, e = this.imageData, n = this.canvasData, r = {};
    if (this.ready && !this.disabled && ot(t)) {
      var o = false;
      i.rotatable && v(t.rotate) && t.rotate !== e.rotate && (e.rotate = t.rotate, o = true), i.scalable && (v(t.scaleX) && t.scaleX !== e.scaleX && (e.scaleX = t.scaleX, o = true), v(t.scaleY) && t.scaleY !== e.scaleY && (e.scaleY = t.scaleY, o = true)), o && this.renderCanvas(true, true);
      var s = e.width / e.naturalWidth;
      v(t.x) && (r.left = t.x * s + n.left), v(t.y) && (r.top = t.y * s + n.top), v(t.width) && (r.width = t.width * s), v(t.height) && (r.height = t.height * s), this.setCropBoxData(r);
    }
    return this;
  },
  /**
   * Get the container size data.
   * @returns {Object} The result container data.
   */
  getContainerData: function() {
    return this.ready ? C({}, this.containerData) : {};
  },
  /**
   * Get the image position and size data.
   * @returns {Object} The result image data.
   */
  getImageData: function() {
    return this.sized ? C({}, this.imageData) : {};
  },
  /**
   * Get the canvas position and size data.
   * @returns {Object} The result canvas data.
   */
  getCanvasData: function() {
    var t = this.canvasData, i = {};
    return this.ready && O(["left", "top", "width", "height", "naturalWidth", "naturalHeight"], function(e) {
      i[e] = t[e];
    }), i;
  },
  /**
   * Set the canvas position and size with new data.
   * @param {Object} data - The new canvas data.
   * @returns {Cropper} this
   */
  setCanvasData: function(t) {
    var i = this.canvasData, e = i.aspectRatio;
    return this.ready && !this.disabled && ot(t) && (v(t.left) && (i.left = t.left), v(t.top) && (i.top = t.top), v(t.width) ? (i.width = t.width, i.height = t.width / e) : v(t.height) && (i.height = t.height, i.width = t.height * e), this.renderCanvas(true)), this;
  },
  /**
   * Get the crop box position and size data.
   * @returns {Object} The result crop box data.
   */
  getCropBoxData: function() {
    var t = this.cropBoxData, i;
    return this.ready && this.cropped && (i = {
      left: t.left,
      top: t.top,
      width: t.width,
      height: t.height
    }), i || {};
  },
  /**
   * Set the crop box position and size with new data.
   * @param {Object} data - The new crop box data.
   * @returns {Cropper} this
   */
  setCropBoxData: function(t) {
    var i = this.cropBoxData, e = this.options.aspectRatio, n, r;
    return this.ready && this.cropped && !this.disabled && ot(t) && (v(t.left) && (i.left = t.left), v(t.top) && (i.top = t.top), v(t.width) && t.width !== i.width && (n = true, i.width = t.width), v(t.height) && t.height !== i.height && (r = true, i.height = t.height), e && (n ? i.height = i.width / e : r && (i.width = i.height * e)), this.renderCropBox()), this;
  },
  /**
   * Get a canvas drawn the cropped image.
   * @param {Object} [options={}] - The config options.
   * @returns {HTMLCanvasElement} - The result canvas.
   */
  getCroppedCanvas: function() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!this.ready || !window.HTMLCanvasElement)
      return null;
    var i = this.canvasData, e = bi(this.image, this.imageData, i, t);
    if (!this.cropped)
      return e;
    var n = this.getData(), r = n.x, o = n.y, s = n.width, p = n.height, l = e.width / Math.floor(i.naturalWidth);
    l !== 1 && (r *= l, o *= l, s *= l, p *= l);
    var h2 = s / p, c = Q({
      aspectRatio: h2,
      width: t.maxWidth || 1 / 0,
      height: t.maxHeight || 1 / 0
    }), u = Q({
      aspectRatio: h2,
      width: t.minWidth || 0,
      height: t.minHeight || 0
    }, "cover"), g = Q({
      aspectRatio: h2,
      width: t.width || (l !== 1 ? e.width : s),
      height: t.height || (l !== 1 ? e.height : p)
    }), m = g.width, y = g.height;
    m = Math.min(c.width, Math.max(u.width, m)), y = Math.min(c.height, Math.max(u.height, y));
    var b = document.createElement("canvas"), E = b.getContext("2d");
    b.width = st(m), b.height = st(y), E.fillStyle = t.fillColor || "transparent", E.fillRect(0, 0, m, y);
    var T = t.imageSmoothingEnabled, x = T === void 0 ? true : T, z = t.imageSmoothingQuality;
    E.imageSmoothingEnabled = x, z && (E.imageSmoothingQuality = z);
    var B = e.width, f = e.height, w2 = r, M = o, A, L, $, X, H, _;
    w2 <= -s || w2 > B ? (w2 = 0, A = 0, $ = 0, H = 0) : w2 <= 0 ? ($ = -w2, w2 = 0, A = Math.min(B, s + w2), H = A) : w2 <= B && ($ = 0, A = Math.min(s, B - w2), H = A), A <= 0 || M <= -p || M > f ? (M = 0, L = 0, X = 0, _ = 0) : M <= 0 ? (X = -M, M = 0, L = Math.min(f, p + M), _ = L) : M <= f && (X = 0, L = Math.min(p, f - M), _ = L);
    var R = [w2, M, A, L];
    if (H > 0 && _ > 0) {
      var F = m / s;
      R.push($ * F, X * F, H * F, _ * F);
    }
    return E.drawImage.apply(E, [e].concat(be(R.map(function(J) {
      return Math.floor(st(J));
    })))), b;
  },
  /**
   * Change the aspect ratio of the crop box.
   * @param {number} aspectRatio - The new aspect ratio.
   * @returns {Cropper} this
   */
  setAspectRatio: function(t) {
    var i = this.options;
    return !this.disabled && !It(t) && (i.aspectRatio = Math.max(0, t) || NaN, this.ready && (this.initCropBox(), this.cropped && this.renderCropBox())), this;
  },
  /**
   * Change the drag mode.
   * @param {string} mode - The new drag mode.
   * @returns {Cropper} this
   */
  setDragMode: function(t) {
    var i = this.options, e = this.dragBox, n = this.face;
    if (this.ready && !this.disabled) {
      var r = t === Zt, o = i.movable && t === De;
      t = r || o ? t : Ce, i.dragMode = t, vt(e, mt, t), nt(e, Yt, r), nt(e, Pt, o), i.cropBoxMovable || (vt(n, mt, t), nt(n, Yt, r), nt(n, Pt, o));
    }
    return this;
  }
};
var Bi = V.Cropper;
var Be = function() {
  function a(t) {
    var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (je(this, a), !t || !ri.test(t.tagName))
      throw new Error("The first argument is required and must be an <img> or <canvas> element.");
    this.element = t, this.options = C({}, fe, ot(i) && i), this.cropped = false, this.disabled = false, this.pointers = {}, this.ready = false, this.reloading = false, this.replaced = false, this.sized = false, this.sizing = false, this.init();
  }
  return Ve(a, [{
    key: "init",
    value: function() {
      var i = this.element, e = i.tagName.toLowerCase(), n;
      if (!i[D]) {
        if (i[D] = this, e === "img") {
          if (this.isImg = true, n = i.getAttribute("src") || "", this.originalUrl = n, !n)
            return;
          n = i.src;
        } else
          e === "canvas" && window.HTMLCanvasElement && (n = i.toDataURL());
        this.load(n);
      }
    }
  }, {
    key: "load",
    value: function(i) {
      var e = this;
      if (i) {
        this.url = i, this.imageData = {};
        var n = this.element, r = this.options;
        if (!r.rotatable && !r.scalable && (r.checkOrientation = false), !r.checkOrientation || !window.ArrayBuffer) {
          this.clone();
          return;
        }
        if (ii.test(i)) {
          ai.test(i) ? this.read(xi(i)) : this.clone();
          return;
        }
        var o = new XMLHttpRequest(), s = this.clone.bind(this);
        this.reloading = true, this.xhr = o, o.onabort = s, o.onerror = s, o.ontimeout = s, o.onprogress = function() {
          o.getResponseHeader("content-type") !== ue && o.abort();
        }, o.onload = function() {
          e.read(o.response);
        }, o.onloadend = function() {
          e.reloading = false, e.xhr = null;
        }, r.checkCrossOrigin && ge(i) && n.crossOrigin && (i = me(i)), o.open("GET", i, true), o.responseType = "arraybuffer", o.withCredentials = n.crossOrigin === "use-credentials", o.send();
      }
    }
  }, {
    key: "read",
    value: function(i) {
      var e = this.options, n = this.imageData, r = Ci(i), o = 0, s = 1, p = 1;
      if (r > 1) {
        this.url = Di(i, ue);
        var l = Ei(r);
        o = l.rotate, s = l.scaleX, p = l.scaleY;
      }
      e.rotatable && (n.rotate = o), e.scalable && (n.scaleX = s, n.scaleY = p), this.clone();
    }
  }, {
    key: "clone",
    value: function() {
      var i = this.element, e = this.url, n = i.crossOrigin, r = e;
      this.options.checkCrossOrigin && ge(e) && (n || (n = "anonymous"), r = me(e)), this.crossOrigin = n, this.crossOriginUrl = r;
      var o = document.createElement("img");
      n && (o.crossOrigin = n), o.src = r || e, o.alt = i.alt || "The image to crop", this.image = o, o.onload = this.start.bind(this), o.onerror = this.stop.bind(this), S(o, re), i.parentNode.insertBefore(o, i.nextSibling);
    }
  }, {
    key: "start",
    value: function() {
      var i = this, e = this.image;
      e.onload = null, e.onerror = null, this.sizing = true;
      var n = V.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(V.navigator.userAgent), r = function(l, h2) {
        C(i.imageData, {
          naturalWidth: l,
          naturalHeight: h2,
          aspectRatio: l / h2
        }), i.initialImageData = C({}, i.imageData), i.sizing = false, i.sized = true, i.build();
      };
      if (e.naturalWidth && !n) {
        r(e.naturalWidth, e.naturalHeight);
        return;
      }
      var o = document.createElement("img"), s = document.body || document.documentElement;
      this.sizingImage = o, o.onload = function() {
        r(o.width, o.height), n || s.removeChild(o);
      }, o.src = e.src, n || (o.style.cssText = "left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;", s.appendChild(o));
    }
  }, {
    key: "stop",
    value: function() {
      var i = this.image;
      i.onload = null, i.onerror = null, i.parentNode.removeChild(i), this.image = null;
    }
  }, {
    key: "build",
    value: function() {
      if (!(!this.sized || this.ready)) {
        var i = this.element, e = this.options, n = this.image, r = i.parentNode, o = document.createElement("div");
        o.innerHTML = oi;
        var s = o.querySelector(".".concat(D, "-container")), p = s.querySelector(".".concat(D, "-canvas")), l = s.querySelector(".".concat(D, "-drag-box")), h2 = s.querySelector(".".concat(D, "-crop-box")), c = h2.querySelector(".".concat(D, "-face"));
        this.container = r, this.cropper = s, this.canvas = p, this.dragBox = l, this.cropBox = h2, this.viewBox = s.querySelector(".".concat(D, "-view-box")), this.face = c, p.appendChild(n), S(i, I), r.insertBefore(s, i.nextSibling), j(n, re), this.initPreview(), this.bind(), e.initialAspectRatio = Math.max(0, e.initialAspectRatio) || NaN, e.aspectRatio = Math.max(0, e.aspectRatio) || NaN, e.viewMode = Math.max(0, Math.min(3, Math.round(e.viewMode))) || 0, S(h2, I), e.guides || S(h2.getElementsByClassName("".concat(D, "-dashed")), I), e.center || S(h2.getElementsByClassName("".concat(D, "-center")), I), e.background && S(s, "".concat(D, "-bg")), e.highlight || S(c, Qe), e.cropBoxMovable && (S(c, Pt), vt(c, mt, qt)), e.cropBoxResizable || (S(h2.getElementsByClassName("".concat(D, "-line")), I), S(h2.getElementsByClassName("".concat(D, "-point")), I)), this.render(), this.ready = true, this.setDragMode(e.dragMode), e.autoCrop && this.crop(), this.setData(e.data), k(e.ready) && P(i, ce, e.ready, {
          once: true
        }), ht(i, ce);
      }
    }
  }, {
    key: "unbuild",
    value: function() {
      if (this.ready) {
        this.ready = false, this.unbind(), this.resetPreview();
        var i = this.cropper.parentNode;
        i && i.removeChild(this.cropper), j(this.element, I);
      }
    }
  }, {
    key: "uncreate",
    value: function() {
      this.ready ? (this.unbuild(), this.ready = false, this.cropped = false) : this.sizing ? (this.sizingImage.onload = null, this.sizing = false, this.sized = false) : this.reloading ? (this.xhr.onabort = null, this.xhr.abort()) : this.image && this.stop();
    }
    /**
     * Get the no conflict cropper class.
     * @returns {Cropper} The cropper class.
     */
  }], [{
    key: "noConflict",
    value: function() {
      return window.Cropper = Bi, a;
    }
    /**
     * Change the default options.
     * @param {Object} options - The new default options.
     */
  }, {
    key: "setDefaults",
    value: function(i) {
      C(fe, ot(i) && i);
    }
  }]), a;
}();
C(Be.prototype, Mi, Ti, Oi, Ni, Si, Ri);
var Ai = typeof window > "u" ? [String, Array] : [String, Array, Element, NodeList];
var _i = {
  render() {
    const a = this.crossorigin || void 0;
    return h("div", { style: this.containerStyle }, [
      h("img", {
        ref: "img",
        src: this.src,
        alt: this.alt || "image",
        style: [{ "max-width": "100%" }, this.imgStyle],
        crossorigin: a
      })
    ]);
  },
  props: {
    // Library props
    containerStyle: Object,
    src: {
      type: String,
      default: ""
    },
    alt: String,
    imgStyle: Object,
    // CropperJS props
    viewMode: Number,
    dragMode: String,
    initialAspectRatio: Number,
    aspectRatio: Number,
    data: Object,
    preview: Ai,
    responsive: {
      type: Boolean,
      default: true
    },
    restore: {
      type: Boolean,
      default: true
    },
    checkCrossOrigin: {
      type: Boolean,
      default: true
    },
    checkOrientation: {
      type: Boolean,
      default: true
    },
    crossorigin: {
      type: String
    },
    modal: {
      type: Boolean,
      default: true
    },
    guides: {
      type: Boolean,
      default: true
    },
    center: {
      type: Boolean,
      default: true
    },
    highlight: {
      type: Boolean,
      default: true
    },
    background: {
      type: Boolean,
      default: true
    },
    autoCrop: {
      type: Boolean,
      default: true
    },
    autoCropArea: Number,
    movable: {
      type: Boolean,
      default: true
    },
    rotatable: {
      type: Boolean,
      default: true
    },
    scalable: {
      type: Boolean,
      default: true
    },
    zoomable: {
      type: Boolean,
      default: true
    },
    zoomOnTouch: {
      type: Boolean,
      default: true
    },
    zoomOnWheel: {
      type: Boolean,
      default: true
    },
    wheelZoomRatio: Number,
    cropBoxMovable: {
      type: Boolean,
      default: true
    },
    cropBoxResizable: {
      type: Boolean,
      default: true
    },
    toggleDragModeOnDblclick: {
      type: Boolean,
      default: true
    },
    // Size limitation
    minCanvasWidth: Number,
    minCanvasHeight: Number,
    minCropBoxWidth: Number,
    minCropBoxHeight: Number,
    minContainerWidth: Number,
    minContainerHeight: Number,
    // callbacks
    ready: Function,
    cropstart: Function,
    cropmove: Function,
    cropend: Function,
    crop: Function,
    zoom: Function
  },
  mounted() {
    const { containerStyle: a, src: t, alt: i, imgStyle: e, ...n } = this.$options.props, r = {};
    for (const o in n)
      this[o] !== void 0 && (r[o] = this[o]);
    this.cropper = new Be(this.$refs.img, r);
  },
  methods: {
    // Reset the image and crop box to their initial states
    reset() {
      return this.cropper.reset();
    },
    // Clear the crop box
    clear() {
      return this.cropper.clear();
    },
    // Init crop box manually
    initCrop() {
      return this.cropper.crop();
    },
    /**
     * Replace the image's src and rebuild the cropper
     * @param {string} url - The new URL.
     * @param {boolean} [onlyColorChanged] - Indicate if the new image only changed color.
     * @returns {Object} this
     */
    replace(a, t = false) {
      return this.cropper.replace(a, t);
    },
    // Enable (unfreeze) the cropper
    enable() {
      return this.cropper.enable();
    },
    // Disable (freeze) the cropper
    disable() {
      return this.cropper.disable();
    },
    // Destroy the cropper and remove the instance from the image
    destroy() {
      return this.cropper.destroy();
    },
    /**
     * Move the canvas with relative offsets
     * @param {number} offsetX - The relative offset distance on the x-axis.
     * @param {number} offsetY - The relative offset distance on the y-axis.
     * @returns {Object} this
     */
    move(a, t) {
      return this.cropper.move(a, t);
    },
    /**
     * Move the canvas to an absolute point
     * @param {number} x - The x-axis coordinate.
     * @param {number} [y=x] - The y-axis coordinate.
     * @returns {Object} this
     */
    moveTo(a, t = a) {
      return this.cropper.moveTo(a, t);
    },
    /**
     * Zoom the canvas with a relative ratio
     * @param {number} ratio - The target ratio.
     * @param {Event} _originalEvent - The original event if any.
     * @returns {Object} this
     */
    relativeZoom(a, t) {
      return this.cropper.zoom(a, t);
    },
    /**
     * Zoom the canvas to an absolute ratio
     * @param {number} ratio - The target ratio.
     * @param {Event} _originalEvent - The original event if any.
     * @returns {Object} this
     */
    zoomTo(a, t) {
      return this.cropper.zoomTo(a, t);
    },
    /**
     * Rotate the canvas with a relative degree
     * @param {number} degree - The rotate degree.
     * @returns {Object} this
     */
    rotate(a) {
      return this.cropper.rotate(a);
    },
    /**
     * Rotate the canvas to an absolute degree
     * @param {number} degree - The rotate degree.
     * @returns {Object} this
     */
    rotateTo(a) {
      return this.cropper.rotateTo(a);
    },
    /**
     * Scale the image on the x-axis.
     * @param {number} scaleX - The scale ratio on the x-axis.
     * @returns {Object} this
     */
    scaleX(a) {
      return this.cropper.scaleX(a);
    },
    /**
     * Scale the image on the y-axis.
     * @param {number} scaleY - The scale ratio on the y-axis.
     * @returns {Object} this
     */
    scaleY(a) {
      return this.cropper.scaleY(a);
    },
    /**
     * Scale the image
     * @param {number} scaleX - The scale ratio on the x-axis.
     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.
     * @returns {Object} this
     */
    scale(a, t = a) {
      return this.cropper.scale(a, t);
    },
    /**
     * Get the cropped area position and size data (base on the original image)
     * @param {boolean} [rounded=false] - Indicate if round the data values or not.
     * @returns {Object} The result cropped data.
     */
    getData(a = false) {
      return this.cropper.getData(a);
    },
    /**
     * Set the cropped area position and size with new data
     * @param {Object} data - The new data.
     * @returns {Object} this
     */
    setData(a) {
      return this.cropper.setData(a);
    },
    /**
     * Get the container size data.
     * @returns {Object} The result container data.
     */
    getContainerData() {
      return this.cropper.getContainerData();
    },
    /**
     * Get the image position and size data.
     * @returns {Object} The result image data.
     */
    getImageData() {
      return this.cropper.getImageData();
    },
    /**
     * Get the canvas position and size data.
     * @returns {Object} The result canvas data.
     */
    getCanvasData() {
      return this.cropper.getCanvasData();
    },
    /**
     * Set the canvas position and size with new data.
     * @param {Object} data - The new canvas data.
     * @returns {Object} this
     */
    setCanvasData(a) {
      return this.cropper.setCanvasData(a);
    },
    /**
     * Get the crop box position and size data.
     * @returns {Object} The result crop box data.
     */
    getCropBoxData() {
      return this.cropper.getCropBoxData();
    },
    /**
     * Set the crop box position and size with new data.
     * @param {Object} data - The new crop box data.
     * @returns {Object} this
     */
    setCropBoxData(a) {
      return this.cropper.setCropBoxData(a);
    },
    /**
     * Get a canvas drawn the cropped image.
     * @param {Object} [options={}] - The config options.
     * @returns {HTMLCanvasElement} - The result canvas.
     */
    getCroppedCanvas(a = {}) {
      return this.cropper.getCroppedCanvas(a);
    },
    /**
     * Change the aspect ratio of the crop box.
     * @param {number} aspectRatio - The new aspect ratio.
     * @returns {Object} this
     */
    setAspectRatio(a) {
      return this.cropper.setAspectRatio(a);
    },
    /**
     * Change the drag mode.
     * @param {string} mode - The new drag mode.
     * @returns {Object} this
     */
    setDragMode(a) {
      return this.cropper.setDragMode(a);
    }
  }
};
var ki = defineComponent({
  name: "FsCropper",
  components: {
    VueCropper: _i
  },
  props: {
    // 对话框标题
    title: {
      type: String,
      default: "图片裁剪"
    },
    // cropper的高度，默认为浏览器可视窗口高度的40%，最小270
    cropperHeight: {
      type: [String, Number]
    },
    // 对话框宽度，默认50%
    dialogWidth: {
      type: [String, Number],
      default: "50%"
    },
    // 图片大小限制，单位MB，0为不限制
    maxSize: {
      type: Number,
      default: 5
    },
    // 上传提示
    uploadTip: {
      type: String
    },
    // cropperjs的参数，详见：https://github.com/fengyuanchen/cropperjs
    cropper: {
      type: Object
    },
    // 可接收的文件后缀
    accept: {
      type: String,
      default: ".jpg, .jpeg, .png, .gif, .webp"
    },
    // 输出类型，blob,dataUrl,all
    output: {
      type: String,
      default: "blob"
      // blob
    }
  },
  emits: ["cancel", "done", "ready"],
  setup(a, t) {
    const { ui: i } = w(), { t: e } = tt(), n = ref(false), r = ref(), o = ref(), s = ref(false), p = ref(), l = ref(), h2 = ref(), c = ref({
      x: 1,
      y: 1
    });
    function u() {
      n.value = false;
    }
    function g() {
      x(), t.emit("cancel");
    }
    const m = i.dialog.buildOnClosedBind(g), y = i.dialog.customClass, b = ref({
      ...m,
      [y]: "fs-cropper-dialog",
      ...i.formWrapper.buildWidthBind(i.dialog.name, "960px"),
      ...i.formWrapper.buildInitBind(i.dialog.name)
    });
    function E(d) {
      n.value = true, d != null && d !== "" && (p.value = d);
    }
    function T() {
      n.value = false;
    }
    function x() {
      s.value = false, o.value != null && (o.value.value = null, o.value = null), r.value != null && r.value.clear();
    }
    function z() {
      return r.value;
    }
    const B = {
      cropper: z(),
      zoom: yt,
      clear: x,
      close: T,
      open: E
    };
    function f(d) {
      t.emit("ready", {
        event: d,
        ...B
      });
    }
    function w2(d) {
      return d.preventDefault(), false;
    }
    function M() {
      o.value.click();
    }
    function A(d) {
      return d.type.indexOf("image") === -1 ? (i.message.warn("请选择合适的文件类型"), false) : a.maxSize > 0 && d.size / 1024 / 1024 > a.maxSize ? (i.message.warn(`图片大小超出最大限制（${a.maxSize}MB），请重新选择.`), false) : true;
    }
    function L(d) {
      const N = d.target.files[0];
      if (N.type.indexOf("image/") === -1) {
        i.message.warn("Please select an image file");
        return;
      }
      if (typeof FileReader == "function") {
        const Y = new FileReader();
        Y.onload = (xt) => {
          p.value = xt.target.result, r.value.replace(xt.target.result);
        }, Y.readAsDataURL(N);
      } else
        i.message.error("Sorry, FileReader API not supported");
    }
    function $(d) {
      d.preventDefault();
      const N = d.target.files || d.dataTransfer.files;
      if (N == null)
        return;
      s.value = true;
      const Y = N[0];
      A(Y) && (h2.value = Y, L(d));
    }
    function X() {
      return r.value.getCroppedCanvas().toDataURL();
    }
    function H(d, N, Y) {
      return r.value.getCroppedCanvas().toBlob(d, N, Y);
    }
    function _(d) {
      t.emit("done", d);
    }
    function R(d) {
      const N = { file: d };
      if (a.output === "all") {
        H((Y) => {
          const xt = X();
          N.blob = Y, N.dataUrl = xt, _(N);
        });
        return;
      }
      if (a.output === "blob") {
        H((Y) => {
          N.blob = Y, _(N);
        });
        return;
      }
      a.output === "dataUrl" && (N.dataUrl = X(), _(N));
    }
    function F() {
      if (!s.value) {
        i.message.warn("请先选择图片");
        return;
      }
      n.value = false, R(h2.value);
    }
    function J() {
      r.value.scaleX(c.value.x *= -1);
    }
    function it() {
      r.value.scaleY(c.value.y *= -1);
    }
    function ct() {
      l.value = JSON.stringify(r.value.getCropBoxData(), null, 4);
    }
    function bt() {
      l.value = JSON.stringify(r.value.getData(), null, 4);
    }
    function wt(d, N) {
      r.value.move(d, N);
    }
    function lt() {
      r.value.reset();
    }
    function at(d) {
      r.value.rotate(d);
    }
    function Nt() {
      r.value.setCropBoxData(JSON.parse(l.value));
    }
    function St() {
      r.value.setData(JSON.parse(l.value));
    }
    function Ae() {
      o.value.click();
    }
    function yt(d) {
      r.value.relativeZoom(d);
    }
    const _e = computed(() => {
      const d = "small";
      return [
        {
          size: d,
          round: true,
          icon: i.icons.edit,
          text: e("fs.extends.cropper.reChoose"),
          onClick() {
            M();
          }
        },
        {
          size: d,
          round: true,
          text: e("fs.extends.cropper.flipX"),
          onClick() {
            J();
          }
        },
        {
          size: d,
          round: true,
          text: e("fs.extends.cropper.flipY"),
          onClick() {
            it();
          }
        },
        {
          size: d,
          round: true,
          icon: i.icons.zoomIn,
          onClick() {
            yt(0.1);
          }
        },
        {
          size: d,
          round: true,
          icon: i.icons.zoomOut,
          onClick() {
            yt(-0.1);
          }
        },
        {
          size: d,
          round: true,
          icon: i.icons.refreshLeft,
          onClick() {
            at(90);
          }
        },
        {
          size: d,
          round: true,
          icon: i.icons.refreshRight,
          onClick() {
            at(-90);
          }
        },
        {
          size: d,
          round: true,
          icon: i.icons.refresh,
          text: e("fs.extends.cropper.reset"),
          onClick() {
            lt();
          }
        }
      ];
    });
    return {
      ui: i,
      cropperRef: r,
      fileInputRef: o,
      dialogVisible: n,
      dialogBinding: b,
      isLoaded: s,
      imgSrc: p,
      data: l,
      file: h2,
      scale: c,
      computedButtons: _e,
      handleClose: u,
      setData: St,
      handleClosed: g,
      close: T,
      showFileChooser: Ae,
      zoom: yt,
      setCropBoxData: Nt,
      rotate: at,
      reset: lt,
      move: wt,
      getData: bt,
      getCropBoxData: ct,
      flipY: it,
      flipX: J,
      doCropper: F,
      doOutput: R,
      getCropImageBlob: H,
      getCropImageDataUrl: X,
      handleChange: $,
      setImage: L,
      checkFile: A,
      handleClick: M,
      preventDefault: w2,
      open: E,
      clear: x,
      getCropperRef: z,
      ready: f
    };
  },
  data() {
    return {};
  },
  computed: {
    _uploadTip() {
      return this.uploadTip != null && this.uploadTip !== "" ? this.uploadTip : this.maxSize > 0 ? `只支持${this.accept.replace(/,/g, "、")},大小不超过${this.maxSize}M` : `只支持${this.accept},大小无限制`;
    },
    _cropper() {
      const a = {
        aspectRatio: 1,
        ready: this.ready
      };
      return this.cropper == null ? a : Object.assign(a, this.cropper);
    },
    _cropperHeight() {
      let a = this.cropperHeight;
      return a == null && (a = document.documentElement.clientHeight * 0.55, a < 270 && (a = 270)), typeof a == "number" ? a + "px" : a;
    },
    _dialogWidth() {
      let a = this.dialogWidth;
      return a == null && (a = "50%"), typeof a == "number" ? a + "px" : a;
    }
  }
});
var Ii = { class: "fs-cropper-dialog-wrap" };
var zi = ["accept"];
var Li = { class: "fs-cropper-dialog__choose fs-cropper-dialog_left" };
var Hi = { class: "fs-cropper-dialog__edit fs-cropper-dialog_left" };
var Yi = { class: "fs-cropper-dialog__edit-area" };
var Pi = { class: "tool-bar" };
var Wi = { class: "fs-cropper-dialog__preview" };
var Xi = createBaseVNode("span", { class: "fs-cropper-dialog__preview-title" }, "预览", -1);
var Ui = createBaseVNode("div", { class: "fs-cropper-dialog__preview-120 preview" }, null, -1);
var ji = { class: "dialog-footer" };
function Vi(a, t, i, e, n, r) {
  const o = resolveComponent("fs-button"), s = resolveComponent("vue-cropper");
  return openBlock(), createBlock(resolveDynamicComponent(a.ui.dialog.name), mergeProps({
    ref: "cropperDialogRef",
    [a.ui.dialog.visible]: a.dialogVisible,
    ["onUpdate:" + a.ui.dialog.visible]: t[2] || (t[2] = (p) => a.dialogVisible = p),
    "append-to-body": "",
    width: "900px",
    "close-on-click-modal": true
  }, a.dialogBinding, { "destroy-on-close": false }), {
    footer: withCtx(() => [
      createBaseVNode("div", ji, [
        createVNode(o, {
          size: "small",
          text: "取消",
          onClick: a.handleClose
        }, null, 8, ["onClick"]),
        createVNode(o, {
          type: "primary",
          size: "small",
          text: "确定",
          onClick: t[1] || (t[1] = (p) => a.doCropper())
        })
      ])
    ]),
    default: withCtx(() => [
      createBaseVNode("div", Ii, [
        withDirectives(createBaseVNode("input", {
          ref: "fileInputRef",
          type: "file",
          accept: a.accept,
          onChange: t[0] || (t[0] = (...p) => a.handleChange && a.handleChange(...p))
        }, null, 40, zi), [
          [vShow, false]
        ]),
        withDirectives(createBaseVNode("div", Li, [
          createVNode(o, {
            round: "",
            text: "+选择图片",
            onClick: a.showFileChooser
          }, null, 8, ["onClick"]),
          createBaseVNode("p", null, toDisplayString(a._uploadTip), 1)
        ], 512), [
          [vShow, !a.isLoaded]
        ]),
        withDirectives(createBaseVNode("div", Hi, [
          createBaseVNode("div", Yi, [
            createVNode(s, mergeProps({
              ref: "cropperRef",
              src: a.imgSrc,
              preview: ".preview",
              style: { height: a._cropperHeight }
            }, a._cropper), null, 16, ["src", "style"])
          ]),
          createBaseVNode("div", Pi, [
            (openBlock(), createBlock(resolveDynamicComponent(a.ui.buttonGroup.name), null, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(a.computedButtons, (p, l) => (openBlock(), createBlock(o, mergeProps({ key: l }, p), null, 16))), 128))
              ]),
              _: 1
            }))
          ])
        ], 512), [
          [vShow, a.isLoaded]
        ]),
        createBaseVNode("div", Wi, [
          Xi,
          Ui,
          createBaseVNode("div", {
            class: normalizeClass(["fs-cropper-dialog__preview-65 preview", { round: a._cropper.aspectRatio === 1 }])
          }, null, 2)
        ])
      ])
    ]),
    _: 1
  }, 16);
}
var Zi = Cd(ki, [["render", Vi]]);
export {
  Zi as default
};
/*! Bundled license information:

@fast-crud/fast-extends/dist/fs-cropper-effc19ff.mjs:
  (*!
   * Cropper.js v1.5.13
   * https://fengyuanchen.github.io/cropperjs
   *
   * Copyright 2015-present Chen Fengyuan
   * Released under the MIT license
   *
   * Date: 2022-11-20T05:30:46.114Z
   *)
*/
//# sourceMappingURL=fs-cropper-effc19ff-FTYT4WPB.js.map
