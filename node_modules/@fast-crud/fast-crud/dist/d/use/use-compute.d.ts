import { Ref } from "vue";
import { ComputeContext } from "../d/compute";
import { AsyncComputeRef, ComputeFn, ComputeRef, ScopeContext } from "../d";
declare function doComputed(getTargetFunc: any, getContextFn: () => any, excludes?: any[], userComputedFn?: (target: any) => any): import("vue").ComputedRef<any>;
export declare class ComputeValue<T> implements ComputeRef<T> {
    computeFn: ComputeFn<T>;
    constructor(computeFn: ComputeFn<T>);
}
export declare function compute<T>(computeFn: (context: ComputeContext) => T): ComputeValue<T>;
export type GetContextFn = () => any;
export declare class AsyncComputeValue<T, P = any> implements AsyncComputeRef<T> {
    watch?: (context: ScopeContext) => P;
    asyncFn: (value: P, getContextFn: GetContextFn) => Promise<T>;
    defaultValue?: any;
    constructor(options: AsyncComputeRef<T>);
    buildAsyncRef(getContextFn: GetContextFn): Ref<T>;
}
export declare function asyncCompute<T>(options: AsyncComputeRef<T>): AsyncComputeValue<T>;
export declare function useCompute(): {
    ComputeValue: typeof ComputeValue;
    compute: typeof compute;
    AsyncComputeValue: typeof AsyncComputeValue;
    asyncCompute: typeof asyncCompute;
    doComputed: typeof doComputed;
};
export {};
