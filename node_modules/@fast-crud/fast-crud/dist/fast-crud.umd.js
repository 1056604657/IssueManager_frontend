var F3=Object.defineProperty;var C3=(se,de,l)=>de in se?F3(se,de,{enumerable:!0,configurable:!0,writable:!0,value:l}):se[de]=l;var ke=(se,de,l)=>(C3(se,typeof de!="symbol"?de+"":de,l),l),Hc=(se,de,l)=>{if(!de.has(se))throw TypeError("Cannot "+l)};var U=(se,de,l)=>(Hc(se,de,"read from private field"),l?l.call(se):de.get(se)),$e=(se,de,l)=>{if(de.has(se))throw TypeError("Cannot add the same private member more than once");de instanceof WeakSet?de.add(se):de.set(se,l)},Te=(se,de,l,G)=>(Hc(se,de,"write to private field"),G?G.call(se,l):de.set(se,l),l);var Oo=(se,de,l,G)=>({set _(At){Te(se,de,At,l)},get _(){return U(se,de,G)}}),be=(se,de,l)=>(Hc(se,de,"access private method"),l);(function(se,de){typeof exports=="object"&&typeof module<"u"?de(exports,require("@fast-crud/ui-interface"),require("vue"),require("lodash-es"),require("dayjs"),require("vue-router")):typeof define=="function"&&define.amd?define(["exports","@fast-crud/ui-interface","vue","lodash-es","dayjs","vue-router"],de):(se=typeof globalThis<"u"?globalThis:se||self,de(se.FastCrud={},se.FsUiInterface,se.Vue,se._,se.dayjs,se.VueRouter))})(this,function(se,de,l,G,At,Gm){var Um,ai,Xr,Sr,fn,Kr,ii,Nt,Yr,Pt,lt,Ne,lr,Tr,tr,Ut,qr,zt,An,Dn,Jr,un,ta,mr,ms,jc,Aa,Rn,ps,Fr,Do,zm,Da,si,gs,hn,aa,dn,ia,xs,zc,oi,Bo,li,No,at,ft,vs,Gc,Ra,bs;"use strict";const ci={commonOptions(e){return{}},defaultOptions(e){const{t}=e,r=de.uiContext.get();return{mode:{},status:{},search:{container:{is:"fs-search-layout-default",collapse:!0,col:{span:4}},options:{...r.form.inlineLayout,showFeedback:!1},onValidateError({trigger:n}){n==="search"&&r.notification.error({message:t("fs.search.error.message")})},collapse:!0,show:!0,buttons:{search:{icon:r.icons.search},reset:{icon:r.icons.refresh}}},form:{labelPlacement:"left",labelPosition:"right",labelWidth:"80px",style:{"grid-template-columns":"50% 50%"},row:{gutter:10},col:{span:12},labelAlign:"right",labelCol:{span:4},wrapperCol:{span:18},wrapper:{is:r.dialog.name,...r.formWrapper.buildWidthBind(r.dialog.name,"960px"),...r.formWrapper.buildInitBind(r.dialog.name),draggable:!0,destroyOnClose:!0,...r.dialog.footer()}},addForm:{wrapper:{title:t("fs.addForm.title")}},editForm:{wrapper:{title:t("fs.editForm.title")}},viewForm:{wrapper:{title:t("fs.viewForm.title")}},rowHandle:{width:"250px",title:t("fs.rowHandle.title"),order:1e3,dropdown:{more:{text:null,type:"primary",icon:r.icons.more}}},pagination:{background:!0,pageSize:20,[r.pagination.currentPage]:1,[r.pagination.total]:1,pageSizes:[5,10,20,50],layout:"total, sizes, prev, pager, next, jumper",showSizeChanger:!0,showQuickJumper:!0,showSizePicker:!0,showTotal:n=>t("fs.pagination.showTotal",[n])},table:{show:!0,height:"100%",rowKey:r.table.defaultRowKey,stripe:!0,border:!0,bordered:!0,singleLine:!1,editable:{enabled:!1,rowKey:"$editable_id"},pagination:!1},toolbar:{compact:!0},actionbar:{buttons:{add:{type:"primary",text:t("fs.actionbar.add")}}}}}};function Xm(){var t;return(t=new Error().stack)==null?void 0:t.split(`
`)[3]}const Zr=(...e)=>{};function Po(...e){console.log.apply(this,arguments)}function Km(...e){console.warn.apply(this,arguments)}function Ym(...e){console.error.apply(this,arguments)}const qm=(...e)=>{Ym("%c [error]","font-weight: 600;",...e)},Jm=(...e)=>{Km("%c [warn]","font-weight: 600;",...e)},Xc=(...e)=>{Po("%c [info]","font-weight: 600;",...e)},Zm=(...e)=>{if(!console.log)return;const t=Xm();{const r=["%c [debug]","font-weight: 600;",...e];Po(...r);const n=["%c "+t,"color:#999"];Po(...n)}},Fe={debug:Zr,info:Zr,warn:Zr,error:Zr,log:Zr};function Kc(e={}){const t=(e==null?void 0:e.level)||"info";switch(Fe.debug=Zr,Fe.info=Zr,Fe.warn=Zr,Fe.error=Zr,Fe.log=Zr,t){case"debug":Fe.debug=Zm;case"info":Fe.info=Xc,Fe.log=Xc;case"warn":Fe.warn=Jm;case"error":Fe.error=qm;break}}Kc();function Qm(e){return e==null||e===""}function ep(...e){for(const t of e)if(!(t==null||t===""))return!1;return!1}function tp(...e){for(const t of e)if(t==null||t==="")return!0;return!1}const Io={isEmpty:Qm,isAllEmpty:ep,hasEmpty:tp},rp={trace(e){}};function Lo(e){return l.defineAsyncComponent({loader:e,onError(t,r,n,a){console.error("load error",t),t.message.match(/fetch/)&&a<=3?r():n()}})}function np(e,t,r,n){const a=Lo(r);e.component(t,a,n)}function ap(e,t,r,n,a){const i=fi(t,n,a);G.forEach(i,(s,o)=>{r&&r.indexOf(o)!=-1||np(e,o,s,null)})}function ip(e,t,r,n,a){const i=fi(t,n,a);G.forEach(i,(s,o)=>{r&&r.indexOf(o)||e.component(o,s.default)})}function fi(e,t,r){const n={};return t==null&&(t=/.*\/(.+).(vue|jsx|tsx)/),G.forEach(e,(a,i)=>{const s=i.match(t);if((s==null?void 0:s.length)<=1){console.error(`"${i}" can't pick a component name,this component can't register`);return}let o=s[1];o=G.camelCase(o),o=G.upperFirst(o),r&&(a=r(a)),n[o]=a}),n}function sp(e){const t=fi(e),r={};return G.forEach(t,(n,a)=>{r[a]=Lo(n)}),r}function op(e){const t=fi(e),r={};return G.forEach(t,(n,a)=>{r[a]=n.default}),r}const lp={transformFromGlob:fi,installAsyncComponents:ap,installSyncComponents:ip,createAsyncComponent:Lo,loadAsyncComponentFromGlob:sp,loadComponentFromGlob:op};class Yc{constructor(t){ke(this,"key");ke(this,"tableId");const{$router:r,tableName:n,keyType:a}=t;this.key=this.getItemKey(r,a),this.tableId=this.getTableId(n)}getTableId(t){const r="fs-crud";return t&&typeof t=="string"?r+"."+t:r}getTable(){const t=localStorage.getItem(this.tableId);if(t!=null)return JSON.parse(t)}saveTable(t){localStorage.setItem(this.tableId,JSON.stringify(t))}clearTable(){localStorage.removeItem(this.tableId)}updateTableValue(t,r=this.key){let n=this.getTable();n==null&&(n={}),n[r]=t,this.saveTable(n)}getItemKey(t,r){let n=location.href;return t&&(n=t.path),r==null||typeof r!="string"?n:n+"."+r}getTableValue(t){const r=this.getTable();return r==null?null:(t==null&&(t=this.key),r[t])}clearTableValue(t){const r=this.getTable();r!=null&&(t==null&&(t=this.key),delete r[t],this.saveTable(r))}}const cp=/\D/,fp=/^[a-zA-Z_$]+([\w_$]*)$/,up=/"/g;function qc(...e){return e.reduce((t,r)=>t?!r||r.startsWith("[")?`${t}${r}`:`${t}.${r}`:r,"")}function Jc(e){function t(r,...n){if(n=n.filter(a=>a!==void 0),e.isString(r))return qc(...n,r);if(Array.isArray(r))return n=qc(...n),r.reduce((a,i)=>{const s=typeof i;return s==="number"?i<0||i%1!==0?`${a}["${i}"]`:`${a}[${i}]`:s!=="string"?`${a}["${i}"]`:i?cp.test(i)?fp.test(i)?a?`${a}.${i}`:`${a}${i}`:`${a}["${i.replace(up,'\\"')}"]`:`${a}[${i}]`:`${a}[""]`},n)}return t}Jc.notChainable=!0;const hp=/^[a-zA-Z_$]+([\w_$]*)$/,dp=/"/g,Zc=Object.prototype.hasOwnProperty;function mp(e){const t=typeof e;return e!=null&&(t=="object"||t=="function")}function pp(e){const t=Jc(e);function r(i){const{options:s,obj:o,callback:c}=i;s.pathFormatArray=s.pathFormat=="array",i.depth=0;let f=!1;const u=()=>(f=!0,!1);for(;i&&!f;){if(!i.inited){if(i.inited=!0,i.info=ef(i.value,s.ownPropertiesOnly),s.checkCircular&&(i.circularParentIndex=-1,i.circularParent=null,i.isCircular=!1,i.info.isObject&&!i.info.isEmpty)){let h=i.parent;for(;h;){if(h.value===i.value){i.isCircular=!0,i.circularParent=h,i.circularParentIndex=i.depth-h.depth-1;break}h=h.parent}}if(i.children=[],s.childrenPath&&s.childrenPath.forEach((h,d)=>{const p=e.get(i.value,h),g=ef(p,s.ownPropertiesOnly);g.isEmpty||i.children.push([h,s.strChildrenPath[d],p,g])}),i.isLeaf=i.isCircular||s.childrenPath!==void 0&&!i.children.length||!i.info.isObject||i.info.isEmpty,i.needCallback=(i.depth||s.includeRoot)&&(!s.leavesOnly||i.isLeaf),i.needCallback){const h=new Qc(o,s,u);h.setItem(i,!1);try{i.res=c(i.value,i.key,i.parent&&i.parent.value,h)}catch(d){throw d.message&&(d.message+=`
callback failed before deep iterate at:
`+t(i.path)),d}}if(f)break;i.res!==!1&&!f&&!i.isCircular&&i.info.isObject&&(s.childrenPath!==void 0&&(i.depth||!s.rootIsChildren)?(i.childrenItems=[],i.children.length&&i.children.forEach(([h,d,p,g])=>{i.childrenItems=[...i.childrenItems,...g.isArray?n(i,p,s,h,d):a(i,p,s,h,d)]})):i.childrenItems=i.info.isArray?n(i,i.value,s,[],""):a(i,i.value,s,[],"")),i.currentChildIndex=-1}if(i.childrenItems&&i.currentChildIndex<i.childrenItems.length-1){i.currentChildIndex++,i.childrenItems[i.currentChildIndex].parentItem=i,i=i.childrenItems[i.currentChildIndex];continue}if(i.needCallback&&s.callbackAfterIterate){const h=new Qc(o,s,u);h.setItem(i,!0);try{c(i.value,i.key,i.parent&&i.parent.value,h)}catch(d){throw d.message&&(d.message+=`
callback failed after deep iterate at:
`+t(i.path)),d}}i=i.parentItem}}return r;function n(i,s,o,c,f){let u;o.pathFormatArray||(u=i.strPath||"",f&&u&&!f.startsWith("[")&&(u+="."),u+=f||"");const h=[];for(let d=0;d<s.length;d++){const p=s[d];if(p===void 0&&!(d in s))continue;let g;const m=!o.pathFormatArray;m&&(g=`${u}[${d}]`),h.push({value:p,key:d+"",path:[...i.path||[],...c,d+""],strPath:g,depth:i.depth+1,parent:{value:i.value,key:i.key,path:m?i.strPath:i.path,parent:i.parent,depth:i.depth,info:i.info},childrenPath:c.length&&c||void 0,strChildrenPath:f||void 0})}return h}function a(i,s,o,c,f){let u;o.pathFormatArray||(u=i.strPath||"",f&&u&&!f.startsWith("[")&&(u+="."),u+=f||"");const h=[],d=!o.pathFormatArray;for(const p in s){if(o.ownPropertiesOnly&&!Zc.call(s,p))continue;let g;d&&(hp.test(p)?u?g=`${u}.${p}`:g=`${p}`:g=`${u}["${p.replace(dp,'\\"')}"]`),h.push({value:s[p],key:p,path:[...i.path||[],...c,p],strPath:g,depth:i.depth+1,parent:{value:i.value,key:i.key,path:d?i.strPath:i.path,parent:i.parent,depth:i.depth,info:i.info},childrenPath:c.length&&c||void 0,strChildrenPath:f||void 0})}return h}}class Qc{constructor(t,r,n){ke(this,"_item");ke(this,"obj");ke(this,"_options");ke(this,"afterIterate");this.obj=t,this._options=r,this.break=n}setItem(t,r){this._item=t,this.afterIterate=r}get path(){return this._options.pathFormatArray?this._item.path:this._item.strPath}get parent(){return this._item.parent}get parents(){if(!this._item._parents){this._item._parents=[];let t=this._item.parent;for(;t;)this._item._parents[t.depth]=t,t=t.parent}return this._item._parents}get depth(){return this._item.depth}get isLeaf(){return this._item.isLeaf}get isCircular(){return this._item.isCircular}get circularParentIndex(){return this._item.circularParentIndex}get circularParent(){return this._item.circularParent}get childrenPath(){return this._options.childrenPath!==void 0&&(this._options.pathFormatArray?this._item.childrenPath:this._item.strChildrenPath)||void 0}get info(){return this._item.info}}function gp(e,t){for(const r in e)if(!t||Zc.call(e,r))return!1;return!0}function ef(e,t){const r={isObject:mp(e)};return r.isArray=r.isObject&&Array.isArray(e),r.isEmpty=r.isArray?!e.length:r.isObject?gp(e,t):!0,r}function xp(e){const t=pp(e);function r(n,a,i){if(a===void 0&&(a=e.identity),i=e.merge({includeRoot:!Array.isArray(n),pathFormat:"string",checkCircular:!1,leavesOnly:!1,ownPropertiesOnly:!0},i||{}),i.childrenPath!==void 0){if(!i.includeRoot&&i.rootIsChildren===void 0&&(i.rootIsChildren=Array.isArray(n)),!e.isString(i.childrenPath)&&!Array.isArray(i.childrenPath))throw Error("childrenPath can be string or array");e.isString(i.childrenPath)&&(i.childrenPath=[i.childrenPath]),i.strChildrenPath=i.childrenPath,i.childrenPath=[];for(let s=i.strChildrenPath.length-1;s>=0;s--)i.childrenPath[s]=e.toPath(i.strChildrenPath[s])}return t({value:n,callback:a,options:i,obj:n}),n}return r}const tf={forEachDeep:xp(G)},ui={logger:Fe,strings:Io,trace:rp,vite:lp,store:Yc,deepdash:tf,dash:{omit(e,...t){const r=Object.keys(e.value),n={};for(const a of r)a!=="loading"&&(t.indexOf(a)>=0||(n[a]=e.value[a]));return n}}};function Mo(e,t){return e.type!=="antdv"?{}:{labelCol:{span:t},wrapperCol:{span:23-t}}}function vp(){const{ui:e}=de.useUi();return{colspan:{form:{col:{span:24},...Mo(e,2)}},colspan3:{form:{col:{span:24},...Mo(e,3)}},colspan4:{form:{col:{span:24},...Mo(e,4)}}}}const wp=Object.freeze(Object.defineProperty({__proto__:null,default:vp},Symbol.toStringTag,{value:"Module"}));function _p(){const e=de.uiContext.get();return{button:{form:{component:{name:e.input.name,vModel:e.input.modelValue,[e.input.clearable]:!0}},column:{component:{name:"fs-button",vModel:"text"}}},link:{form:{component:{name:e.input.name,vModel:e.input.modelValue,[e.input.clearable]:!0}},column:{component:{name:"fs-button",vModel:"text",...e.button.linkType}}}}}const yp=Object.freeze(Object.defineProperty({__proto__:null,default:_p},Symbol.toStringTag,{value:"Module"}));function kp(){const e=de.uiContext.get();return{"dict-cascader":{search:{component:{clearable:!0}},form:{component:{name:"fs-dict-cascader",vModel:e.cascader.modelValue,[e.cascader.clearable]:!0}},column:{component:{name:"fs-dict-cascader-format"}}}}}const Ep=Object.freeze(Object.defineProperty({__proto__:null,default:kp},Symbol.toStringTag,{value:"Module"})),rf={name:"zh-cn",fs:{component:{select:{placeholder:"请选择"}},addForm:{title:"添加"},editForm:{title:"编辑"},viewForm:{title:"查看"},rowHandle:{title:"操作",remove:{text:"删除",confirmTitle:"删除提示",confirmMessage:"您确定要删除该记录吗?",success:"删除成功!"},edit:{text:"编辑"},view:{text:"查看"}},form:{cancel:"取消",ok:"确定",reset:"重置"},actionbar:{add:"添加"},toolbar:{columnFilter:{title:"列设置",fixed:"固定",order:"排序",reset:"还原",confirm:"确定",unnamed:"未命名"},search:{title:"查询显示"},refresh:{title:"刷新"},compact:{title:"紧凑模式"},export:{title:"导出"},columns:{title:"列设置"}},search:{container:{collapseButton:{text:{collapse:"收起",expand:"展开"}}},search:{text:"查询"},reset:{text:"重置"},error:{message:"查询表单校验失败"}},pagination:{showTotal:"共 {0} 条"},date:{formatter:{to:"至"}},extends:{cropper:{reChoose:"重新选择",flipX:"上下翻转",flipY:"左右翻转",reset:"重置"},fileUploader:{text:"文件上传",limitTip:"文件数量不能超过 {0}",sizeLimitTip:"文件大小不能超过 {0},当前大小：{1}",hasUploading:"还有文件正在上传，请等待上传完成，或删除它"}}}},bp={name:"en",fs:{component:{select:{placeholder:"please select"}},addForm:{title:"add"},editForm:{title:"edit"},viewForm:{title:"view"},rowHandle:{title:"handle",remove:{text:"remove",confirmTitle:"remove tip",confirmMessage:"Are you sure you want to delete this record?",success:"delete success!"},edit:{text:"edit"},view:{text:"view"}},form:{cancel:"cancel",ok:"ok",reset:"reset"},actionbar:{add:"add"},toolbar:{columnFilter:{title:"columns set",fixed:"fixed",order:"sort",reset:"reset",confirm:"ok",unnamed:"unnamed"},search:{title:"show search bar"},refresh:{title:"refresh"},compact:{title:"compact mode"},export:{title:"export"},columns:{title:"columns set"}},search:{container:{collapseButton:{text:{collapse:"collapse",expand:"expand"}}},search:{text:"search"},reset:{text:"reset"},error:{message:"form valid error"}},pagination:{showTotal:"Total {0} items"},date:{formatter:{to:"to"}},extends:{cropper:{reChoose:"reChoose",flipX:"flipX",flipY:"flipY",reset:"reset"}}}};function Sp(e,t){let r=G.get(rf,e);return r==null?e:t instanceof Array?(G.forEach(t,(n,a)=>{r=r.replace("{"+a+"}",n)}),r):r.replace("{n}",t)}class Tp{constructor(){ke(this,"vueI18nInstance",null)}t(t,r){return Sp(t,r)}setVueI18n(t){if(!t)return;t.global&&(t=t.global);const r=t.availableLocales;for(const n of r){if(n.startsWith("zh")){const a=t.getLocaleMessage(n),i=G.cloneDeep(a.fs||{});t.mergeLocaleMessage(n,{fs:rf.fs}),t.mergeLocaleMessage(n,{fs:i})}else if(n.startsWith("en")){const a=t.getLocaleMessage(n),i=G.cloneDeep(a.fs||{});t.mergeLocaleMessage(n,{fs:bp.fs}),t.mergeLocaleMessage(n,{fs:i})}Fe.debug("i18n",t.getLocaleMessage(n))}this.vueI18nInstance=t}}const Ss=new Tp;function nr(){return Ss.vueI18nInstance!=null?{t:Ss.vueI18nInstance.t}:{t:Ss.t}}var gn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function hi(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var nf={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(gn,function(){return function(r,n){var a=n.prototype,i=a.format;a.format=function(s){var o=this,c=this.$locale();if(!this.isValid())return i.bind(this)(s);var f=this.$utils(),u=(s||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,function(h){switch(h){case"Q":return Math.ceil((o.$M+1)/3);case"Do":return c.ordinal(o.$D);case"gggg":return o.weekYear();case"GGGG":return o.isoWeekYear();case"wo":return c.ordinal(o.week(),"W");case"w":case"ww":return f.s(o.week(),h==="w"?1:2,"0");case"W":case"WW":return f.s(o.isoWeek(),h==="W"?1:2,"0");case"k":case"kk":return f.s(String(o.$H===0?24:o.$H),h==="k"?1:2,"0");case"X":return Math.floor(o.$d.getTime()/1e3);case"x":return o.$d.getTime();case"z":return"["+o.offsetName()+"]";case"zzz":return"["+o.offsetName("long")+"]";default:return h}});return i.bind(this)(u)}}})})(nf);var Fp=nf.exports;const Cp=hi(Fp);At.extend(Cp);function Vo(e,t){if(!Io.isEmpty(e))return At(e).format(t)}function af(e,t="YYYY-MM-DD HH:mm:ss"){if(e!=null&&e instanceof Array&&e.length>1){if(Io.hasEmpty(e))return;const{t:r}=nr();return`${Vo(e[0],t)} ${r("fs.date.formatter.to")} ${Vo(e[1],t)}`}return Vo(e,t)}function Ap(e){const{value:t}=e;return af(t,"YYYY-MM-DD")}function Dp(e){const{value:t}=e;return af(t,"YYYY-MM-DD HH:mm:ss")}var sf={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(gn,function(){var r="week",n="year";return function(a,i,s){var o=i.prototype;o.week=function(c){if(c===void 0&&(c=null),c!==null)return this.add(7*(c-this.week()),"day");var f=this.$locale().yearStart||1;if(this.month()===11&&this.date()>25){var u=s(this).startOf(n).add(1,n).date(f),h=s(this).endOf(r);if(u.isBefore(h))return 1}var d=s(this).startOf(n).date(f).startOf(r).subtract(1,"millisecond"),p=this.diff(d,r,!0);return p<0?s(this).startOf("week").week():Math.ceil(p)},o.weeks=function(c){return c===void 0&&(c=null),this.week(c)}}})})(sf);var Rp=sf.exports;const Op=hi(Rp);var of={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(gn,function(){return function(r,n){n.prototype.weekday=function(a){var i=this.$locale().weekStart||0,s=this.$W,o=(s<i?s+7:s)-i;return this.$utils().u(a)?o:this.subtract(o,"day").add(a,"day")}}})})(of);var Bp=of.exports;const Np=hi(Bp);var lf={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(gn,function(){return function(r,n,a){var i=n.prototype,s=function(h){return h&&(h.indexOf?h:h.s)},o=function(h,d,p,g,m){var x=h.name?h:h.$locale(),v=s(x[d]),k=s(x[p]),w=v||k.map(function(b){return b.slice(0,g)});if(!m)return w;var S=x.weekStart;return w.map(function(b,T){return w[(T+(S||0))%7]})},c=function(){return a.Ls[a.locale()]},f=function(h,d){return h.formats[d]||function(p){return p.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(g,m,x){return m||x.slice(1)})}(h.formats[d.toUpperCase()])},u=function(){var h=this;return{months:function(d){return d?d.format("MMMM"):o(h,"months")},monthsShort:function(d){return d?d.format("MMM"):o(h,"monthsShort","months",3)},firstDayOfWeek:function(){return h.$locale().weekStart||0},weekdays:function(d){return d?d.format("dddd"):o(h,"weekdays")},weekdaysMin:function(d){return d?d.format("dd"):o(h,"weekdaysMin","weekdays",2)},weekdaysShort:function(d){return d?d.format("ddd"):o(h,"weekdaysShort","weekdays",3)},longDateFormat:function(d){return f(h.$locale(),d)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};i.localeData=function(){return u.bind(this)()},a.localeData=function(){var h=c();return{firstDayOfWeek:function(){return h.weekStart||0},weekdays:function(){return a.weekdays()},weekdaysShort:function(){return a.weekdaysShort()},weekdaysMin:function(){return a.weekdaysMin()},months:function(){return a.months()},monthsShort:function(){return a.monthsShort()},longDateFormat:function(d){return f(h,d)},meridiem:h.meridiem,ordinal:h.ordinal}},a.months=function(){return o(c(),"months")},a.monthsShort=function(){return o(c(),"monthsShort","months",3)},a.weekdays=function(h){return o(c(),"weekdays",null,null,h)},a.weekdaysShort=function(h){return o(c(),"weekdaysShort","weekdays",3,h)},a.weekdaysMin=function(h){return o(c(),"weekdaysMin","weekdays",2,h)}}})})(lf);var Pp=lf.exports;const Ip=hi(Pp);At.extend(Np),At.extend(Ip),At.extend(Op);function Lp(){const e=de.uiContext.get();function t(n){const{row:a,key:i,value:s}=n;s!=null&&(e.type==="naive"?a[i]=At(s).valueOf():e.type==="antdv"&&e.version==="4"||(a[i]=At(s)))}return{datetime:{form:{component:{...e.datePicker.buildDateType("datetime"),vModel:e.datePicker.modelValue}},column:{width:"170px",component:{name:"fs-date-format"}},valueBuilder(n){t(n)}},date:{form:{component:{...e.datePicker.buildDateType("date"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-MM-DD"}},valueBuilder(n){t(n)}},daterange:{form:{component:{...e.datePicker.buildDateType("daterange"),vModel:e.datePicker.modelValue}},column:{width:210,formatter:Ap},valueBuilder({row:n,key:a,value:i}){i!=null&&Array.isArray(i)&&i.length===2&&i!=null&&(e.type==="naive"?n[a]=[At(i[0]).valueOf(),At(i[1]).valueOf()]:n[a]=[At(i[0]),At(i[1])])}},datetimerange:{form:{component:{...e.datePicker.buildDateType("datetimerange"),vModel:e.datePicker.modelValue}},column:{width:340,formatter:Dp},valueBuilder({row:n,key:a,value:i}){i!=null&&Array.isArray(i)&&i.length===2&&(e.type==="naive"?n[a]=[At(i[0]).valueOf(),At(i[1]).valueOf()]:n[a]=[At(i[0]),At(i[1])])}},time:{form:{component:{name:e.timePicker.name,vModel:e.timePicker.modelValue}},column:{width:100,align:"center",component:{name:"fs-date-format",format:"HH:mm:ss"}},valueBuilder(n){t(n)}},month:{form:{component:{...e.datePicker.buildDateType("month"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-MM"}},valueBuilder(n){t(n)}},week:{form:{component:{...e.datePicker.buildDateType("week"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-ww[周]"}},valueBuilder(n){t(n)}},quarter:{form:{component:{...e.datePicker.buildDateType("quarter"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-[Q]Q"}},valueBuilder(n){t(n)}},year:{form:{component:{...e.datePicker.buildDateType("year"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY"}},valueBuilder(n){t(n)}}}}const Mp=Object.freeze(Object.defineProperty({__proto__:null,default:Lp},Symbol.toStringTag,{value:"Module"}));function Vp(){return{number:{form:{component:{name:"el-input-number",props:{}}},align:"center"},switch:{form:{component:{name:"el-switch",props:{}}},component:{name:"el-switch",props:{}},align:"center"},slider:{form:{component:{name:"el-slider",props:{}}},align:"center"},rate:{form:{component:{name:"el-rate",props:{}}},align:"center"},"color-picker":{form:{component:{name:"el-color-picker",props:{}}},align:"center"},transfer:{form:{component:{name:"el-transfer",props:{}}},align:"center"},autocomplete:{form:{component:{name:"el-autocomplete",props:{}}}}}}const Up=Object.freeze(Object.defineProperty({__proto__:null,default:Vp},Symbol.toStringTag,{value:"Module"}));function $p(){const e=de.uiContext.get();return{number:{form:{component:{name:e.number.name,vModel:e.modelValue}}}}}const Wp=Object.freeze(Object.defineProperty({__proto__:null,default:$p},Symbol.toStringTag,{value:"Module"}));function Hp(){return{"phone-number":{form:{component:{name:"el-phone-number-input"}},column:{formatter(e,t,r){let n="";return r!=null&&(r.callingCode!=null?n+="(+"+r.callingCode+")":r.countryCode!=null&&(n+="("+r.countryCode+")"),r.phoneNumber!=null&&(n+=r.phoneNumber)),n}}}}}const jp=Object.freeze(Object.defineProperty({__proto__:null,default:Hp},Symbol.toStringTag,{value:"Module"}));function zp(){const e=de.uiContext.get();return{select:{search:{autoSearchTrigger:"change"},form:{component:{name:e.select.name,[e.select.clearable]:!0}}},"dict-select":{search:{autoSearchTrigger:"change"},column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-dict-select",vModel:e.select.modelValue,[e.select.clearable]:!0}}},"table-select":{column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-table-select"}}},"dict-radio":{search:{component:{name:"fs-dict-select",vModel:e.select.modelValue,autoSearchTrigger:"change"}},form:{component:{name:"fs-dict-radio",vModel:e.radioGroup.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}},"dict-checkbox":{search:{component:{name:"fs-dict-select"},autoSearchTrigger:"change"},form:{component:{name:"fs-dict-checkbox",vModel:e.radioGroup.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}},"dict-switch":{search:{component:{name:"fs-dict-select",vModel:e.select.modelValue},autoSearchTrigger:"change"},form:{component:{name:"fs-dict-switch",vModel:e.switch.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}}}}const Gp=Object.freeze(Object.defineProperty({__proto__:null,default:zp},Symbol.toStringTag,{value:"Module"}));function Xp(){const e=de.uiContext.get();return{text:{form:{component:{name:e.input.name,vModel:e.textArea.modelValue,[e.input.clearable]:!0}},search:{autoSearchTrigger:"enter"}},password:{form:{component:{name:e.inputPassword.name,vModel:e.inputPassword.modelValue,...e.inputPassword.passwordType}},search:{autoSearchTrigger:"enter"}},textarea:{search:{component:{name:e.input.name,type:"text",[e.input.clearable]:!0},autoSearchTrigger:"enter"},form:{component:{name:e.textArea.name,type:e.textArea.type,vModel:e.textArea.modelValue,[e.input.clearable]:!0}}}}}const Kp=Object.freeze(Object.defineProperty({__proto__:null,default:Xp},Symbol.toStringTag,{value:"Module"}));function Yp(){const e=de.uiContext.get();return{"dict-tree":{search:{autoSearchTrigger:"change"},column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-dict-tree",vModel:e.treeSelect.modelValue,[e.treeSelect.clearable]:!0}}}}}const qp=Object.assign({"./list/assist.ts":wp,"./list/button.ts":yp,"./list/cascader.ts":Ep,"./list/date.ts":Mp,"./list/el.ts":Up,"./list/number.ts":Wp,"./list/phone.ts":jp,"./list/select.ts":Gp,"./list/text.ts":Kp,"./list/tree.ts":Object.freeze(Object.defineProperty({__proto__:null,default:Yp},Symbol.toStringTag,{value:"Module"}))}),cf=[];G.forEach(qp,e=>{cf.push(e.default)});const di={};function Jp(){return di}function Zp(e){return di[e]}function Qp(e){for(const t in e)di[t]=e[t]}const Na={getType:Zp,addTypes:Qp,getTypes:Jp,install(){for(const e of cf)G.forEach(e(),(t,r)=>{di[r]=t});Fe.debug("types installed:",di)}},e1=l.defineComponent({name:"FsPage",setup(){const e=l.ref();return l.onMounted(()=>{window.getComputedStyle(e.value.parentNode).getPropertyValue("position")!=="relative"&&ui.logger.warn("fs-page父节点的position建议为relative,因为fs-page为相对定位（position:absolute），如果样式没有异常，你可以忽略此警告")}),{pageRef:e}}}),O3="",rt=(e,t)=>{const r=e.__vccOpts||e;for(const[n,a]of t)r[n]=a;return r},t1={ref:"pageRef",class:"fs-page"},r1={key:0,class:"fs-page-header"},n1={class:"fs-page-content"},a1={key:1,class:"fs-page-footer"};function i1(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",t1,[e.$slots.header!=null?(l.openBlock(),l.createElementBlock("div",r1,[l.renderSlot(e.$slots,"header")])):l.createCommentVNode("",!0),l.createElementVNode("div",n1,[l.renderSlot(e.$slots,"default")]),e.$slots.footer!=null?(l.openBlock(),l.createElementBlock("div",a1,[l.renderSlot(e.$slots,"footer")])):l.createCommentVNode("",!0)],512)}const ff=rt(e1,[["render",i1]]);function Uo(e){return e!=null&&(e instanceof hf||l.isRef(e))}function uf(e){return Uo(e)&&!e.cloneable}function s1(e,...t){function r(a,i){if(i!=null&&(G.isArray(a)||Uo(i)))return i}let n=null;for(const a of t)Uo(a)&&(n=a);return n||G.mergeWith(e,...t,r)}function o1(e){if(uf(e))return e;function t(r){if(uf(r))return r}return G.cloneDeepWith(e,t)}let hf=class{constructor(){ke(this,"cloneable",!1)}setCloneable(t){this.cloneable=t}};function Ze(){return{merge:s1,cloneDeep:o1,UnMergeable:hf}}const{cloneDeep:l1}=Ze();function c1(e){return e instanceof Ts}function f1(e){return e instanceof mi}function df(e,t,r){const n={};if(e==null)return n;const a=r?c1:f1;return tf.forEachDeep(e,(i,s,o,c)=>{if(a(i)){const f=c.path;if(t){for(const u of t)if(typeof u=="string"){if(f.startsWith(u))return!1}else if(u instanceof RegExp&&u.test(f))return!0}return n[f]=i,!1}return!l.isShallow(i)},{checkCircular:!0}),n}function u1(e,t){if(e==null||Object.keys(e).length<=0)return null;const r={};return G.forEach(e,(n,a)=>{r[a]=n.buildAsyncRef(t)}),r}function h1(e,t){t==null||Object.keys(t).length<=0||G.forEach(t,(r,n)=>{G.set(e,n,r.value==null?null:r.value)})}function d1(e,t,r,n){const a=l.computed(()=>{const o=e();return df(o,r,!1)}),i=l.computed(()=>{const o=e();return df(o,r,!0)}),s=u1(i.value,t);return l.computed(()=>{let o=e();const c=Object.keys(i.value).length,f=Object.keys(a.value).length;if(c>0||f>0){if(o=l1(o),f>0){const u=t?t():{};G.forEach(a.value,(h,d)=>{G.set(o,d,h.computeFn(u))})}c>0&&h1(o,s)}return n?n(o):o})}class mi{constructor(t){ke(this,"computeFn");this.computeFn=t}}function mf(e){return new mi(e)}class Ts{constructor(t){ke(this,"watch");ke(this,"asyncFn");ke(this,"defaultValue");const{asyncFn:r,defaultValue:n}=t;this.watch=t.watch,this.asyncFn=r,this.defaultValue=n}buildAsyncRef(t){t=t||function(){};const r=l.ref(this.defaultValue),n=l.computed(()=>this.watch?this.watch(t()):null);return l.watch(()=>n.value,async a=>{r.value=await this.asyncFn(a,t())},{immediate:!0}),r}}function pf(e){return new Ts(e)}function Pn(){return{ComputeValue:mi,compute:mf,AsyncComputeValue:Ts,asyncCompute:pf,doComputed:d1}}const In={orderDefault:1},{merge:Ur,cloneDeep:xn}=Ze(),pi=[];function gi(e){G.remove(pi,t=>t.name===e.name),pi.push(e),pi.sort((t,r)=>t.order-r.order),Fe.debug("mergeColumnPlugin register success: current:",e,"registered:",pi)}function m1(e){var t,r;if(e.dict){if((t=e.column)!=null&&t.component){const n=xn(e.dict);e.column.component.dict=Ur(n,e.column.component.dict)}if((r=e.form)!=null&&r.component){const n=xn(e.dict);e.form.component.dict=Ur(n,e.form.component.dict)}}return e}function p1(e){if(!e.type)return e;let t=[];typeof e.type=="string"?t=[e.type]:e.type instanceof Array&&(t=e.type);const r={};for(const n of t){const a=Na.getType(n);a&&Ur(r,a)}return e=Ur(r,e),e}const g1={name:"type",handle:p1,order:-2},x1={name:"dict",handle:m1,order:-1},v1={name:"viewFormUseCellComponent",order:10,handle:(e={},t={})=>{var a,i;if(!((a=t.settings)!=null&&a.viewFormUseCellComponent))return e;const n={component:((i=e.column)==null?void 0:i.component)||{}};return e.type==="text"&&(n.render=s=>{const{value:o}=s;return l.createVNode("span",null,[o])}),Ur(e,{viewForm:n}),e}};gi(g1),gi(x1),gi(v1);function $o(e,t){const r={};return G.forEach(e,(n,a)=>{if(n.key=a,n.children)n.children=$o(n.children,t);else for(const i of pi)n=i.handle(n,t);r[a]=n}),r}function Wo(e={},t){return G.forEach(t,(r,n)=>{r.children?Wo(e,r.children):e[n]=r}),e}function Fs(e={},t){return G.forEach(t,(r,n)=>{r.children?Fs(e,r.children):e[n]=r}),e}function w1(e){const t=e,r=t.column||{};return r.title==null&&(r.title=t.title),r.key=t.key,t.children&&(r.children=gf(t.children)),l.reactive(r)}function gf(e){let t={};return G.forEach(e,(r,n)=>{t[n]=w1(r)}),t=xf(t),t}function _1(e){return G.sortBy(e,t=>t.order??In.orderDefault)}function xf(e){const t=[];for(const a in e){const i=e[a];i.key=a,i.children&&G.size(i.children)>0&&(i.children=xf(i.children)),t.push(i)}const r=_1(t),n={};for(const a of r)n[a.key]=a;return n}function vf(e,t){const r={};return G.forEach(e,n=>{const a=xn(n[t])||{};t==="form"&&a.title==null&&(a.title=n.title),a.key=n.key,r[n.key]=a}),r}function xi(e,t,r,n){const a=vf(r,t),i=Ur(xn(e.form),e[t],{columns:a});return n&&n(i),i}function y1(e,t="search",r){var o;const n=vf(r,t),a={},i=((o=e.settings)==null?void 0:o.searchCopyFormProps)??["component","valueChange","title","key","label","render"];function s(c,f,u){if(G.includes(i,u)&&e.columns[f]){const d=e.columns[f][u];d&&(c[u]=d)}}return G.forEach(xn(e.form.columns),(c,f)=>{const u={};s(u,f,"valueResolve"),s(u,f,"valueBuilder"),a[f]=Ur(u,G.pick(c,i))}),Ur({columns:a},{columns:n},e.search)}function k1(e,t){const{t:r}=nr(),{merge:n}=Ze();t=t||{};const a=n(ci.defaultOptions({t:r}),ci.commonOptions({crudOptions:e,context:t,crudExpose:null}),e),i=$o(xn(a.columns),a),s=Wo({},i);return xi(a,"form",s)}function E1(e){G.forEach(e.columns,(n,a)=>{n.key=a});const t=$o(xn(e.columns),e);e.columns=t;const r=Wo({},t);return e.table.columns=gf(xn(t)),e.table.columnsMap=Fs({},e.table.columns),Ur(e.toolbar,{columnsFilter:{originalColumns:xn(e.table.columns)}}),e.form=xi(e,"form",r),e.addForm=xi(e,"addForm",r),e.editForm=xi(e,"editForm",r),e.viewForm=xi(e,"viewForm",r,n=>{G.forEach(n.columns,a=>{a.component||(a.component={}),a.component.disabled=!0})}),e.search=y1(e,"search",r),e.table.editable&&(e.table.editable.addForm=Ur(e.addForm.columns,e.table.editable.addForm),e.table.editable.editForm=Ur(e.editForm.columns,e.table.editable.editForm)),e}function Cs(e,t){G.forEach(e,(r,n)=>{r.key||(r.key=n),r.children?Cs(r.children,t):t(r,n)})}function vi(e,t){G.forEach(e,(r,n)=>{r.key||(r.key=n),r.children?vi(r.children,t):t(r,n)})}function wf(){return{buildFormOptions:k1,buildColumns:E1,registerMergeColumnPlugin:gi,forEachColumns:vi}}let b1=0;const Ho={};async function S1(e){const t=e.id||`${b1++}`,r=document.createElement("div");return new Promise((n,a)=>{let i=Ho[t];i!=null&&(i.vm.exposed.open(e),n(i));const s=l.createVNode(Pa,{id:t,onClosed(){e.id||delete Ho[t]}});s.appContext=Pa._context,l.render(s,r),document.body.appendChild(r);const c=s.component;i={id:t,vNode:s,vm:c,props:s.component.props},Ho[t]=i,i.vm.exposed.open(e),n(i.vm.exposed)})}function _f(){let e=null;try{e=l.inject("use:form:wrapper",()=>{})()}catch(r){Fe.warn("cant inject use:form:wrapper，建议在App.vue中使用<fs-form-provider>组件包裹<router-view/>",r)}let t=null;return e==null?t=async r=>await S1(r):t=async r=>await e.open(r),{openDialog:t}}const{merge:yf}=Ze(),T1=yf;function F1(e){const{crudExpose:t}=e,{crudBinding:r}=t;de.useUi(),nr();const{merge:n}=Ze();l.watch(()=>{var i,s,o;return(o=(s=(i=r.value)==null?void 0:i.table)==null?void 0:s.editable)==null?void 0:o.enabled},i=>{i?r.value.table.editable.mode==="row"?r.value.rowHandle.active="editRow":r.value.rowHandle.active="editable":r.value.rowHandle.active="default"});const a={async enable(i,s){const o=r.value.table.editable;n(o,{enabled:!0},i),s&&s({editable:o})},disable(){var i;(i=t.getTableRef())==null||i.editable.resume(),r.value.table.editable.enabled=!1,r.value.rowHandle.active="default"},active(i){t.getTableRef().editable.active(i)},inactive(){t.getTableRef().editable.inactive()},addRow(i){t.getTableRef().editable.addRow(i)},activeCols(i){t.getTableRef().editable.activeCols(i)},resume(){t.getTableRef().editable.resume()},cancel(){t.getTableRef().editable.cancelAll()},persist(){t.getTableRef().editable.persist()},removeRow(i){t.getTableRef().editable.removeRow(i)},getEditableRow(i){var s,o;return(o=(s=t.getTableRef())==null?void 0:s.editable)==null?void 0:o.getEditableRow(i)},async doSaveRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]);const o=a.getEditableRow(s);await o.save({async doSave(c){var p,g;const{isAdd:f,row:u,setData:h}=c,d=u;if(((g=(p=r.value)==null?void 0:p.mode)==null?void 0:g.name)!=="local")try{if(o.loading=!0,f){const m=await r.value.request.addRequest({form:d});h(m)}else await r.value.request.editRequest({form:d,row:d})}finally{o.loading=!1}}})},async doCancelRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]),a.getEditableRow(s).cancel()},async doRemoveRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]);const o=a.getEditableRow(s),c=o.rowData;await t.doRemove(i,{async handle(){o.isAdd||r.value.mode.name==="local"?a.removeRow(s):await r.value.request.delRequest({row:c})}})},getInstance(){t.getTableRef().editable},eachCells(i){var s;(s=t.getTableRef().editable)==null||s.eachCells(i)},eachRows(i){var s;(s=t.getTableRef().editable)==null||s.eachRows(i)},async validate(){var i;return await((i=t.getTableRef().editable)==null?void 0:i.validate())},getTableData(i){var s;return(s=t.getTableRef().editable)==null?void 0:s.getCleanTableData(i)},getCleanTableData(i){var s;return(s=t.getTableRef().editable)==null?void 0:s.getCleanTableData(i)}};return a}function kf(e){const{crudRef:t,crudBinding:r}=e,{ui:n}=de.useUi(),{t:a}=nr(),i=_f();function s(){t.value==null&&Fe.warn("crudRef还未初始化，请在onMounted之后调用")}function o(){r.value==null&&Fe.warn("crudBinding还未初始化，请在useFs或useCrud之后调用")}const c={crudRef:t,crudBinding:r,getFormWrapperRef(){return t.value.formWrapperRef},getFormRef:()=>{const f=c.getFormWrapperRef();if(f==null||(f==null?void 0:f.formRef)==null){Fe.error("当前无法获取FormRef，请在编辑对话框已打开的状态下调用此方法，如果是在打开对话框时调用，可以尝试先nextTick");return}return f==null?void 0:f.formRef},getFormData:()=>{const f=c.getFormRef();return f==null?void 0:f.getFormData()},setFormData:(f,u)=>{var h;(h=c.getFormRef())==null||h.setFormData(f,u)},getFormComponentRef(f,u=!1){const h=c.getFormRef();return h==null?void 0:h.getComponentRef(f,u)},doValueBuilder(f,u){u==null&&(u=l.toRaw(r.value.columns)),Fe.debug("doValueBuilder ,columns=",u);const h=[];vi(u,d=>{d.valueBuilder!=null&&h.push(d)}),h.length!==0&&(G.forEach(f,(d,p)=>{G.forEach(h,g=>{g.valueBuilder({value:d[g.key],row:d,index:p,key:g.key,column:g})}),d.children&&G.isArray(d.children)&&c.doValueBuilder(d.children,u)}),Fe.debug("valueBuilder success:",f))},doValueResolve({form:f},u){u==null&&(u=l.toRaw(r.value.columns));const h=[];vi(u,d=>{d.valueResolve!=null&&h.push(d)}),h.length!==0&&(Fe.debug("doValueResolve ,columns=",u),G.forEach(h,d=>{const p=d.key;d.valueResolve({value:f[p],row:f,form:f,key:p,column:d})}),Fe.debug("valueResolve success:",f))},doSearchValidate(){c.getSearchRef().doValidate()},getSearchFormData(){return r.value.search.validatedForm},getSearchValidatedFormData(){return r.value.search.validatedForm},setSearchFormData(f){if(f.mergeForm===!1)for(const h in r.value.search.validatedForm)delete r.value.search.validatedForm[h];const{merge:u}=Ze();u(r.value.search.validatedForm,f.form),f.triggerSearch&&c.doRefresh()},getSearchRef(){var f;return s(),(f=t.value)==null?void 0:f.getSearchRef()},buildPageQuery(f){var m,x;const u=f.page;let h=f.form;h==null&&(h=G.cloneDeep(c.getSearchValidatedFormData()),(x=(m=r.value)==null?void 0:m.search)!=null&&x.columns&&c.doValueResolve({form:h},l.toRaw(r.value.search.columns)));let d=f.sort;d==null&&(d=r.value.table.sort||{});const p={page:u,form:h,sort:d};let g=p;return r.value.request.transformQuery&&(g=r.value.request.transformQuery(p)),g},async search(f,u={}){const h=c.buildPageQuery(f);let d;try{u.silence!==!0&&(r.value.table.loading=!0),Fe.debug("pageRequest",h),d=await r.value.request.pageRequest(h)}finally{u.silence!==!0&&(r.value.table.loading=!1)}if(d==null){Fe.warn("pageRequest返回结果不能为空");return}let p=d;return r.value.request.transformRes&&(p=r.value.request.transformRes({res:d,query:h})),p.records&&c.doValueBuilder(p.records),p},getPage(){let f={currentPage:1,pageSize:10};return r.value.pagination&&(f={currentPage:r.value.pagination[n.pagination.currentPage],pageSize:r.value.pagination.pageSize}),f},async doRefresh(f){var x,v;if(r.value.request.pageRequest==null)return;Fe.debug("do refresh:",f),r.value.pagination&&f!=null&&f.goFirstPage&&(r.value.pagination[n.pagination.currentPage]=1);const u=c.getPage(),h=await c.search({page:u},{silence:f==null?void 0:f.silence});if(h==null){Fe.error("pageRequest返回结构不正确，请配置正确的request.transformRes，期望：{currentPage>0, pageSize>0, total, records:[]},实际返回：",h);return}const{currentPage:d=u.currentPage||1,pageSize:p=u.pageSize,total:g}=h,{records:m}=h;if(m==null||!(m instanceof Array)||g==null||d==null||d<=0||isNaN(d)||p==null||p<=0||isNaN(p)){Fe.error("pageRequest返回结构不正确，请配置正确的request.transformRes，期望：{currentPage>0, pageSize>0, total, records:[]},实际返回：",h),Fe.info("如果你的不需要分页，也需要按照上面的格式返回，可以让pageSize=99999，然后配置crudOptions.pagination.show=false来隐藏分页组件");return}r.value.data=m,r.value.pagination&&(r.value.pagination[n.pagination.currentPage]=d,r.value.pagination.pageSize=p,r.value.pagination[n.pagination.total]=g||m.length),(v=(x=r.value)==null?void 0:x.table)!=null&&v.onRefreshed&&r.value.table.onRefreshed({data:m})},getToolbarRef:()=>t.value.toolbarRef,getColumnsFilterRef:()=>c.getToolbarRef().columnsFilterRef,getColumnsFilterOriginalColumnsRef:()=>c.getColumnsFilterRef().original,getColumnsFilterColumnsRef:()=>c.getColumnsFilterRef().columns,doPageTurn(f){r.value.pagination[n.pagination.currentPage]=f},async doSearch(f){Fe.debug("do search:",f),f=yf({goFirstPage:!0},f),f.goFirstPage&&c.doPageTurn(1),f.form&&t.value&&(t.value.setSearchFormData(f),c.setSearchFormData({form:f.form,mergeForm:f.mergeForm,refWarning:!1})),await c.doRefresh()},getTableRef(){var f;return s(),(f=t.value)==null?void 0:f.tableRef},getBaseTableRef(){const f=this.getTableRef();if(f==null){Fe.warn("fs-table还未挂载");return}return f.tableRef},getTableData(){return o(),r.value.data},setTableData(f){o(),r.value.data=f},insertTableRow(f,u){o(),r.value.data.splice(f,0,u)},updateTableRow(f,u,h=!0){h?r.value.data[f]=T1(r.value.data[f],u):r.value.data[f]=u},removeTableRow(f){o(),r.value.data.splice(f,1)},removeTableRowByRowKey:(f,u)=>{o(),u==null&&(u=r.value.data);for(let h=0;h<u.length;h++){const d=u[h];if(d[r.value.table.rowKey]===f)return u.splice(h,1),!0;if(d.children&&G.isArray(d.children)&&c.removeTableRowByRowKey(f,d.children))return!0}},getTableDataRow(f){const u=c.getTableData();if(u==null)throw new Error("table data is not init");if(u.length<=f)throw new Error("index over array length");return u[f]},doSelectCurrentRow({row:f}){c.getTableRef().value.setCurrentRow(f)},async doRemove(f,u){var g;const h=r.value.table.remove??u??{};try{h.confirmFn?await h.confirmFn(f):await n.messageBox.confirm({title:h.confirmTitle||a("fs.rowHandle.remove.confirmTitle"),message:h.confirmMessage||a("fs.rowHandle.remove.confirmMessage"),type:"warn"})}catch{h.onCanceled&&await h.onCanceled(f);return}let d=null;const p=((g=r.value.mode)==null?void 0:g.name)==="local";u!=null&&u.handle?await u.handle(f):p?c.removeTableRow(f==null?void 0:f.index):d=await r.value.request.delRequest(f),h.showSuccessNotification!==!1&&n.notification.success(a("fs.rowHandle.remove.success")),p||h.refreshTable!==!1&&await c.doRefresh(),h.onRemoved&&await h.onRemoved({...f,res:d})},async openDialog(f){if(f.newInstance===!0&&i)return await i.openDialog(f);const u=this.getFormWrapperRef();return u.open(f),u},async _openDialog(f,u,h){var x,v;const{merge:d}=Ze();let p=u.row||u[n.tableColumn.row];delete u.row,p==null&&u.index!=null&&(p=c.getTableDataRow(u.index)),(v=(x=r.value)==null?void 0:x.request)!=null&&v.infoRequest&&(p=await r.value.request.infoRequest({mode:f,row:p}));const g={mode:f},m=l.toRaw(r.value[f+"Form"]);return d(g,m,{initialForm:p},u,h),await this.openDialog(g)},async openAdd(f,u={}){return this._openDialog("add",f,u)},async openEdit(f,u={}){return this._openDialog("edit",f,u)},async openView(f,u={}){return this._openDialog("view",f,u)},editable:void 0};return c.editable=F1({crudExpose:c}),{expose:c,crudExpose:c}}async function Ef(){const e=await Object.assign({"./lib/index.ts":()=>Promise.resolve().then(()=>Vm)});let t=null;return G.each(e,n=>{t=n}),(await t()).exportUtil}async function bf(){const e=await Object.assign({"./lib/index.ts":()=>Promise.resolve().then(()=>Vm)});let t=null;return G.each(e,n=>{t=n}),(await t()).importUtil}function C1({originalRow:e,row:t,key:r,col:n}){var s;const a=e[r],i=(s=n.component)==null?void 0:s.dict;if(i&&a!=null){const o=i.getNodesFromDataMap(a);if(o!=null&&o.length>0){const c=G.map(o,f=>i.getLabel(f)||i.getValue(f)).join("|");c!=null&&c!==""&&(t[r]=c)}}return t}async function Sf(e,t={}){if(t.server){const f=e.getPage(),u=e.buildPageQuery({page:f});await t.server(u);return}const r=e.crudBinding;let n=t.columns;n==null&&(n=[],G.each(r.value.table.columnsMap,f=>{if(!(t.columnFilter&&t.columnFilter(f)===!1)&&!(t.onlyShow&&l.unref(f.show)===!1)&&f.exportable!==!1&&f.key!=="_index"){const u={key:f.key,title:f.title};n.push(u)}}));for(const f of n){const u=r.value.table.columnsMap[f.key];f.columnProps=u||{},t.columnBuilder&&t.columnBuilder({col:f})}const{merge:a}=Ze(),i=await Ef(),s=[];let o=r.value.data;if(t.dataFrom==="search"){const f=a({page:{currentPage:1,pageSize:99999999}},r.value.toolbar.export.searchParams);o=(await e.search(f,{silence:!0})).records}for(const f of o){const u=G.cloneDeep(f);G.each(n,h=>{const d=h.columnProps,p={row:u,originalRow:f,key:h.key,col:d,exportCol:h};t.autoUseDictLabel!==!1&&C1(p),t.dataFormatter&&t.dataFormatter(p)}),s.push(u)}const c=G.merge({columns:n,data:s,filename:"table",noHeader:!1,separator:",",quoted:!1},{...t});t.fileType==="excel"?await i.excel(c):await i.csv(c)}async function A1(e,t){const n=await(await bf()).csv(t.file),a=e.crudBinding;t.append===!1&&(a.value.data.length=0);const i=a.value.table.editable.enabled;for(const s of n.data)i?e.editable.addRow({row:s,active:!1}):a.value.data.push(s)}const jo={};function Tf(e,t){jo[e]=t}function Ff(e){return jo[e]}Tf("rowSelection",(e,t)=>{const n=t.crudExpose.crudBinding;function a(){return n.value.table.rowKey||"id"}const{ui:i}=de.useUi();if(!e){Fe.warn("请配置settings.plugins.rowSelection.props参数");return}return i.table.buildSelectionCrudOptions({crossPage:e.crossPage,getRowKey:a,getPageData(){return n.value.data},multiple:e.multiple,selectedRowKeys:e.selectedRowKeys,onSelectedKeysChanged:async s=>{e.selectedRowKeys.value=[...s],await l.nextTick(),e.onSelectedChanged&&e.onSelectedChanged(e.selectedRowKeys.value)}})});const{merge:Ln}=Ze();function Cf(e){e.context==null&&(e.context={});const t=de.uiContext.get(),{t:r}=nr();let n=e.crudOptions;const a=e.expose||e.crudExpose;if(!a)throw new Error("crudExpose不能为空，请给useCrud传入{crudExpose}参数");const i=a,{crudBinding:s}=i,{doRefresh:o,doValueResolve:c}=i;function f(){return{pagination:{...t.pagination.onChange({setCurrentPage(O){s.value.pagination[t.pagination.currentPage]=O},setPageSize(O){s.value.pagination.pageSize=O,s.value.pagination[t.pagination.currentPage]=1},async doAfterChange(){return await o()}})}}}function u(){return{form:{async doSubmit(y){var O,B;if(y.mode==="edit")if(c(y),((O=n.mode)==null?void 0:O.name)==="local")i.updateTableRow(y.index,y.form,n.mode.isMergeWhenUpdate);else return await s.value.request.editRequest(y);else if(y.mode==="add")if(c(y),((B=n.mode)==null?void 0:B.name)==="local"){const H=n.mode.isAppendWhenAdd?i.getTableData().length:0;i.insertTableRow(H,y.form)}else return await s.value.request.addRequest(y)},async onSuccess(){o()}}}}function h(){return{rowHandle:{buttons:{remove:{click:async y=>{y.row=y[t.tableColumn.row],await i.doRemove(y)}},edit:{click:async y=>{y.row=y[t.tableColumn.row],await i.openEdit({row:y.row,index:y.index})}},view:{click:async y=>{y.row=y[t.tableColumn.row],await i.openView({row:y.row,index:y.index})}}}}}}function d(){return{search:{buttons:{search:{loading:l.computed(()=>{var y,O;return(O=(y=s.value)==null?void 0:y.table)==null?void 0:O.loading})}},on_reset(){s.value.table.sort={},Cs(s.value.table.columns,O=>{O.sortOrder=!1});const y=a.getBaseTableRef();y!=null&&y.clearSort&&y.clearSort()},onSearch(){a.doRefresh({goFirstPage:!0})},"onUpdate:form":y=>{s.value.search.form=y},"onUpdate:validatedForm":y=>{s.value.search.validatedForm=y},"onUpdate:collapse":y=>{s.value.search.collapse=y},container:{collapse:!0,"onUpdate:collapse":y=>{s.value.search.container.collapse=y}}}}}function p(){return{tabs:{},onTabChange(y){a.setSearchFormData({form:y}),o()}}}function g(){const y=l.ref(!1);return{toolbar:{buttons:{refresh:{type:"primary",icon:t.icons.refresh,title:r("fs.toolbar.refresh.title"),order:1,circle:!0,click:async()=>{await a.doRefresh()}},search:{type:l.computed(()=>s.value.search.show!==!1?"primary":"default"),icon:t.icons.search,title:r("fs.toolbar.search.title"),order:2,circle:!0,click:()=>{s.value.search.show=!s.value.search.show}},compact:{type:l.computed(()=>s.value.toolbar.compact?"primary":"default"),icon:t.icons.compact,title:r("fs.toolbar.compact.title"),order:3,circle:!0,click:()=>{s.value.toolbar.compact=!s.value.toolbar.compact}},export:{show:!0,type:"primary",icon:t.icons.export,order:4,loading:y,title:r("fs.toolbar.export.title"),circle:!0,click:async()=>{y.value=!0;try{await Sf(a,s.value.toolbar.export)}finally{y.value=!1}}},columns:{type:"primary",icon:t.icons.columnsFilter,title:r("fs.toolbar.columns.title"),circle:!0,order:5}},"onUpdate:columns"(O){const B=s.value.table.columns,H={};G.forEach(O,j=>{for(const I in B){const X=B[I];if(X.key===j.key){delete X.order,Ln(X,j),H[I]=X;return}}}),s.value.table.columns=H,s.value.table.columnsMap=Fs({},H)}}}}function m(){return{table:{onSortChange(y){const{isServerSort:O,prop:B,asc:H,order:j}=y;Cs(s.value.table.columns,X=>{X.key===B?X.sortOrder=j:X.sortOrder=!1});const I=s.value.table.sort;s.value.table.sort=O?{prop:B,order:j,asc:H}:null,(O||I!=null)&&i.doRefresh()}}}}function x(){return{actionbar:{buttons:{add:{click(){i.openAdd({})}}}}}}function v(){const{compute:y}=Pn();return{actionbar:{buttons:{addRow:{show:!1,text:r("fs.actionbar.add"),type:"primary",click:()=>{i.editable.addRow()}}}},rowHandle:{group:{editable:{remove:{text:"删除",...t.button.colors("danger"),click:async O=>{const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey];await i.editable.doRemoveRow({editableId:j,row:H})}}},editRow:{edit:{text:"编辑",loading:y(O=>{const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey],I=i.editable.getEditableRow(j);return!!(I!=null&&I.loading)}),click:O=>{var I;const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey];(I=i.editable.getEditableRow(j))==null||I.active()},show:y(O=>{var I,X;const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey];return!((X=(I=i.editable)==null?void 0:I.getEditableRow(j))!=null&&X.isEditing)})},save:{text:"保存",loading:!1,click:async O=>{const{index:B,row:H}=O;await i.editable.doSaveRow({row:H})},show:y(O=>{var I,X;const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey];return!!((X=(I=i.editable)==null?void 0:I.getEditableRow(j))!=null&&X.isEditing)})},cancel:{text:"取消",click:async O=>{var j;const{index:B,row:H}=O;await((j=i.editable)==null?void 0:j.doCancelRow({row:H}))},show:y(O=>{var I,X;const{index:B,row:H}=O,j=H[s.value.table.editable.rowKey];return!!((X=(I=i.editable)==null?void 0:I.getEditableRow(j))!=null&&X.isEditing)})},remove:{text:"删除",...t.button.colors("danger"),click:async O=>{var j;const{index:B,row:H}=O;await((j=i.editable)==null?void 0:j.doRemoveRow({row:H}))}}}}}}}function k(y){y.search.validatedForm=G.cloneDeep(y.search.initialForm)}function w(y){y=Ln(ci.commonOptions(e),y);const O=l.unref(y.settings);if(O){const I=l.unref(O.plugins);G.forEach(I,(X,q)=>{if(X.enabled===!1)return;let te=X.handle;if(te==null&&(te=Ff(q)),te==null)return;const ae=X.before,oe=te(X.props,e);ae!==!1?y=Ln(oe,y):Ln(y,oe)})}const B=Ln(ci.defaultOptions({t:r}),f(),u(),h(),d(),p(),g(),m(),x(),v(),y),{buildColumns:H}=wf(),j=H(B);return k(j),j}function S(y){s.value=w(y),Fe.info("fast-crud inited, crudBinding=",s.value)}function b(y){const O=Ln({},n,y);return S(O),n=O,O}S(n);function T(y){Ln(s.value,y)}return{appendCrudOptions:b,resetCrudOptions:S,appendCrudBinding:T}}function Af(e){const{createCrudOptions:t,crudExposeRef:r}=e,n=e.crudRef||l.ref(),a=e.crudBinding||l.ref({}),{crudExpose:i}=kf({crudRef:n,crudBinding:a});r&&!r.value&&(r.value=i),e.context==null&&(e.context={});const s=e.context;e.onExpose&&e.onExpose({crudRef:n,crudBinding:a,crudExpose:i,context:s});const o=t({...e,crudExpose:i,expose:i,context:s});function c(f){const u={crudExpose:i,...f,context:s};Ln(f.crudOptions,e.crudOptionsOverride);const h=Cf(u);return{...f,...h,crudRef:n,crudExpose:i,crudBinding:a,context:s}}return o instanceof Promise?o.then(f=>c(f)):c(o)}function Df(e){return Af(e)}function D1(e){return Af(e)}function vn(e,t,r="modelValue"){const n=de.uiContext.get();let a=e.dict;a&&a.prototype&&(a.clear(),a=l.shallowReactive(G.cloneDeep(e.dict)),a.clear());function i(){return l.computed(()=>{let T=[];if(e.options?T=e.options:a&&a.data!=null&&(a.data instanceof Array||ui.logger.warn("dict.data类型错误，期望为数组，实际："+a.data),T=a.data,e.transformDictData&&(T=e.transformDictData(G.cloneDeep(a.data)))),n.type==="naive"){const y=[];for(const O of T)y.push({...O,value:k(O),label:S(O)});return y}return T})}function s(){return a}const o=l.inject("get:scope",function(){});function c(){const T=e[r]||t.attrs[r];return{...o(),componentRef:f,value:T}}const{proxy:f}=l.getCurrentInstance(),u=async(T=!1)=>{if(!a)return;if(a.getNodesByValues){const O=c();if(O.value==null)return;let B=O.value;Array.isArray(O.value)||(B=[O.value]),await a.appendByValues(B);return}if(a.loading)return;const y=c();if(T){await a.reloadDict(y);return}await a.loadDict(y)};u();const h=async()=>{await u(!0)},d=()=>{a&&a.clear()},p=()=>{a!=null&&(!a.prototype&&!a.cloneable||l.watch(()=>e[r],()=>{h()}))};(()=>{l.watch(()=>a==null?void 0:a.data,()=>{const T=c();t.attrs.onDictChange,t.emit("dict-change",{dict:a,...T})},{immediate:!0})})();const m=()=>{var T;return(T=s())==null?void 0:T.data},x=(T,y)=>{let O=y;return s()&&(O=s()[y]),T[O]},v=(T,y)=>{let O=y;s()&&(O=s()[y]),delete T[O]},k=T=>x(T,"value"),w=T=>x(T,"children"),S=T=>{if(e.labelFormatter)return e.labelFormatter(T);const y=x(T,"label");return y==null?"":String(y)};return{createComputedOptions:i,loadDict:u,reloadDict:h,clearDict:d,getDictData:m,getDict:s,watchValue:p,getValue:k,getLabel:S,getChildren:w,getColor:T=>x(T,"color"),removePropValue:v,curDict:a}}const wi=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,Rf=new Set,zo=typeof process=="object"&&process?process:{},Of=(e,t,r,n)=>{typeof zo.emitWarning=="function"?zo.emitWarning(e,t,r,n):console.error(`[${r}] ${t}: ${e}`)};let As=globalThis.AbortController,Bf=globalThis.AbortSignal;if(typeof As>"u"){Bf=class{constructor(){ke(this,"onabort");ke(this,"_onabort",[]);ke(this,"reason");ke(this,"aborted",!1)}addEventListener(n,a){this._onabort.push(a)}},As=class{constructor(){ke(this,"signal",new Bf);t()}abort(n){var a,i;if(!this.signal.aborted){this.signal.reason=n,this.signal.aborted=!0;for(const s of this.signal._onabort)s(n);(i=(a=this.signal).onabort)==null||i.call(a,n)}}};let e=((Um=zo.env)==null?void 0:Um.LRU_CACHE_IGNORE_AC_WARNING)!=="1";const t=()=>{e&&(e=!1,Of("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}const R1=e=>!Rf.has(e),Mn=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),Nf=e=>Mn(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?Ds:null:null;class Ds extends Array{constructor(t){super(t),this.fill(0)}}const Ca=class Ca{constructor(t,r){ke(this,"heap");ke(this,"length");if(!U(Ca,ai))throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new r(t),this.length=0}static create(t){const r=Nf(t);if(!r)return[];Te(Ca,ai,!0);const n=new Ca(t,r);return Te(Ca,ai,!1),n}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}};ai=new WeakMap,$e(Ca,ai,!1);let Go=Ca;const Uc=class Uc{constructor(t){$e(this,ms);$e(this,Do);$e(this,hn);$e(this,dn);$e(this,xs);$e(this,oi);$e(this,li);$e(this,at);$e(this,vs);$e(this,Ra);$e(this,Xr,void 0);$e(this,Sr,void 0);$e(this,fn,void 0);$e(this,Kr,void 0);$e(this,ii,void 0);ke(this,"ttl");ke(this,"ttlResolution");ke(this,"ttlAutopurge");ke(this,"updateAgeOnGet");ke(this,"updateAgeOnHas");ke(this,"allowStale");ke(this,"noDisposeOnSet");ke(this,"noUpdateTTL");ke(this,"maxEntrySize");ke(this,"sizeCalculation");ke(this,"noDeleteOnFetchRejection");ke(this,"noDeleteOnStaleGet");ke(this,"allowStaleOnFetchAbort");ke(this,"allowStaleOnFetchRejection");ke(this,"ignoreFetchAbort");$e(this,Nt,void 0);$e(this,Yr,void 0);$e(this,Pt,void 0);$e(this,lt,void 0);$e(this,Ne,void 0);$e(this,lr,void 0);$e(this,Tr,void 0);$e(this,tr,void 0);$e(this,Ut,void 0);$e(this,qr,void 0);$e(this,zt,void 0);$e(this,An,void 0);$e(this,Dn,void 0);$e(this,Jr,void 0);$e(this,un,void 0);$e(this,ta,void 0);$e(this,mr,void 0);$e(this,Aa,()=>{});$e(this,Rn,()=>{});$e(this,ps,()=>{});$e(this,Fr,()=>!1);$e(this,Da,t=>{});$e(this,si,(t,r,n)=>{});$e(this,gs,(t,r,n,a)=>{if(n||a)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0});const{max:r=0,ttl:n,ttlResolution:a=1,ttlAutopurge:i,updateAgeOnGet:s,updateAgeOnHas:o,allowStale:c,dispose:f,disposeAfter:u,noDisposeOnSet:h,noUpdateTTL:d,maxSize:p=0,maxEntrySize:g=0,sizeCalculation:m,fetchMethod:x,noDeleteOnFetchRejection:v,noDeleteOnStaleGet:k,allowStaleOnFetchRejection:w,allowStaleOnFetchAbort:S,ignoreFetchAbort:b}=t;if(r!==0&&!Mn(r))throw new TypeError("max option must be a nonnegative integer");const T=r?Nf(r):Array;if(!T)throw new Error("invalid max value: "+r);if(Te(this,Xr,r),Te(this,Sr,p),this.maxEntrySize=g||U(this,Sr),this.sizeCalculation=m,this.sizeCalculation){if(!U(this,Sr)&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(x!==void 0&&typeof x!="function")throw new TypeError("fetchMethod must be a function if specified");if(Te(this,ii,x),Te(this,ta,!!x),Te(this,Pt,new Map),Te(this,lt,new Array(r).fill(void 0)),Te(this,Ne,new Array(r).fill(void 0)),Te(this,lr,new T(r)),Te(this,Tr,new T(r)),Te(this,tr,0),Te(this,Ut,0),Te(this,qr,Go.create(r)),Te(this,Nt,0),Te(this,Yr,0),typeof f=="function"&&Te(this,fn,f),typeof u=="function"?(Te(this,Kr,u),Te(this,zt,[])):(Te(this,Kr,void 0),Te(this,zt,void 0)),Te(this,un,!!U(this,fn)),Te(this,mr,!!U(this,Kr)),this.noDisposeOnSet=!!h,this.noUpdateTTL=!!d,this.noDeleteOnFetchRejection=!!v,this.allowStaleOnFetchRejection=!!w,this.allowStaleOnFetchAbort=!!S,this.ignoreFetchAbort=!!b,this.maxEntrySize!==0){if(U(this,Sr)!==0&&!Mn(U(this,Sr)))throw new TypeError("maxSize must be a positive integer if specified");if(!Mn(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");be(this,Do,zm).call(this)}if(this.allowStale=!!c,this.noDeleteOnStaleGet=!!k,this.updateAgeOnGet=!!s,this.updateAgeOnHas=!!o,this.ttlResolution=Mn(a)||a===0?a:1,this.ttlAutopurge=!!i,this.ttl=n||0,this.ttl){if(!Mn(this.ttl))throw new TypeError("ttl must be a positive integer if specified");be(this,ms,jc).call(this)}if(U(this,Xr)===0&&this.ttl===0&&U(this,Sr)===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!U(this,Xr)&&!U(this,Sr)){const y="LRU_CACHE_UNBOUNDED";R1(y)&&(Rf.add(y),Of("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",y,Uc))}}static unsafeExposeInternals(t){return{starts:U(t,Dn),ttls:U(t,Jr),sizes:U(t,An),keyMap:U(t,Pt),keyList:U(t,lt),valList:U(t,Ne),next:U(t,lr),prev:U(t,Tr),get head(){return U(t,tr)},get tail(){return U(t,Ut)},free:U(t,qr),isBackgroundFetch:r=>{var n;return be(n=t,at,ft).call(n,r)},backgroundFetch:(r,n,a,i)=>{var s;return be(s=t,li,No).call(s,r,n,a,i)},moveToTail:r=>{var n;return be(n=t,Ra,bs).call(n,r)},indexes:r=>{var n;return be(n=t,hn,aa).call(n,r)},rindexes:r=>{var n;return be(n=t,dn,ia).call(n,r)},isStale:r=>{var n;return U(n=t,Fr).call(n,r)}}}get max(){return U(this,Xr)}get maxSize(){return U(this,Sr)}get calculatedSize(){return U(this,Yr)}get size(){return U(this,Nt)}get fetchMethod(){return U(this,ii)}get dispose(){return U(this,fn)}get disposeAfter(){return U(this,Kr)}getRemainingTTL(t){return U(this,Pt).has(t)?1/0:0}*entries(){for(const t of be(this,hn,aa).call(this))U(this,Ne)[t]!==void 0&&U(this,lt)[t]!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield[U(this,lt)[t],U(this,Ne)[t]])}*rentries(){for(const t of be(this,dn,ia).call(this))U(this,Ne)[t]!==void 0&&U(this,lt)[t]!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield[U(this,lt)[t],U(this,Ne)[t]])}*keys(){for(const t of be(this,hn,aa).call(this)){const r=U(this,lt)[t];r!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield r)}}*rkeys(){for(const t of be(this,dn,ia).call(this)){const r=U(this,lt)[t];r!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield r)}}*values(){for(const t of be(this,hn,aa).call(this))U(this,Ne)[t]!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield U(this,Ne)[t])}*rvalues(){for(const t of be(this,dn,ia).call(this))U(this,Ne)[t]!==void 0&&!be(this,at,ft).call(this,U(this,Ne)[t])&&(yield U(this,Ne)[t])}[Symbol.iterator](){return this.entries()}find(t,r={}){for(const n of be(this,hn,aa).call(this)){const a=U(this,Ne)[n],i=be(this,at,ft).call(this,a)?a.__staleWhileFetching:a;if(i!==void 0&&t(i,U(this,lt)[n],this))return this.get(U(this,lt)[n],r)}}forEach(t,r=this){for(const n of be(this,hn,aa).call(this)){const a=U(this,Ne)[n],i=be(this,at,ft).call(this,a)?a.__staleWhileFetching:a;i!==void 0&&t.call(r,i,U(this,lt)[n],this)}}rforEach(t,r=this){for(const n of be(this,dn,ia).call(this)){const a=U(this,Ne)[n],i=be(this,at,ft).call(this,a)?a.__staleWhileFetching:a;i!==void 0&&t.call(r,i,U(this,lt)[n],this)}}purgeStale(){let t=!1;for(const r of be(this,dn,ia).call(this,{allowStale:!0}))U(this,Fr).call(this,r)&&(this.delete(U(this,lt)[r]),t=!0);return t}dump(){const t=[];for(const r of be(this,hn,aa).call(this,{allowStale:!0})){const n=U(this,lt)[r],a=U(this,Ne)[r],i=be(this,at,ft).call(this,a)?a.__staleWhileFetching:a;if(i===void 0||n===void 0)continue;const s={value:i};if(U(this,Jr)&&U(this,Dn)){s.ttl=U(this,Jr)[r];const o=wi.now()-U(this,Dn)[r];s.start=Math.floor(Date.now()-o)}U(this,An)&&(s.size=U(this,An)[r]),t.unshift([n,s])}return t}load(t){this.clear();for(const[r,n]of t){if(n.start){const a=Date.now()-n.start;n.start=wi.now()-a}this.set(r,n.value,n)}}set(t,r,n={}){var d,p,g;if(r===void 0)return this.delete(t),this;const{ttl:a=this.ttl,start:i,noDisposeOnSet:s=this.noDisposeOnSet,sizeCalculation:o=this.sizeCalculation,status:c}=n;let{noUpdateTTL:f=this.noUpdateTTL}=n;const u=U(this,gs).call(this,t,r,n.size||0,o);if(this.maxEntrySize&&u>this.maxEntrySize)return c&&(c.set="miss",c.maxEntrySizeExceeded=!0),this.delete(t),this;let h=U(this,Nt)===0?void 0:U(this,Pt).get(t);if(h===void 0)h=U(this,Nt)===0?U(this,Ut):U(this,qr).length!==0?U(this,qr).pop():U(this,Nt)===U(this,Xr)?be(this,oi,Bo).call(this,!1):U(this,Nt),U(this,lt)[h]=t,U(this,Ne)[h]=r,U(this,Pt).set(t,h),U(this,lr)[U(this,Ut)]=h,U(this,Tr)[h]=U(this,Ut),Te(this,Ut,h),Oo(this,Nt)._++,U(this,si).call(this,h,u,c),c&&(c.set="add"),f=!1;else{be(this,Ra,bs).call(this,h);const m=U(this,Ne)[h];if(r!==m){if(U(this,ta)&&be(this,at,ft).call(this,m)?m.__abortController.abort(new Error("replaced")):s||(U(this,un)&&((d=U(this,fn))==null||d.call(this,m,t,"set")),U(this,mr)&&((p=U(this,zt))==null||p.push([m,t,"set"]))),U(this,Da).call(this,h),U(this,si).call(this,h,u,c),U(this,Ne)[h]=r,c){c.set="replace";const x=m&&be(this,at,ft).call(this,m)?m.__staleWhileFetching:m;x!==void 0&&(c.oldValue=x)}}else c&&(c.set="update")}if(a!==0&&!U(this,Jr)&&be(this,ms,jc).call(this),U(this,Jr)&&(f||U(this,ps).call(this,h,a,i),c&&U(this,Rn).call(this,c,h)),!s&&U(this,mr)&&U(this,zt)){const m=U(this,zt);let x;for(;x=m==null?void 0:m.shift();)(g=U(this,Kr))==null||g.call(this,...x)}return this}pop(){var t;try{for(;U(this,Nt);){const r=U(this,Ne)[U(this,tr)];if(be(this,oi,Bo).call(this,!0),be(this,at,ft).call(this,r)){if(r.__staleWhileFetching)return r.__staleWhileFetching}else if(r!==void 0)return r}}finally{if(U(this,mr)&&U(this,zt)){const r=U(this,zt);let n;for(;n=r==null?void 0:r.shift();)(t=U(this,Kr))==null||t.call(this,...n)}}}has(t,r={}){const{updateAgeOnHas:n=this.updateAgeOnHas,status:a}=r,i=U(this,Pt).get(t);if(i!==void 0){const s=U(this,Ne)[i];if(be(this,at,ft).call(this,s)&&s.__staleWhileFetching===void 0)return!1;if(U(this,Fr).call(this,i))a&&(a.has="stale",U(this,Rn).call(this,a,i));else return n&&U(this,Aa).call(this,i),a&&(a.has="hit",U(this,Rn).call(this,a,i)),!0}else a&&(a.has="miss");return!1}peek(t,r={}){const{allowStale:n=this.allowStale}=r,a=U(this,Pt).get(t);if(a!==void 0&&(n||!U(this,Fr).call(this,a))){const i=U(this,Ne)[a];return be(this,at,ft).call(this,i)?i.__staleWhileFetching:i}}async fetch(t,r={}){const{allowStale:n=this.allowStale,updateAgeOnGet:a=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,ttl:s=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:c=0,sizeCalculation:f=this.sizeCalculation,noUpdateTTL:u=this.noUpdateTTL,noDeleteOnFetchRejection:h=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:d=this.allowStaleOnFetchRejection,ignoreFetchAbort:p=this.ignoreFetchAbort,allowStaleOnFetchAbort:g=this.allowStaleOnFetchAbort,context:m,forceRefresh:x=!1,status:v,signal:k}=r;if(!U(this,ta))return v&&(v.fetch="get"),this.get(t,{allowStale:n,updateAgeOnGet:a,noDeleteOnStaleGet:i,status:v});const w={allowStale:n,updateAgeOnGet:a,noDeleteOnStaleGet:i,ttl:s,noDisposeOnSet:o,size:c,sizeCalculation:f,noUpdateTTL:u,noDeleteOnFetchRejection:h,allowStaleOnFetchRejection:d,allowStaleOnFetchAbort:g,ignoreFetchAbort:p,status:v,signal:k};let S=U(this,Pt).get(t);if(S===void 0){v&&(v.fetch="miss");const b=be(this,li,No).call(this,t,S,w,m);return b.__returned=b}else{const b=U(this,Ne)[S];if(be(this,at,ft).call(this,b)){const H=n&&b.__staleWhileFetching!==void 0;return v&&(v.fetch="inflight",H&&(v.returnedStale=!0)),H?b.__staleWhileFetching:b.__returned=b}const T=U(this,Fr).call(this,S);if(!x&&!T)return v&&(v.fetch="hit"),be(this,Ra,bs).call(this,S),a&&U(this,Aa).call(this,S),v&&U(this,Rn).call(this,v,S),b;const y=be(this,li,No).call(this,t,S,w,m),B=y.__staleWhileFetching!==void 0&&n;return v&&(v.fetch=T?"stale":"refresh",B&&T&&(v.returnedStale=!0)),B?y.__staleWhileFetching:y.__returned=y}}get(t,r={}){const{allowStale:n=this.allowStale,updateAgeOnGet:a=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,status:s}=r,o=U(this,Pt).get(t);if(o!==void 0){const c=U(this,Ne)[o],f=be(this,at,ft).call(this,c);return s&&U(this,Rn).call(this,s,o),U(this,Fr).call(this,o)?(s&&(s.get="stale"),f?(s&&n&&c.__staleWhileFetching!==void 0&&(s.returnedStale=!0),n?c.__staleWhileFetching:void 0):(i||this.delete(t),s&&n&&(s.returnedStale=!0),n?c:void 0)):(s&&(s.get="hit"),f?c.__staleWhileFetching:(be(this,Ra,bs).call(this,o),a&&U(this,Aa).call(this,o),c))}else s&&(s.get="miss")}delete(t){var n,a,i,s;let r=!1;if(U(this,Nt)!==0){const o=U(this,Pt).get(t);if(o!==void 0)if(r=!0,U(this,Nt)===1)this.clear();else{U(this,Da).call(this,o);const c=U(this,Ne)[o];be(this,at,ft).call(this,c)?c.__abortController.abort(new Error("deleted")):(U(this,un)||U(this,mr))&&(U(this,un)&&((n=U(this,fn))==null||n.call(this,c,t,"delete")),U(this,mr)&&((a=U(this,zt))==null||a.push([c,t,"delete"]))),U(this,Pt).delete(t),U(this,lt)[o]=void 0,U(this,Ne)[o]=void 0,o===U(this,Ut)?Te(this,Ut,U(this,Tr)[o]):o===U(this,tr)?Te(this,tr,U(this,lr)[o]):(U(this,lr)[U(this,Tr)[o]]=U(this,lr)[o],U(this,Tr)[U(this,lr)[o]]=U(this,Tr)[o]),Oo(this,Nt)._--,U(this,qr).push(o)}}if(U(this,mr)&&((i=U(this,zt))!=null&&i.length)){const o=U(this,zt);let c;for(;c=o==null?void 0:o.shift();)(s=U(this,Kr))==null||s.call(this,...c)}return r}clear(){var t,r,n;for(const a of be(this,dn,ia).call(this,{allowStale:!0})){const i=U(this,Ne)[a];if(be(this,at,ft).call(this,i))i.__abortController.abort(new Error("deleted"));else{const s=U(this,lt)[a];U(this,un)&&((t=U(this,fn))==null||t.call(this,i,s,"delete")),U(this,mr)&&((r=U(this,zt))==null||r.push([i,s,"delete"]))}}if(U(this,Pt).clear(),U(this,Ne).fill(void 0),U(this,lt).fill(void 0),U(this,Jr)&&U(this,Dn)&&(U(this,Jr).fill(0),U(this,Dn).fill(0)),U(this,An)&&U(this,An).fill(0),Te(this,tr,0),Te(this,Ut,0),U(this,qr).length=0,Te(this,Yr,0),Te(this,Nt,0),U(this,mr)&&U(this,zt)){const a=U(this,zt);let i;for(;i=a==null?void 0:a.shift();)(n=U(this,Kr))==null||n.call(this,...i)}}};Xr=new WeakMap,Sr=new WeakMap,fn=new WeakMap,Kr=new WeakMap,ii=new WeakMap,Nt=new WeakMap,Yr=new WeakMap,Pt=new WeakMap,lt=new WeakMap,Ne=new WeakMap,lr=new WeakMap,Tr=new WeakMap,tr=new WeakMap,Ut=new WeakMap,qr=new WeakMap,zt=new WeakMap,An=new WeakMap,Dn=new WeakMap,Jr=new WeakMap,un=new WeakMap,ta=new WeakMap,mr=new WeakMap,ms=new WeakSet,jc=function(){const t=new Ds(U(this,Xr)),r=new Ds(U(this,Xr));Te(this,Jr,t),Te(this,Dn,r),Te(this,ps,(i,s,o=wi.now())=>{if(r[i]=s!==0?o:0,t[i]=s,s!==0&&this.ttlAutopurge){const c=setTimeout(()=>{U(this,Fr).call(this,i)&&this.delete(U(this,lt)[i])},s+1);c.unref&&c.unref()}}),Te(this,Aa,i=>{r[i]=t[i]!==0?wi.now():0}),Te(this,Rn,(i,s)=>{if(t[s]){const o=t[s],c=r[s];i.ttl=o,i.start=c,i.now=n||a();const f=i.now-c;i.remainingTTL=o-f}});let n=0;const a=()=>{const i=wi.now();if(this.ttlResolution>0){n=i;const s=setTimeout(()=>n=0,this.ttlResolution);s.unref&&s.unref()}return i};this.getRemainingTTL=i=>{const s=U(this,Pt).get(i);if(s===void 0)return 0;const o=t[s],c=r[s];if(o===0||c===0)return 1/0;const f=(n||a())-c;return o-f},Te(this,Fr,i=>t[i]!==0&&r[i]!==0&&(n||a())-r[i]>t[i])},Aa=new WeakMap,Rn=new WeakMap,ps=new WeakMap,Fr=new WeakMap,Do=new WeakSet,zm=function(){const t=new Ds(U(this,Xr));Te(this,Yr,0),Te(this,An,t),Te(this,Da,r=>{Te(this,Yr,U(this,Yr)-t[r]),t[r]=0}),Te(this,gs,(r,n,a,i)=>{if(be(this,at,ft).call(this,n))return 0;if(!Mn(a))if(i){if(typeof i!="function")throw new TypeError("sizeCalculation must be a function");if(a=i(n,r),!Mn(a))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return a}),Te(this,si,(r,n,a)=>{if(t[r]=n,U(this,Sr)){const i=U(this,Sr)-t[r];for(;U(this,Yr)>i;)be(this,oi,Bo).call(this,!0)}Te(this,Yr,U(this,Yr)+t[r]),a&&(a.entrySize=n,a.totalCalculatedSize=U(this,Yr))})},Da=new WeakMap,si=new WeakMap,gs=new WeakMap,hn=new WeakSet,aa=function*({allowStale:t=this.allowStale}={}){if(U(this,Nt))for(let r=U(this,Ut);!(!be(this,xs,zc).call(this,r)||((t||!U(this,Fr).call(this,r))&&(yield r),r===U(this,tr)));)r=U(this,Tr)[r]},dn=new WeakSet,ia=function*({allowStale:t=this.allowStale}={}){if(U(this,Nt))for(let r=U(this,tr);!(!be(this,xs,zc).call(this,r)||((t||!U(this,Fr).call(this,r))&&(yield r),r===U(this,Ut)));)r=U(this,lr)[r]},xs=new WeakSet,zc=function(t){return t!==void 0&&U(this,Pt).get(U(this,lt)[t])===t},oi=new WeakSet,Bo=function(t){var i,s;const r=U(this,tr),n=U(this,lt)[r],a=U(this,Ne)[r];return U(this,ta)&&be(this,at,ft).call(this,a)?a.__abortController.abort(new Error("evicted")):(U(this,un)||U(this,mr))&&(U(this,un)&&((i=U(this,fn))==null||i.call(this,a,n,"evict")),U(this,mr)&&((s=U(this,zt))==null||s.push([a,n,"evict"]))),U(this,Da).call(this,r),t&&(U(this,lt)[r]=void 0,U(this,Ne)[r]=void 0,U(this,qr).push(r)),U(this,Nt)===1?(Te(this,tr,Te(this,Ut,0)),U(this,qr).length=0):Te(this,tr,U(this,lr)[r]),U(this,Pt).delete(n),Oo(this,Nt)._--,r},li=new WeakSet,No=function(t,r,n,a){const i=r===void 0?void 0:U(this,Ne)[r];if(be(this,at,ft).call(this,i))return i;const s=new As,{signal:o}=n;o==null||o.addEventListener("abort",()=>s.abort(o.reason),{signal:s.signal});const c={signal:s.signal,options:n,context:a},f=(m,x=!1)=>{const{aborted:v}=s.signal,k=n.ignoreFetchAbort&&m!==void 0;if(n.status&&(v&&!x?(n.status.fetchAborted=!0,n.status.fetchError=s.signal.reason,k&&(n.status.fetchAbortIgnored=!0)):n.status.fetchResolved=!0),v&&!k&&!x)return h(s.signal.reason);const w=p;return U(this,Ne)[r]===p&&(m===void 0?w.__staleWhileFetching?U(this,Ne)[r]=w.__staleWhileFetching:this.delete(t):(n.status&&(n.status.fetchUpdated=!0),this.set(t,m,c.options))),m},u=m=>(n.status&&(n.status.fetchRejected=!0,n.status.fetchError=m),h(m)),h=m=>{const{aborted:x}=s.signal,v=x&&n.allowStaleOnFetchAbort,k=v||n.allowStaleOnFetchRejection,w=k||n.noDeleteOnFetchRejection,S=p;if(U(this,Ne)[r]===p&&(!w||S.__staleWhileFetching===void 0?this.delete(t):v||(U(this,Ne)[r]=S.__staleWhileFetching)),k)return n.status&&S.__staleWhileFetching!==void 0&&(n.status.returnedStale=!0),S.__staleWhileFetching;if(S.__returned===S)throw m},d=(m,x)=>{var k;const v=(k=U(this,ii))==null?void 0:k.call(this,t,i,c);v&&v instanceof Promise&&v.then(w=>m(w===void 0?void 0:w),x),s.signal.addEventListener("abort",()=>{(!n.ignoreFetchAbort||n.allowStaleOnFetchAbort)&&(m(void 0),n.allowStaleOnFetchAbort&&(m=w=>f(w,!0)))})};n.status&&(n.status.fetchDispatched=!0);const p=new Promise(d).then(f,u),g=Object.assign(p,{__abortController:s,__staleWhileFetching:i,__returned:void 0});return r===void 0?(this.set(t,g,{...c.options,status:void 0}),r=U(this,Pt).get(t)):U(this,Ne)[r]=g,g},at=new WeakSet,ft=function(t){if(!U(this,ta))return!1;const r=t;return!!r&&r instanceof Promise&&r.hasOwnProperty("__staleWhileFetching")&&r.__abortController instanceof As},vs=new WeakSet,Gc=function(t,r){U(this,Tr)[r]=t,U(this,lr)[t]=r},Ra=new WeakSet,bs=function(t){t!==U(this,Ut)&&(t===U(this,tr)?Te(this,tr,U(this,lr)[t]):be(this,vs,Gc).call(this,U(this,Tr)[t],U(this,lr)[t]),be(this,vs,Gc).call(this,U(this,Ut),t),Te(this,Ut,t))};let Xo=Uc;const Rs=new Xo({max:500,maxSize:5e3,ttl:1e3*60*30,sizeCalculation:(e,t)=>1}),{UnMergeable:O1}=Ze();function B1(e){Pf=e}let Pf=async e=>(Fe.warn("请配置 app.use(FsCrud,{dictRequest:(context)=>{ 你的字典请求方法 }})"),[]);class Ko extends O1{constructor(r){super();ke(this,"cache",!1);ke(this,"prototype",!1);ke(this,"immediate",!0);ke(this,"url");ke(this,"getData");ke(this,"value","value");ke(this,"label","label");ke(this,"children","children");ke(this,"color","color");ke(this,"isTree",!1);ke(this,"_data",null);ke(this,"originalData");ke(this,"dataMap",{});ke(this,"loading",!1);ke(this,"custom",{});ke(this,"getNodesByValues");ke(this,"onReady");ke(this,"notifies",[]);ke(this,"_unfetchValues",{});Object.defineProperty(this,"loading",{value:!1,enumerable:!1}),Object.defineProperty(this,"notifies",{value:!1,enumerable:!1}),Object.defineProperty(this,"originalData",{value:null,enumerable:!1}),this.loading=!1,G.merge(this,r),r.data!=null&&(this.originalData=r.data,this.setData(r.data)),this.toMap()}get data(){return this._data}set data(r){this._data=r,this.toMap()}isDynamic(){return this.url instanceof Function||this.getData instanceof Function||this.prototype}setData(r){this.data=r}async _loadDict(r){if(this.data&&!r.reload)return this.data;if(this.loading)return this._registerNotify();let n=null;if(this.getNodesByValues){if(r.value){let a=null;this.cache&&this.url&&(a=this.url+r.value);let i=null;if(a&&(i=Rs.get(a)),i)n=i;else{const s=Array.isArray(r.value)?r.value:[r.value];if(n=await this.getNodesByValues(s,r),n!=null&&!(n instanceof Array)){Fe.error("getNodesByValues需要返回数组，请检查");return}a&&Rs.set(a,n)}}}else if(this.originalData)n=this.originalData;else{this.loading=!0;try{n=await this.getRemoteDictData(r)}finally{this.loading=!1}}this.data=n,this.onReady&&this.onReady({dict:this,...r}),this._triggerNotify()}_triggerNotify(){this.notifies&&this.notifies.length>0&&(G.forEach(this.notifies,r=>{r(this.data)}),this.notifies.length=0)}_registerNotify(){let r=null;const n=new Promise(a=>{r=i=>{a(i)}});return this.notifies||(this.notifies=[]),this.notifies.push(r),n}async loadDict(r){return await this._loadDict({...r})}async reloadDict(r){return await this.loadDict({...r,reload:!0})}async appendByValues(r){if(this.getNodesByValues==null){Fe.warn("请配置getNodesByValues");return}for(const a of r)this.dataMap[a]||this._unfetchValues[a]||(this._unfetchValues[a]={loading:!1,value:a});await l.nextTick(),await l.nextTick(),await l.nextTick();const n=[];if(G.forEach(this._unfetchValues,a=>{a.loading||(a.loading=!0,n.push(a.value))}),n.length>0){const a=await this.getNodesByValues(n);this.setData([...this.data||[],...a]);for(const i of n)delete this._unfetchValues[i];return Object.keys(this._unfetchValues).length===0&&this._triggerNotify(),this.data}else return this._registerNotify()}clear(){this.originalData=null,this.setData(null)}async getRemoteDictData(r){let n,a,i;if(this.url&&(i=this.url,i instanceof Function&&(i=i({...r,dict:this})),a=i),this.getData!=null)n=async()=>await this.getData({url:i,dict:this,...r});else if(i)n=async()=>await Pf({url:i,dict:this});else return[];if(this.cache&&a){let s=Rs.get(a);if(s==null)s={loaded:!1,loading:!0,data:void 0,callback:[]},Rs.set(a,s);else{if(s.loaded)return s.data;if(s.loading)return new Promise(o=>{const c=f=>{o(f)};s.callback.push(c)})}try{s.loaded=!1,s.loading=!0;let o=await n();o=o||[],o instanceof Array||Fe.warn("dict data 格式有误，期望格式为数组，实际格式为：",o),s.data=o,s.loaded=!0,s.loading=!1;for(const c of s.callback)c(o);return s.callback=[],o}catch(o){s.loading=!1,s.loaded=!1,Fe.error("load dict error:",o)}}return await n()}toMap(){if(this._data==null){this.dataMap={};return}const r={};this.data&&this.buildMap(r,this.data||[]),this.dataMap=r}buildMap(r,n){G.forEach(n,a=>{r[this.getValue(a)]=a,this.isTree&&this.getChildren(a)&&this.buildMap(r,this.getChildren(a))})}getValue(r){return r[this.value]}getLabel(r){return r[this.label]}getChildren(r){return r[this.children]}getColor(r){return r[this.color]}getDictData(){return this.data}getDictMap(){return this.dataMap}getNodeByValue(r){return this.dataMap[r]}getNodesFromDataMap(r){if(r==null)return[];G.isArray(r)||(r=[r]);const n=[];return G.forEach(r,a=>{const i=this.dataMap[a];i?n.push(i):n.push({[this.value]:a})}),n}}function If(e){const t=l.shallowReactive(new Ko(e));return!t.prototype&&t.immediate&&t.loadDict(),t}function Lf(){return{dict:If,setDictRequest:B1,Dict:Ko}}function N1(){return{addTypes:Na.addTypes,getType:Na.getType,getTypes:Na.getTypes,install:Na.install}}async function P1(e){await l.nextTick();const t=e.getModal();if(t==null)return;const r=t.querySelector(".ant-modal-header");if(r==null)return;const n=t,i=t.style;r.style.cursor="move",r.onmousedown=s=>{const o=s.clientX,c=s.clientY;n.style.transform="translate(0px, 0px)";let f,u;i.left.includes("%")?(f=+document.body.clientWidth*(+i.left.replace(/%/g,"")/100),u=+document.body.clientHeight*(+i.top.replace(/%/g,"")/100)):(f=+i.left.replace(/px/g,""),u=+i.top.replace(/px/g,""),u=u===0?100:u),document.onmousemove=function(h){const d=h.clientX-o,p=h.clientY-c;n.style.left=`${d+f}px`,n.style.top=`${p+u}px`},document.onmouseup=function(h){document.onmousemove=null,document.onmouseup=null}}}async function I1(e){await l.nextTick();const t=e.getModal();if(t==null)return;const r=t.querySelector(".n-card-header");if(r==null)return;const n=t,i=t.style;r.style.cursor="move",r.onmousedown=s=>{const o=s.clientX,c=s.clientY;n.style.transform="translate(0px, 0px)";let f,u;i.left.includes("%")?(f=+document.body.clientWidth*(+i.left.replace(/%/g,"")/100),u=+document.body.clientHeight*(+i.top.replace(/%/g,"")/100)):(f=+i.left.replace(/px/g,""),u=+i.top.replace(/px/g,"")),document.ondrag=async function(h){if(h.clientX==0&&h.clientY==0)return;const d=h.clientX-o,p=h.clientY-c;n.style.left=`${d+f}px`,n.style.top=`${p+u}px`},document.ondragend=function(h){document.ondrag=null,document.ondragend=null}}}async function L1(e){const{ui:t}=de.useUi();t.type==="antdv"?await P1(e):t.type==="element"||await I1(e)}function Mf(){return{dragModal:L1}}const Vf={logger:{off:{tableColumns:!1}}},M1=l.defineComponent({name:"FsContainer",props:{fixedHeight:{type:Boolean,default:!0},bodyStyle:{type:Object,default:()=>({})},innerStyle:{type:Object,default:()=>({})}},setup(e,t){const{merge:r}=Ze(),n=l.computed(()=>e.fixedHeight===!1?r({position:"relative"},e.innerStyle):e.innerStyle),a=l.computed(()=>e.fixedHeight===!1?r({flex:"unset"},e.bodyStyle):e.bodyStyle);return{computedInnerStyle:n,computedBodyStyle:a}}}),B3="",V1={class:"fs-container"},U1={class:"box"},$1={class:"header"},W1={class:"footer"};function H1(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",V1,[l.createElementVNode("div",U1,[l.createElementVNode("div",{class:"inner",style:l.normalizeStyle(e.computedInnerStyle)},[l.createElementVNode("div",$1,[l.renderSlot(e.$slots,"header")]),l.createElementVNode("div",{class:"body",style:l.normalizeStyle(e.computedBodyStyle)},[l.renderSlot(e.$slots,"default")],4),l.createElementVNode("div",W1,[l.renderSlot(e.$slots,"footer")])],4)]),l.renderSlot(e.$slots,"box")])}const Uf=rt(M1,[["render",H1]]),j1=l.defineComponent({name:"FsLayoutDefault"}),N3="",z1={class:"fs-crud-header"},G1={class:"fs-header-top"},X1={class:"fs-header-middle"},K1={class:"fs-header-bottom"},Y1={class:"fs-crud-footer"};function q1(e,t,r,n,a,i){const s=l.resolveComponent("fs-container");return l.openBlock(),l.createBlock(s,{class:"fs-layout-default"},{header:l.withCtx(()=>[l.createElementVNode("div",z1,[l.createElementVNode("div",G1,[l.renderSlot(e.$slots,"header-top")]),l.renderSlot(e.$slots,"search"),l.createElementVNode("div",X1,[l.renderSlot(e.$slots,"header-middle")]),l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar"),l.createElementVNode("div",K1,[l.renderSlot(e.$slots,"header-bottom")]),l.renderSlot(e.$slots,"tabs")])]),footer:l.withCtx(()=>[l.createElementVNode("div",Y1,[l.renderSlot(e.$slots,"footer-top"),l.renderSlot(e.$slots,"pagination"),l.renderSlot(e.$slots,"footer-bottom")])]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default"),l.renderSlot(e.$slots,"table"),l.renderSlot(e.$slots,"form")]),_:3})}const $f=rt(j1,[["render",q1]]),J1=l.defineComponent({name:"FsLayoutCard",setup(){const e=l.inject("get:crudBinding"),t=l.computed(()=>{var a,i;return e==null?!0:(i=(a=e())==null?void 0:a.search)==null?void 0:i.show}),{ui:r}=de.useUi(),n=l.ref(r.card.name);return{searchShow:t,cardComponentName:n}}}),P3="",Z1={class:"fs-header-top"},Q1={class:"fs-header-bottom"},eg={class:"top-bar"},tg={class:"top-bar"},rg={class:"fs-crud-footer"};function ng(e,t,r,n,a,i){const s=l.resolveComponent("fs-container");return l.openBlock(),l.createBlock(s,{class:"fs-layout-card"},l.createSlots({default:l.withCtx(()=>[l.createVNode(s,null,{header:l.withCtx(()=>[l.renderSlot(e.$slots,"tabs")]),default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.cardComponentName),{class:"fs-layout-card-body"},{title:l.withCtx(()=>[l.createElementVNode("div",eg,[l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar")])]),header:l.withCtx(()=>[l.createElementVNode("div",tg,[l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar")])]),default:l.withCtx(()=>[l.createVNode(s,null,{footer:l.withCtx(()=>[l.createElementVNode("div",rg,[l.renderSlot(e.$slots,"footer-top"),l.renderSlot(e.$slots,"pagination"),l.renderSlot(e.$slots,"footer-bottom")])]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default"),l.renderSlot(e.$slots,"table"),l.renderSlot(e.$slots,"form")]),_:3})]),_:3}))]),_:3})]),_:2},[e.searchShow?{name:"header",fn:l.withCtx(()=>[l.createElementVNode("div",Z1,[l.renderSlot(e.$slots,"header-top")]),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.cardComponentName),null,{default:l.withCtx(()=>[l.renderSlot(e.$slots,"search")]),_:3})),l.createElementVNode("div",Q1,[l.renderSlot(e.$slots,"header-bottom")])]),key:"0"}:void 0]),1024)}const Wf=rt(J1,[["render",ng]]),I3="";function ag(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}const Hf=l.defineComponent({name:"FsButton",inheritAttrs:!1,props:{text:{type:String,default:"",required:!1},icon:{type:[String,Object,Function],default:"",required:!1},iconRight:{type:[String,Object,Function],default:"",required:!1},circle:{type:Boolean,default:!1,required:!1},tooltip:{type:Object,default:void 0},buttonProps:{type:Object,default:void 0}},setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=(f,u="fs-button-icon")=>{if(f!=null)return typeof f=="string"?l.createVNode(l.resolveComponent("fs-icon"),{icon:f,class:u},null):typeof f=="function"?f():l.createVNode(l.resolveComponent("fs-icon"),l.mergeProps(f,{class:u}),null)},i=()=>{const f=e.icon,u=e.iconRight,h=r.type!=="element",d=!h;let p;const g={...t.slots};(f&&!h&&!d||t.slots.default||e.text||u)&&(g.default=()=>{const k=[];return f&&!h&&!d&&k.push(a(f)),t.slots.default&&k.push(t.slots.default()),e.text&&k.push(e.text),u&&k.push(a(u,"fs-button-icon-right")),k}),f&&(h&&!g.icon?g.icon=()=>a(f):d&&!g.icon&&(p=a(f)));const m=e.circle?r.button.circle:{},x=l.resolveDynamicComponent(r.button.name),v=n({...m,class:{"fs-button":!0,"is-thin":!e.text&&!t.slots.default}},{...t.attrs,...e.buttonProps});return p&&(v.icon=p),l.h(x,v,g)};if(!e.tooltip)return i;const s=l.resolveDynamicComponent(r.tooltip.name),o=l.computed(()=>G.omit(e.tooltip,"slots")),c=r.tooltip.trigger;return()=>{var u;const f={...(u=e.tooltip)==null?void 0:u.slots,[c]:i};return l.createVNode(s,o.value,ag(f)?f:{default:()=>[f]})}}}),L3="",jf=l.defineComponent({name:"FsIcon",inheritAttrs:!1,props:{icon:{type:String,default:void 0,require:!0}},setup(e,t){const{ui:r}=de.useUi(),n=l.computed(()=>{var i;if(e.icon&&((i=e.icon)==null?void 0:i.indexOf(":"))>=0){if(e.icon.startsWith("svg:")){const o=l.resolveDynamicComponent("FsIconSvg");return()=>{const c=e.icon.replace("svg:","");return l.createVNode(o,l.mergeProps({class:"fs-icon",icon:c},t.attrs),null)}}const s=l.resolveDynamicComponent("FsIconify");return()=>l.createVNode(s,l.mergeProps({class:"fs-icon",icon:e.icon},t.attrs),null)}const a=l.resolveDynamicComponent(e.icon);return typeof a=="string"?()=>l.createVNode("span",{title:"error icon name"},[a]):r.icon.isComponent?()=>l.createVNode(a,l.mergeProps({class:"fs-icon"},t.attrs),null):()=>l.createVNode(l.resolveComponent("el-icon"),l.mergeProps({class:"fs-icon"},t.attrs),{default:()=>[l.createVNode(a,null,null)]})});return()=>n.value()}}),ig=l.defineComponent({name:"FsIconify",props:{icon:{type:String},spin:{type:Boolean,default:!1}},setup(e,t){const r=l.ref(null),n=async()=>{if(!e.icon)return;const a=l.unref(r);if(!a)return;await l.nextTick();const i=document.createElement("span");i.className="iconify",i.dataset.icon=e.icon,a.textContent="",a.appendChild(i)};return l.watch(()=>e.icon,n,{flush:"post"}),l.onMounted(n),{iconifyRef:r}}}),M3="";function sg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",{ref:"iconifyRef",class:l.normalizeClass(["fs-iconify",{"fs-iconify-spin":e.spin}])},null,2)}const zf=rt(ig,[["render",sg]]),og=l.defineComponent({name:"FsSvgIcon",props:{icon:{type:String,required:!0},size:{type:[Number,String],default:16},spin:{type:Boolean,default:!1}},setup(e){const t=l.computed(()=>`#${e.icon}`),r=l.computed(()=>{const{size:n}=e;let a=`${n}`;return a=`${a.replace("px","")}px`,{width:a,height:a}});return{symbolId:t,getStyle:r}}}),V3="",lg={class:"fs-icon-svg-content","aria-hidden":"true"},cg=["xlink:href"];function fg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",{class:l.normalizeClass(["fs-icon-svg",e.spin&&"fs-icon-spin"])},[(l.openBlock(),l.createElementBlock("svg",lg,[l.createElementVNode("use",{"xlink:href":e.symbolId},null,8,cg)]))],2)}const Gf=rt(og,[["render",fg]]),ug=l.defineComponent({name:"FsLabel",props:{label:{type:String,default:""},labelAttrs:{type:Object,default:()=>({})},contentAttrs:{type:Object,default:()=>({})}}}),U3="",hg={class:"fs-label"};function dg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",hg,[l.createElementVNode("div",l.mergeProps({class:"label"},e.labelAttrs),[l.createTextVNode(l.toDisplayString(e.label)+" ",1),l.renderSlot(e.$slots,"label")],16),l.createElementVNode("div",l.mergeProps({class:"content"},e.contentAttrs),[l.renderSlot(e.$slots,"default")],16)])}const Xf=rt(ug,[["render",dg]]),Kf=l.defineComponent({name:"FsLoading",props:{loading:{},icon:{}},setup(e){const{ui:t}=de.useUi();return()=>e.loading?l.createVNode("div",{class:"fs-loading"},[l.createVNode(l.resolveComponent("fs-icon"),{class:"fs-icon-spin",icon:t.icons.refresh},null)]):null}}),mg=l.defineComponent({name:"FsBox"}),pg={class:"fs-box"};function gg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",pg,[l.renderSlot(e.$slots,"default")])}const Yf=rt(mg,[["render",gg]]);function xg(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}function qf(e,t){if(e[t]instanceof Array){const r=e[t];e[t]=n=>{for(const a of r)a(n)}}}const vg=["div","span","a","p","pre","li","ol","ul"],Jf=l.defineComponent({name:"FsComponentRender",inheritAttrs:!1,props:{modelValue:{},name:{},slots:{type:Object},children:{type:Object},on:{type:Object},events:{type:Object},scope:{type:Object},vModel:{type:[String,Object]},props:{},render:{},undefineToNull:{type:Boolean,default:!0}},emits:["update:dict","update:modelValue","mounted"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze();l.provide("get:scope",()=>e.scope),l.onMounted(()=>{t.emit("mounted",e.scope)});const a=l.ref(),i=l.computed(()=>{const p={name:"modelValue",trim:!1,number:!1,transform:void 0};e.vModel&&(typeof e.vModel=="string"?p.name=e.vModel:n(p,e.vModel));const g=e.modelValue??(r.type==="antdv"?void 0:null),m={ref:a,[p.name]:g,...e.props};m["onUpdate:"+p.name]=v=>{if(v&&(p.trim&&(v=v.trim()),p.number)){const k=Number(v);isNaN(k)||(v=k)}p.transform&&(v=p.transform(v)),v===void 0&&e.undefineToNull&&(v=null),t.emit("update:modelValue",v)};const x={...e.events,...e.on};return G.forEach(x,(v,k)=>{const w=v;k.startsWith("on")||(k=G.camelCase("on_"+k)),m[k]=S=>w({...e.scope,$event:S})}),m}),s=()=>{const p={},g=(m,x)=>{m instanceof Function?p[x]=v=>m({...e.scope,scope:v}):p[x]=()=>m};return G.forEach(e.children,g),G.forEach(e.slots,g),p},o=l.computed(()=>{const p={isAsyncComponent:!1,component:l.unref(e.name)||r.input.name};let g=p.component;return vg.includes(g)||(typeof g=="string"&&(g=l.resolveComponent(g)),(g==null?void 0:g.name)==="AsyncComponentWrapper"&&(p.isAsyncComponent=!0)),p.component=g,p}),c=s;function f(){return o.value.isAsyncComponent?h():u()}function u(){return a.value}async function h(){const p=u();return p??new Promise((g,m)=>{d(g,m,0)})}function d(p,g,m){setTimeout(()=>{const x=u();if(x!=null){p(x);return}if(m++,m>20){g(new Error("异步组件加载超时"));return}d(p,g,m)},200)}return t.expose({props:e,getTargetRefSync:u,getTargetRef:f,getTargetRefAsync:h}),()=>{let p;const g=l.mergeProps(i.value,t.attrs);if(qf(g,"onChange"),qf(g,"onBlur"),e.render)return e.render({...e.scope,attrs:g});const m=l.markRaw(o.value.component);return l.createVNode(m,g,xg(p=c())?p:{default:()=>[p]})}}}),Zf=l.defineComponent({name:"FsSlotRender",inheritAttrs:!1,props:{slots:{type:Function},scope:{type:Object}},setup(e){return()=>e.slots(e.scope)}}),Yo=l.defineComponent({functional:!0,name:"FsRender",props:{renderFunc:{type:Function},scope:{type:Object}},setup(){},render(){return this.renderFunc(this.scope)}}),wg=l.defineComponent({name:"FsForm",props:{initialForm:{type:Object,default(){return{}}},columns:{type:Object,default:void 0},group:{type:Object,default:void 0},doReset:{type:Function,default:void 0},beforeValidate:{type:Function,default:void 0},beforeSubmit:{type:Function,default:void 0},doSubmit:{type:Function,default:void 0},afterSubmit:{type:Function,default:void 0},slots:{type:Object,default:()=>({})},display:{type:String,default:"flex"},index:{type:Number,default:void 0},mode:{type:String,default:void 0},row:{type:Object,default:void 0},col:{type:Object,default:void 0},formItem:{type:Object,default:void 0},helper:{type:Object},watch:{type:Function,default:null}},emits:["reset","submit","success","validationError","value-change","init"],setup(e,t){var ue,z;const{merge:r}=Ze(),{ui:n}=de.useUi(),{AsyncComputeValue:a,doComputed:i}=Pn(),s=l.ref(),o=l.reactive({}),{proxy:c}=l.getCurrentInstance();G.each(e.columns,W=>{W.value!=null&&(W.value instanceof a||W.value instanceof mi)&&Fe.warn("form.value配置不支持Compute/AsyncCompute类型的动态计算")});function f(){const W={};return G.each(e.columns,(A,_)=>{const F=l.unref(A.value);F!==void 0&&G.set(W,_,F)}),r(W,G.cloneDeep(e.initialForm)),W}const u=f();x(u);const h=l.computed(()=>({row:u,form:o,index:e.index,mode:e.mode||"add",attrs:t.attrs,getComponentRef:T}));function d(){return h.value}const p=i(()=>e.columns,d);function g(W){W!=null&&G.each(e.columns,(A,_)=>{let F=G.get(W,_);A.valueBuilder&&A.valueBuilder({value:F,key:_,row:u,form:W,index:e.index,mode:e.mode})})}function m(){return o}function x(W,A={}){if(g(W),A.mergeForm===!1)for(const F in o)delete o[F];r(o,W);const{valueChange:_}=A;_&&G.forEach(e.columns,(F,D)=>{const M=o[D];w(D,M)})}function v(...W){return r({},e.col,...W)}function k(W){return{key:W.key,...h.value}}g(o);function w(W,A){const _={key:W,value:A,formRef:c,...h.value,immediate:!1};t.emit("value-change",_);let F=e.columns[W].valueChange;F&&(F instanceof Function?F(_):F.handle&&F.handle(_))}const S=l.ref({});function b(W){return S.value[W]}function T(W,A=!1){var _;return(_=b(W))==null?void 0:_.getComponentRef(A)}const y=l.ref([]);G.forEach((ue=e.group)==null?void 0:ue.groups,(W,A)=>{W.collapsed!==!0&&y.value.push(A)}),((z=e.group)==null?void 0:z.groupType)==="tabs"&&(y.value=y.value.length>0?y.value[0]:null);const O=i(()=>e.group,d,null,W=>{if(!W)return{};const A={};G.forEach(W==null?void 0:W.groups,(D,M)=>{G.forEach(D.columns,K=>{if(p.value[K]==null){ui.logger.warn("无效的分组字段："+K);return}A[K]=M})});const _=W.groupType;let F={parent:n.collapse.name,child:n.collapseItem.name};return _==="tabs"&&(F.parent=n.tabs.name,F.child=n.tabPane.name),r({wrapper:F,groupedKeys:A},W)}),B=l.computed(()=>{const W=[];return G.forEach(p.value,(A,_)=>{var D,M;const F=G.cloneDeep(e.formItem||{});A=r(F,A),A.key=_,A.order==null&&(A.order=In.orderDefault),(((D=O.value)==null?void 0:D.groupedKeys)==null||((M=O.value)==null?void 0:M.groupedKeys[_])==null)&&W.push(A),A.col=v(A.col)}),W.sort((A,_)=>A.order-_.order),W});function H(){return s.value}async function j(){const W=f(),A=G.entries(o);for(const _ of A){const F=G.get(W,_[0]);F==null?G.unset(o,_[0]):G.set(o,_[0],F)}e.doReset&&await e.doReset(h.value),t.emit("reset")}const I=l.ref(),X=l.ref({});function q(W){var A,_;if((A=O.value)!=null&&A.groupedKeys)for(let F in W){const D=(_=O.value)==null?void 0:_.groupedKeys[F];D!=null&&(W["group."+D]=!0)}}async function te(){const W={...h.value,form:o};if(e.beforeValidate&&await e.beforeValidate(W)===!1)return!1;try{X.value={},await n.form.validateWrap(s.value),I.value=!0}catch(F){I.value=!1;const D=n.form.transformValidateErrors(F);throw q(D),X.value=D,t.emit("validationError",h.value),F}const A=G.cloneDeep(l.toRaw(o)),_={...h.value,form:A};if(Fe.debug("form submit",JSON.stringify(o)),G.each(e.columns,(F,D)=>{let M=G.get(A,D);F.valueResolve&&F.valueResolve({value:M,key:D,..._})}),e.beforeSubmit&&await e.beforeSubmit(_)===!1)return!1;if(G.each(e.columns,(F,D)=>{F.submit===!1&&G.unset(A,D)}),e.doSubmit){const F=await e.doSubmit(_);if(_.res=F,F===!1)return!1}return t.emit("submit",_),e.afterSubmit&&await e.afterSubmit(_)===!1?!1:(t.emit("success",_),_)}l.onMounted(()=>{G.forEach(p.value,(W,A)=>{if(W.valueChange==null)return;let _=W.valueChange;if(_&&_.immediate===!0&&_.handle){const F={key:A,value:o[A],formRef:c,...h.value,immediate:!0};_.handle&&_.handle(F)}})});function ae(W){return!!(W&&W.show!==!1)}function oe(W){if(!W.columns)return!1;for(let A of W.columns){if(p.value[A]==null)continue;if(ae(p.value[A]))return!0}return!1}return e.watch&&l.watch(()=>o,(W,A)=>{e.watch&&e.watch(h.value)},{deep:!0,immediate:!0}),t.emit("init",h.value),{get:(W,A)=>G.get(W,A),set:(W,A,_)=>{G.set(W,A,_),w(A,_)},ui:n,validRef:I,errorsRef:X,formRef:s,computedColumns:p,computedDefaultColumns:B,submit:te,reset:j,getFormRef:H,scope:h,buildItemScope:k,groupActiveKey:y,form:o,formItemRefs:S,getFormData:m,setFormData:x,getComponentRef:T,mergeCol:v,computedGroup:O,getContextFn:d,formItemShow:ae,groupItemShow:oe}}}),$3="";function _g(e,t,r,n,a,i){const s=l.resolveComponent("fs-form-item"),o=l.resolveComponent("fs-render");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),{ref:"formRef",class:l.normalizeClass(["fs-form",{"fs-form-grid":e.display==="grid","fs-form-flex":e.display==="flex","fs-form-invalid":e.validRef===!1}]),model:e.form},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),l.mergeProps({class:"fs-row"},e.row),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedDefaultColumns,c=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c==null?void 0:c.key},[e.formItemShow(c)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-col"},c.col),{default:l.withCtx(()=>[c.blank!==!0?(l.openBlock(),l.createBlock(s,{key:0,ref_for:!0,ref:f=>{f&&(e.formItemRefs[c.key]=f)},item:c,helper:e.helper,"model-value":e.get(e.form,c.key),"form-slot":e.slots["form_"+c.key],"get-context-fn":e.getContextFn,"onUpdate:modelValue":f=>e.set(e.form,c.key,f)},null,8,["item","helper","model-value","form-slot","get-context-fn","onUpdate:modelValue"])):l.createCommentVNode("",!0)]),_:2},1040)):l.createCommentVNode("",!0)],64))),128))]),_:1},16)),e.computedGroup.wrapper?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedGroup.wrapper.parent),l.mergeProps({key:0,[e.ui.collapse.modelValue]:e.groupActiveKey,["onUpdate:"+e.ui.collapse.modelValue]:t[0]||(t[0]=c=>e.groupActiveKey=c),style:{width:"100%"}},e.computedGroup),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedGroup.groups,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[e.groupItemShow(c)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedGroup.wrapper.child),l.mergeProps({key:0,[e.ui.collapse.keyName||""]:f},c,{class:{"fs-form-group-error":e.errorsRef["group."+f]}}),l.createSlots({default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),l.mergeProps({class:"fs-row"},e.row),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(c.columns,u=>{var h;return l.openBlock(),l.createElementBlock(l.Fragment,{key:u},[e.formItemShow(e.computedColumns[u])?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-col"},e.mergeCol(c.col,(h=e.computedColumns[u])==null?void 0:h.col)),{default:l.withCtx(()=>{var d;return[e.computedColumns[u]&&((d=e.computedColumns[u])==null?void 0:d.blank)!==!0?(l.openBlock(),l.createBlock(s,{key:0,ref_for:!0,ref:p=>{p&&(e.formItemRefs[u]=p)},item:e.computedColumns[u],"model-value":e.get(e.form,u),"form-slot":e.slots["form_"+u],"get-context-fn":e.getContextFn,"onUpdate:modelValue":p=>e.set(e.form,u,p)},null,8,["item","model-value","form-slot","get-context-fn","onUpdate:modelValue"])):l.createCommentVNode("",!0)]}),_:2},1040)):l.createCommentVNode("",!0)],64)}),128))]),_:2},1040))]),_:2},[l.renderList(c.slots,(u,h)=>({name:h,fn:l.withCtx(d=>[l.createVNode(o,{"render-func":u,scope:{...d,hasError:e.errorsRef["group."+f]}},null,8,["render-func","scope"])])}))]),1040,["class"])):l.createCommentVNode("",!0)],64))),128))]),_:1},16)):l.createCommentVNode("",!0)]),_:1},8,["class","model"])}const Qf=rt(wg,[["render",_g]]),yg=l.defineComponent({name:"FsFormItem",components:{FsRender:Yo},props:{modelValue:{},item:{type:Object,default:void 0},formSlot:{type:Function,default:void 0},getContextFn:{type:Function,default:void 0},helper:{type:[String,Object]}},emits:["update:modelValue"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=l.ref(),i=()=>{const g=e.getContextFn?e.getContextFn():{};return{value:e.modelValue,key:e.item.key,...g}};function s(g){t.emit("update:modelValue",g)}function o(g=!1){var m,x;return g?(m=a.value)==null?void 0:m.getTargetRefAsync():(x=a.value)==null?void 0:x.getTargetRef()}const c=l.computed(()=>{var g,m,x;return((m=(g=e.item)==null?void 0:g.helper)==null?void 0:m.position)||((x=e.helper)==null?void 0:x.position)}),f=l.computed(()=>{var g,m;return n({},(g=e.item.helper)==null?void 0:g.tooltip,(m=e.helper)==null?void 0:m.tooltip)}),u=l.computed(()=>{if(e.item!=null)return e.item.key.indexOf(".")>=0?e.item.key.split("."):e.item.key}),h=l.computed(()=>e.item.label||e.item.title),d=l.computed(()=>h.value instanceof Function);return{ui:r,updateModelValue:s,scopeFunc:i,getComponentRef:o,componentRenderRef:a,computedHelperPosition:c,computedHelperTooltip:f,computedKey:u,computedLabelIsRender:d,computedLabel:h,computedLabelRender:()=>h.value(i())}}}),W3="",kg={key:0,class:"fs-form-item-label-text"},Eg=["title"],bg={class:"fs-form-helper-tooltip"},Sg={class:"fs-form-item-label-icon"},Tg={class:"fs-form-item-content"},Fg={class:"fs-form-item-render"},Cg={class:"fs-form-item-component"};function Ag(e,t,r,n,a,i){const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-form-helper"),c=l.resolveComponent("fs-icon"),f=l.resolveComponent("fs-slot-render"),u=l.resolveComponent("fs-component-render");return e.item?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.mergeProps({key:0,class:"fs-form-item",[e.ui.formItem.prop||""]:e.computedKey},e.item,{path:e.item.key,"rule-path":e.item.key}),{label:l.withCtx(()=>[e.computedLabelIsRender?(l.openBlock(),l.createElementBlock("span",kg,[l.createVNode(s,{"render-func":e.computedLabelRender},null,8,["render-func"])])):(l.openBlock(),l.createElementBlock("span",{key:1,class:"fs-form-item-label-text",title:e.computedLabel},l.toDisplayString(e.computedLabel),9,Eg)),e.item.helper&&e.computedHelperPosition==="label"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.tooltip.name),l.normalizeProps(l.mergeProps({key:2},e.computedHelperTooltip)),{[e.ui.tooltip.content]:l.withCtx(()=>[l.createElementVNode("span",bg,[l.createVNode(o,{helper:e.item.helper,scope:e.scopeFunc()},null,8,["helper","scope"])])]),[e.ui.tooltip.trigger]:l.withCtx(()=>[l.createElementVNode("span",Sg,[l.createVNode(c,{class:"fs-form-item-label-icon-inner",icon:e.ui.icons.question},null,8,["icon"])])]),_:2},1040)):l.createCommentVNode("",!0)]),default:l.withCtx(()=>{var h;return[l.createElementVNode("div",Tg,[e.item.topRender?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.topRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),l.createElementVNode("div",Fg,[e.item.prefixRender?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.prefixRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),l.createElementVNode("div",Cg,[e.formSlot?(l.openBlock(),l.createBlock(f,{key:0,slots:e.formSlot,scope:e.scopeFunc()},null,8,["slots","scope"])):((h=e.item.component)==null?void 0:h.show)!==!1?(l.openBlock(),l.createElementBlock(l.Fragment,{key:1},[e.item.conditionalRender&&e.item.conditionalRender.match&&e.item.conditionalRender.match(e.scopeFunc())?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.conditionalRender.render,scope:e.scopeFunc()},null,8,["render-func","scope"])):e.item.render?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.render,scope:e.scopeFunc()},null,8,["render-func","scope"])):(l.openBlock(),l.createBlock(u,l.mergeProps({key:2,ref:"componentRenderRef"},e.item.component,{"model-value":e.modelValue,scope:e.scopeFunc(),"onUpdate:modelValue":e.updateModelValue}),null,16,["model-value","scope","onUpdate:modelValue"]))],64)):l.createCommentVNode("",!0)]),e.item.suffixRender?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.suffixRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0)]),e.item.bottomRender?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.bottomRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),e.item.helper&&e.computedHelperPosition!=="label"?(l.openBlock(),l.createBlock(o,{key:2,helper:e.item.helper,scope:e.scopeFunc()},null,8,["helper","scope"])):l.createCommentVNode("",!0)])]}),_:1},16,["path","rule-path"])):l.createCommentVNode("",!0)}const e0=rt(yg,[["render",Ag]]),Dg=l.defineComponent({name:"FsFormHelper",props:{helper:{type:[Object,String]},scope:{}},setup(e){}}),H3="",Rg={class:"fs-form-helper"},Og={key:0},Bg={key:2};function Ng(e,t,r,n,a,i){const s=l.resolveComponent("fs-render");return l.openBlock(),l.createElementBlock("div",Rg,[typeof e.helper=="string"?(l.openBlock(),l.createElementBlock("pre",Og,l.toDisplayString(e.helper),1)):e.helper.render?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.helper.render,scope:e.scope},null,8,["render-func","scope"])):e.helper.text?(l.openBlock(),l.createElementBlock("pre",Bg,l.toDisplayString(e.helper.text),1)):l.createCommentVNode("",!0)])}const t0=rt(Dg,[["render",Ng]]),j3="";function Pg(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}const Pa=l.defineComponent({name:"FsFormWrapper",props:{options:{},slots:{},inner:{},innerWrapper:{},id:{},zIndex:{}},emits:["reset","submit","validationError","value-change","open","opened","mounted","closed","inner-change"],setup(e,t){const{t:r}=nr(),{merge:n}=Ze(),a=l.ref(!1),i=l.ref(),s=l.ref(),o=l.ref(),c=l.ref(),f=l.ref(),u=l.ref(!1),h=l.ref(),d=l.ref(),p=l.ref(),g=e.id||Math.floor(Math.random()*1e6)+"",m="fs-form-wrapper_"+g,x=l.ref({});function v(){return{wrapper:o.value,options:s.value,formRef:f.value,form:B(),wrapperBindRef:o,formOptionsRef:s,setFormData:H,getFormData:B,close:w,toggleFullscreen:q,submit:y}}const k=async ue=>{var _;const{wrapper:z}=ue;z.onOpen&&z.onOpen(ue),p.value=z.title,i.value=ue.wrapper.is,c.value=z;const W=te.formWrapper.customClass(i.value),A=`fs-form-wrapper ${m} ${z[W]||""} `;return o.value={...G.omit(z,"title","onOpen","onClosed","onOpened","is","inner"),[W]:A},s.value={...G.omit(ue,"wrapper","slots"),slots:{...e.slots,...ue.slots}},x.value={...e.slots,...(_=ue.wrapper)==null?void 0:_.slots},h.value=()=>{z.onClosed&&z.onClosed(v())},d.value=()=>{z.onOpened&&z.onOpened(v())},z.fullscreen!=null&&(I.value=z.fullscreen),t.emit("inner-change",!!c.value.inner),new Promise(async(F,D)=>{await l.nextTick(),a.value=!0,await l.nextTick(),b()})},w=()=>{a.value=!1},S=()=>{s.value=null,h.value&&h.value(),t.emit("closed")},b=()=>{if(d.value&&d.value(),o.value.draggable){const{dragModal:ue}=Mf();ue({getModal:()=>document.querySelector(`.${m}`)})}},T=ue=>{t.emit("value-change",ue)};async function y(){u.value=!0;try{if(await f.value.submit()===!1)return;w()}finally{u.value=!1}}async function O(){await f.value.reset()}function B(){var ue;return(ue=f.value)==null?void 0:ue.getFormData()}function H(ue,z){var W;(W=f.value)==null||W.setFormData(ue,z)}const j=l.computed(()=>{var A;const ue={cancel:{text:r("fs.form.cancel"),onClick:()=>{w()}},reset:{text:r("fs.form.reset"),onClick:()=>{O()}},ok:{text:r("fs.form.ok"),type:"primary",onClick:async()=>{await y()},loading:u.value}},z=n(ue,(A=o.value)==null?void 0:A.buttons),W=[];return G.forEach(z,(_,F)=>{_.key=F,W.push(_),_.onClick==null&&_.click!=null&&(_.onClick=()=>{_.click(v())})}),G.sortBy(W,_=>_.order??In.orderDefault)});l.onMounted(()=>{e.options!=null&&k(e.options),t.emit("mounted",l.getCurrentInstance().exposed)});const I=l.ref(!1),X=l.computed(()=>{var ue;return!((ue=i.value)!=null&&ue.endsWith("drawer"))});function q(){I.value=!I.value}const te=de.uiContext.get(),ae=l.computed(()=>c.value.inner?te.formWrapper.buildInnerBind({getInnerWrapper(){return e.innerWrapper}}):{});t.expose({formWrapperId:g,formWrapperIdClass:m,close:w,onClosed:S,onOpened:b,open:k,title:p,fullscreenEnabled:X,fullscreen:I,toggleFullscreen:q,formOptions:s,formWrapperIs:i,formWrapperOpen:a,formWrapperBind:o,formRef:f,submit:y,computedButtons:j,loading:u,getFormData:B,setFormData:H,onValueChange:T,innerBind:ae,formWrapperSlots:x});const oe=l.useSlots();return()=>{if(!o.value)return null;const ue=de.uiContext.get();let z={};const W={...oe,...x.value},A=(We,Oe,Ue=W)=>Ue[We]?Ue[We](Oe):null,_=i.value||"el-dialog";if(s.value){const{index:We,mode:Oe}=s.value||{},Ue={_self:this,index:We,mode:Oe,getFormData:B};z={[ue.formWrapper.titleSlotName]:()=>{let Pe=null;return X.value&&(Pe=l.createVNode(l.resolveComponent("fs-icon"),{class:"fs-fullscreen-icon",onClick:q,icon:I.value?ue.icons.fullScreen:ue.icons.unFullScreen},null)),l.createVNode("div",{class:"fs-form-header"},[l.createVNode("div",{class:"fs-form-header-left"},[A("form-header-left",Ue),p.value,A("form-header-right",Ue)]),l.createVNode("div",{class:"fs-form-header-action"},[A("form-header-action-left",Ue),Pe,A("form-header-action-right",Ue)])])},default:()=>{const Pe=[];return G.forEach(j.value,we=>{we.show!==!1&&Pe.push(l.createVNode(l.resolveComponent("fs-button"),we,null))}),l.createVNode("div",{class:"fs-form-wrapper-body"},[l.createVNode("div",{class:"fs-form-body"},[A("form-body-top",Ue),l.createVNode(l.resolveComponent("fs-form"),l.mergeProps({ref:f},s.value,{onValueChange:T}),null),A("form-body-bottom",Ue)]),l.createVNode("div",{class:"fs-form-footer-btns"},[A("form-footer-left",Ue),Pe,A("form-footer-right",Ue)])])}}}if(ue.formWrapper.hasContentWrap){const We=ue.formWrapper.hasContentWrap(_),Oe=z;if(We){const Ue=l.resolveDynamicComponent(We);z={default:()=>l.createVNode(Ue,null,Pg(Oe)?Oe:{default:()=>[Oe]})}}}const F=ue.formWrapper.visible,D={[F]:a.value,["onUpdate:"+F]:We=>{a.value=We}},M=ue.formWrapper.buildOnClosedBind(_,S),K=ue.formWrapper.customClass(_),re=`${I.value?"fs-fullscreen":""} ${o.value[K]||""}`,le={[K]:re},ce={fullscreen:I.value},Be={zIndex:o.value.zIndex||e.zIndex},V=l.resolveDynamicComponent(_);return l.createVNode(V,l.mergeProps(o.value,le,D,M,ce,ae.value,Be),z)}}}),Ig=l.defineComponent({name:"FsFormProvider"}),r0=l.defineComponent({...Ig,setup(e){const t=l.ref({});return l.provide("use:form:wrapper",()=>({open(r){const n=r.id||Math.floor(Math.random()*1e6)+"";return new Promise((a,i)=>{t.value[n]={id:n,async onMounted(s){await s.open(r),a(s)},onClosed(){r.id||delete t.value[n]}}})}})),(r,n)=>(l.openBlock(),l.createElementBlock(l.Fragment,null,[l.renderSlot(r.$slots,"default"),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(t.value,a=>(l.openBlock(),l.createBlock(l.unref(Pa),l.mergeProps({key:a.id},a),null,16))),128))],64))}});function Lg(e,t){l.provide("get:columns",()=>e.table.columns),l.provide("update:columns",r=>{t.emit("update:columns",r)}),l.provide("get:crudBinding",()=>e)}function Mg(e,t){const r=l.ref(),n=()=>r.value,a=()=>r.value?r.value.getForm():(Fe.warn("请使用expose.getSearchFormData代替"),{}),i=()=>r.value?r.value.getValidatedForm():(Fe.warn("请使用expose.getSearchValidatedFormData代替"),{});function s({form:o,mergeForm:c=!1}){r.value&&r.value.setForm(o,c)}return{searchRef:r,getSearchRef:n,getSearchFormData:a,setSearchFormData:s,getSearchValidatedFormData:i}}function Vg(e,t,r){return{tabsBinding:l.computed(()=>{var a,i,s,o,c,f,u;if(t.tabs&&t.tabs.show&&t.tabs.name){let h=null;const d={...t.tabs};return(a=t.search)!=null&&a.columns&&((o=(s=(i=t.search)==null?void 0:i.columns[t.tabs.name])==null?void 0:s.component)!=null&&o.dict)&&(h=(u=(f=(c=t.search)==null?void 0:c.columns[t.tabs.name])==null?void 0:f.component)==null?void 0:u.dict,d.value==null&&(d.value=h.value),d.label==null&&(d.label=h.label),d.options==null&&(d.options=h.data||[])),{...d,modelValue:t.search.validatedForm&&t.search.validatedForm[t.tabs.name],"onUpdate:modelValue":p=>{r.emit("tab-change",{[t.tabs.name]:p})}}}return{show:!1}})}}function Os(e,t){if(!e)return{};const r={};return G.forEach(e,(n,a)=>{a.startsWith(t)&&(r[a]=n)}),r}function Ug(e,t,{tableRef:r,containerRef:n}){const a=de.uiContext.get();if(a.table.hasMaxHeight(e.table))return{};if(!a.table.fixedHeaderNeedComputeBodyHeight)return{};const i=l.ref(null);function s(){var d;const c=(d=r==null?void 0:r.value)==null?void 0:d.$el;if(c==null||c.querySelector==null)return;const f=c.querySelector(a.table.headerDomSelector);if(f==null)return;const u=c.getBoundingClientRect().height,h=f.getBoundingClientRect().height;i.value=u-h-2+(e.table.maxHeightAdjust||0),Fe.debug("table max height recomputed ",i.value)}function o(){const c=r.value.$el;if(c==null)return;const f=c.parentNode;new ResizeObserver(function(h){Fe.debug("table resized",h),h.length>0&&h[0].contentRect.height>0&&(s(),setTimeout(()=>{s()},200),setTimeout(()=>{s()},500))}).observe(f)}return l.onMounted(async()=>{await l.nextTick(),await l.nextTick(),o()}),{maxHeightRef:i,computeBodyHeight:s}}function $g(e,t){const r=de.uiContext.get(),n=l.ref(),a=l.ref(),i=l.ref(),{maxHeightRef:s,computeBodyHeight:o}=Ug(e,t,{tableRef:n,containerRef:i}),{merge:c}=Ze(),f=l.toRef(e,"table"),u=l.computed(()=>{let b={};(s==null?void 0:s.value)!=null&&(b=r.table.buildMaxHeight(s.value));const T=ui.dash.omit(f,"loading","columns","columnsMap");return c(b,{...t.attrs,...T})}),h=l.toRef(e,"toolbar"),d=l.computed(()=>Os(t.slots,"cell")),p=l.computed(()=>Os(t.slots,"form")),g=l.computed(()=>Os(t.slots,"search")),m=l.computed(()=>Os(t.slots,"toolbar")),x=l.ref(),v=l.computed(()=>{const b={compact:e.toolbar.compact!==!1};return e.customClass&&(b[e.customClass]=!0),b}),k=l.ref(),w=l.ref(!1);return{tableRef:n,containerRef:i,toolbarRef:a,computedTable:u,computedToolbar:h,computedCellSlots:d,formWrapperRef:x,isFormInner:w,onFormInnerChange:b=>{w.value=b},computedFormSlots:p,computedSearchSlots:g,computedToolbarSlots:m,computeBodyHeight:o,computedClass:v,innerWrapperRef:k}}const Wg=l.defineComponent({name:"FsCrud",inheritAttrs:!1,props:{table:{type:Object,default(){return{}}},data:{type:Array},rowHandle:{type:Object,default(){return{}}},search:{type:Object,default(){return{}}},toolbar:{type:Object,default(){return{}}},actionbar:{type:Object,default(){return{}}},tabs:{type:Object,default(){return{}}},addForm:{type:Object,default(){return{}}},editForm:{type:Object,default(){return{}}},viewForm:{type:Object,default(){return{}}},pagination:{type:Object,default(){return{}}},container:{type:Object,default(){return{}}},customClass:{},form:{type:Object,default(){return{}}},selection:{type:Object,default(){return{show:!1}}}},emits:["update:search","update:compact","update:columns","form-value-change","update:modelValue","tab-change"],setup(e,t){const{ui:r}=de.useUi();Lg(e,t);const n=Mg(),a=Vg(n,e,t),i=$g(e,t);return{ui:r,...n,...i,...a}}}),z3="",Hg={class:"fs-crud-search"},jg={key:0,class:"fs-crud-actionbar"},zg={key:0,class:"fs-crud-toolbar"},Gg={class:"fs-crud-pagination"},Xg={class:"fs-pagination-left"},Kg={class:"fs-pagination"},Yg={class:"fs-pagination-right"};function qg(e,t,r,n,a,i){var h;const s=l.resolveComponent("fs-actionbar"),o=l.resolveComponent("fs-toolbar"),c=l.resolveComponent("fs-tabs-filter"),f=l.resolveComponent("fs-table"),u=l.resolveComponent("fs-form-wrapper");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(((h=e.container)==null?void 0:h.is)||"fs-layout-default"),l.mergeProps({ref:"containerRef",class:"fs-crud-container"},e.container,{class:e.computedClass}),{"header-top":l.withCtx(()=>[l.renderSlot(e.$slots,"header-top")]),"header-bottom":l.withCtx(()=>[l.renderSlot(e.$slots,"header-bottom")]),"header-middle":l.withCtx(()=>[l.renderSlot(e.$slots,"header-middle")]),search:l.withCtx(()=>[l.createElementVNode("div",Hg,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.search.is||"fs-search"),l.mergeProps({ref:"searchRef"},e.search,{slots:e.computedSearchSlots}),null,16,["slots"]))])]),actionbar:l.withCtx(()=>[e.actionbar&&e.actionbar.show!==!1?(l.openBlock(),l.createElementBlock("div",jg,[l.renderSlot(e.$slots,"actionbar-left"),l.createVNode(s,l.normalizeProps(l.guardReactiveProps(e.actionbar)),null,16),l.renderSlot(e.$slots,"actionbar-right")])):l.createCommentVNode("",!0)]),toolbar:l.withCtx(()=>[e.toolbar&&e.toolbar.show!==!1?(l.openBlock(),l.createElementBlock("div",zg,[l.renderSlot(e.$slots,"toolbar-left"),l.createVNode(o,l.mergeProps({ref:"toolbarRef"},e.toolbar,{slots:e.computedToolbarSlots,columns:e.table.columns}),null,16,["slots","columns"]),l.renderSlot(e.$slots,"toolbar-right")])):l.createCommentVNode("",!0)]),tabs:l.withCtx(()=>[e.tabsBinding.show?(l.openBlock(),l.createBlock(c,l.mergeProps({key:0,ref:"tabsRef",class:"fs-tabs"},e.tabsBinding),null,16)):l.createCommentVNode("",!0)]),table:l.withCtx(()=>[l.createVNode(f,l.mergeProps({ref:"tableRef",class:"fs-crud-table"},e.computedTable,{columns:e.table.columns,loading:e.table.loading,"row-handle":e.rowHandle,data:e.data,"cell-slots":e.computedCellSlots}),null,16,["columns","loading","row-handle","data","cell-slots"])]),form:l.withCtx(()=>[l.createElementVNode("div",{ref:"innerWrapperRef",class:l.normalizeClass(["fs-form-wrapper-container",{"fs-form-inner-wrapper":e.isFormInner}])},[l.createVNode(u,{ref:"formWrapperRef",slots:e.computedFormSlots,"inner-wrapper":e.innerWrapperRef,onInnerChange:e.onFormInnerChange,onValueChange:t[0]||(t[0]=d=>e.$emit("form-value-change",d))},null,8,["slots","inner-wrapper","onInnerChange"])],2)]),pagination:l.withCtx(()=>[l.createElementVNode("div",Gg,[l.createElementVNode("div",Xg,[l.renderSlot(e.$slots,"pagination-left")]),l.createElementVNode("div",Kg,[e.pagination.show!==!1?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.pagination.name),l.normalizeProps(l.mergeProps({key:0},e.pagination)),null,16)):l.createCommentVNode("",!0)]),l.createElementVNode("div",Yg,[l.renderSlot(e.$slots,"pagination-right")])])]),"footer-top":l.withCtx(()=>[l.renderSlot(e.$slots,"footer-top")]),"footer-bottom":l.withCtx(()=>[l.renderSlot(e.$slots,"footer-bottom")]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default")]),_:3},16,["class"])}const n0=rt(Wg,[["render",qg]]),Jg=l.defineComponent({name:"FsRowHandle",props:{dropdown:{type:Object},buttons:{type:Object},group:{type:Object},active:{type:String,default:"default"},scope:{}},emits:["handle"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),{t:a}=nr(),i=m=>{const x=e.scope[r.tableColumn.index],v=e.scope[r.tableColumn.row],k={key:m.key,row:v,btn:m,index:x,...e.scope};if(m.click)return m.click(k);t.emit("handle",k)},{doComputed:s}=Pn(),o=l.computed(()=>({dropdown:e.dropdown,buttons:e.buttons,active:e.active,group:e.group})),c=s(()=>o.value,()=>{const m=e.scope[r.tableColumn.index],x=e.scope[r.tableColumn.row];return{...e.scope,index:m,row:x}}),f=l.computed(()=>{let m=null;if(c.value.active==null||c.value.active==="default"){const v={view:{key:"view",text:a("fs.rowHandle.view.text"),title:a("fs.rowHandle.view.text")},edit:{key:"edit",type:"primary",text:a("fs.rowHandle.edit.text"),title:a("fs.rowHandle.edit.text")},remove:{key:"remove",...r.button.colors("danger"),text:a("fs.rowHandle.remove.text"),title:a("fs.rowHandle.remove.text")}};m=n(v,c.value.buttons)}else m=c.value.group[c.value.active];const x=[];return G.forEach(m,(v,k)=>{v.key=k,v.show!==!1&&x.push(v)}),G.sortBy(x,v=>v.order??In.orderDefault)}),u=l.computed(()=>c.value.dropdown==null||c.value.dropdown.atLeast==null||c.value.dropdown.atLeast<=0||f.value.length<=c.value.dropdown.atLeast?0:c.value.dropdown.atLeast||0);function h(m,x){return m.dropdown===!0||u.value>0&&u.value<x}const d=l.computed(()=>{let m=0;for(const x of f.value){if(h(x,m))return!0;m++}return!1});function p(m){for(let x of f.value)if(m===x.key){i(x);return}}const g=l.computed(()=>{const m={};if(r.dropdown.renderMode!=="slot"){const x=f.value,v=[];G.forEach(x,(k,w)=>{k.show!==!1&&h(k,w)&&v.push({[r.dropdown.value]:k.key,[r.dropdown.label]:k.text,title:k.title})}),m.options=v}return{...G.omit(e.dropdown,"more","atLeast"),...r.dropdown.command(p),...m}});return{ui:r,hasDropdownBtn:d,computedHandleBtns:f,doDropdownItemClick:p,computedDropdownAtLeast:u,doClick:i,isDropdownBtn:h,computedDropdownBinding:g}}}),G3="",Zg={class:"fs-row-handle"},Qg={key:0,class:"row-handle-btn fs-handle-row-dropdown"};function ex(e,t,r,n,a,i){const s=l.resolveComponent("fs-button"),o=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("div",Zg,[l.renderSlot(e.$slots,"cell-rowHandle-left",l.normalizeProps(l.guardReactiveProps(e.scope))),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedHandleBtns,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1&&!e.isDropdownBtn(c,f)?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0,class:"row-handle-btn"},c,{onClick:l.withModifiers(u=>e.doClick(c),["stop"])}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128)),l.renderSlot(e.$slots,"cell-rowHandle-middle",l.normalizeProps(l.guardReactiveProps(e.scope))),e.hasDropdownBtn?(l.openBlock(),l.createElementBlock("span",Qg,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdown.name),l.normalizeProps(l.guardReactiveProps(e.computedDropdownBinding)),{[e.ui.dropdown.slotName]:l.withCtx(()=>[e.ui.dropdown.renderMode==="slot"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdownMenu.name),l.normalizeProps(l.mergeProps({key:0},e.ui.dropdownMenu.command(e.doDropdownItemClick))),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedHandleBtns,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1&&e.isDropdownBtn(c,f)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdownItem.name),l.normalizeProps({key:0,[e.ui.dropdownItem.command||""]:c.key}),{default:l.withCtx(()=>[l.createElementVNode("div",l.mergeProps({class:"fs-row-handle-dropdown-item"},c),[c.icon?(l.openBlock(),l.createBlock(o,{key:0,icon:c.icon},null,8,["icon"])):l.createCommentVNode("",!0),l.createTextVNode(" "+l.toDisplayString(c.text||c.title),1)],16)]),_:2},1040)):l.createCommentVNode("",!0)],64))),128))]),_:1},16)):l.createCommentVNode("",!0)]),default:l.withCtx(()=>[l.createVNode(s,l.normalizeProps(l.guardReactiveProps(e.dropdown.more)),null,16)]),_:2},1040))])):l.createCommentVNode("",!0),l.renderSlot(e.$slots,"cell-rowHandle-right",l.normalizeProps(l.guardReactiveProps(e.scope)))])}const a0=rt(Jg,[["render",ex]]);function sa(){return sa=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},sa.apply(this,arguments)}function tx(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,_i(e,t)}function qo(e){return qo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(r){return r.__proto__||Object.getPrototypeOf(r)},qo(e)}function _i(e,t){return _i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,a){return n.__proto__=a,n},_i(e,t)}function rx(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Bs(e,t,r){return rx()?Bs=Reflect.construct.bind():Bs=function(a,i,s){var o=[null];o.push.apply(o,i);var c=Function.bind.apply(a,o),f=new c;return s&&_i(f,s.prototype),f},Bs.apply(null,arguments)}function nx(e){return Function.toString.call(e).indexOf("[native code]")!==-1}function Jo(e){var t=typeof Map=="function"?new Map:void 0;return Jo=function(n){if(n===null||!nx(n))return n;if(typeof n!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t<"u"){if(t.has(n))return t.get(n);t.set(n,a)}function a(){return Bs(n,arguments,qo(this).constructor)}return a.prototype=Object.create(n.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),_i(a,n)},Jo(e)}var ax=/%[sdj%]/g,i0=function(){};typeof process<"u"&&process.env&&process.env.NODE_ENV!=="production"&&typeof window<"u"&&typeof document<"u"&&(i0=function(t,r){typeof console<"u"&&console.warn&&typeof ASYNC_VALIDATOR_NO_WARNING>"u"&&r.every(function(n){return typeof n=="string"})&&console.warn(t,r)});function Zo(e){if(!e||!e.length)return null;var t={};return e.forEach(function(r){var n=r.field;t[n]=t[n]||[],t[n].push(r)}),t}function pr(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=0,i=r.length;if(typeof e=="function")return e.apply(null,r);if(typeof e=="string"){var s=e.replace(ax,function(o){if(o==="%%")return"%";if(a>=i)return o;switch(o){case"%s":return String(r[a++]);case"%d":return Number(r[a++]);case"%j":try{return JSON.stringify(r[a++])}catch{return"[Circular]"}break;default:return o}});return s}return e}function ix(e){return e==="string"||e==="url"||e==="hex"||e==="email"||e==="date"||e==="pattern"}function Dt(e,t){return!!(e==null||t==="array"&&Array.isArray(e)&&!e.length||ix(t)&&typeof e=="string"&&!e)}function sx(e,t,r){var n=[],a=0,i=e.length;function s(o){n.push.apply(n,o||[]),a++,a===i&&r(n)}e.forEach(function(o){t(o,s)})}function s0(e,t,r){var n=0,a=e.length;function i(s){if(s&&s.length){r(s);return}var o=n;n=n+1,o<a?t(e[o],i):r([])}i([])}function ox(e){var t=[];return Object.keys(e).forEach(function(r){t.push.apply(t,e[r]||[])}),t}var o0=function(e){tx(t,e);function t(r,n){var a;return a=e.call(this,"Async Validation Error")||this,a.errors=r,a.fields=n,a}return t}(Jo(Error));function lx(e,t,r,n,a){if(t.first){var i=new Promise(function(d,p){var g=function(v){return n(v),v.length?p(new o0(v,Zo(v))):d(a)},m=ox(e);s0(m,r,g)});return i.catch(function(d){return d}),i}var s=t.firstFields===!0?Object.keys(e):t.firstFields||[],o=Object.keys(e),c=o.length,f=0,u=[],h=new Promise(function(d,p){var g=function(x){if(u.push.apply(u,x),f++,f===c)return n(u),u.length?p(new o0(u,Zo(u))):d(a)};o.length||(n(u),d(a)),o.forEach(function(m){var x=e[m];s.indexOf(m)!==-1?s0(x,r,g):sx(x,r,g)})});return h.catch(function(d){return d}),h}function cx(e){return!!(e&&e.message!==void 0)}function fx(e,t){for(var r=e,n=0;n<t.length;n++){if(r==null)return r;r=r[t[n]]}return r}function l0(e,t){return function(r){var n;return e.fullFields?n=fx(t,e.fullFields):n=t[r.field||e.fullField],cx(r)?(r.field=r.field||e.fullField,r.fieldValue=n,r):{message:typeof r=="function"?r():r,fieldValue:n,field:r.field||e.fullField}}}function c0(e,t){if(t){for(var r in t)if(t.hasOwnProperty(r)){var n=t[r];typeof n=="object"&&typeof e[r]=="object"?e[r]=sa({},e[r],n):e[r]=n}}return e}var f0=function(t,r,n,a,i,s){t.required&&(!n.hasOwnProperty(t.field)||Dt(r,s||t.type))&&a.push(pr(i.messages.required,t.fullField))},ux=function(t,r,n,a,i){(/^\s+$/.test(r)||r==="")&&a.push(pr(i.messages.whitespace,t.fullField))},Ns,hx=function(){if(Ns)return Ns;var e="[a-fA-F\\d:]",t=function(S){return S&&S.includeBoundaries?"(?:(?<=\\s|^)(?="+e+")|(?<="+e+")(?=\\s|$))":""},r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",n="[a-fA-F\\d]{1,4}",a=(`
(?:
(?:`+n+":){7}(?:"+n+`|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:`+n+":){6}(?:"+r+"|:"+n+`|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:`+n+":){5}(?::"+r+"|(?::"+n+`){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:`+n+":){4}(?:(?::"+n+"){0,1}:"+r+"|(?::"+n+`){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:`+n+":){3}(?:(?::"+n+"){0,2}:"+r+"|(?::"+n+`){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:`+n+":){2}(?:(?::"+n+"){0,3}:"+r+"|(?::"+n+`){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:`+n+":){1}(?:(?::"+n+"){0,4}:"+r+"|(?::"+n+`){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::`+n+"){0,5}:"+r+"|(?::"+n+`){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`).replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),i=new RegExp("(?:^"+r+"$)|(?:^"+a+"$)"),s=new RegExp("^"+r+"$"),o=new RegExp("^"+a+"$"),c=function(S){return S&&S.exact?i:new RegExp("(?:"+t(S)+r+t(S)+")|(?:"+t(S)+a+t(S)+")","g")};c.v4=function(w){return w&&w.exact?s:new RegExp(""+t(w)+r+t(w),"g")},c.v6=function(w){return w&&w.exact?o:new RegExp(""+t(w)+a+t(w),"g")};var f="(?:(?:[a-z]+:)?//)",u="(?:\\S+(?::\\S*)?@)?",h=c.v4().source,d=c.v6().source,p="(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)",g="(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*",m="(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))",x="(?::\\d{2,5})?",v='(?:[/?#][^\\s"]*)?',k="(?:"+f+"|www\\.)"+u+"(?:localhost|"+h+"|"+d+"|"+p+g+m+")"+x+v;return Ns=new RegExp("(?:^"+k+"$)","i"),Ns},u0={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},yi={integer:function(t){return yi.number(t)&&parseInt(t,10)===t},float:function(t){return yi.number(t)&&!yi.integer(t)},array:function(t){return Array.isArray(t)},regexp:function(t){if(t instanceof RegExp)return!0;try{return!!new RegExp(t)}catch{return!1}},date:function(t){return typeof t.getTime=="function"&&typeof t.getMonth=="function"&&typeof t.getYear=="function"&&!isNaN(t.getTime())},number:function(t){return isNaN(t)?!1:typeof t=="number"},object:function(t){return typeof t=="object"&&!yi.array(t)},method:function(t){return typeof t=="function"},email:function(t){return typeof t=="string"&&t.length<=320&&!!t.match(u0.email)},url:function(t){return typeof t=="string"&&t.length<=2048&&!!t.match(hx())},hex:function(t){return typeof t=="string"&&!!t.match(u0.hex)}},dx=function(t,r,n,a,i){if(t.required&&r===void 0){f0(t,r,n,a,i);return}var s=["integer","float","array","regexp","object","method","email","number","date","url","hex"],o=t.type;s.indexOf(o)>-1?yi[o](r)||a.push(pr(i.messages.types[o],t.fullField,t.type)):o&&typeof r!==t.type&&a.push(pr(i.messages.types[o],t.fullField,t.type))},mx=function(t,r,n,a,i){var s=typeof t.len=="number",o=typeof t.min=="number",c=typeof t.max=="number",f=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=r,h=null,d=typeof r=="number",p=typeof r=="string",g=Array.isArray(r);if(d?h="number":p?h="string":g&&(h="array"),!h)return!1;g&&(u=r.length),p&&(u=r.replace(f,"_").length),s?u!==t.len&&a.push(pr(i.messages[h].len,t.fullField,t.len)):o&&!c&&u<t.min?a.push(pr(i.messages[h].min,t.fullField,t.min)):c&&!o&&u>t.max?a.push(pr(i.messages[h].max,t.fullField,t.max)):o&&c&&(u<t.min||u>t.max)&&a.push(pr(i.messages[h].range,t.fullField,t.min,t.max))},Ia="enum",px=function(t,r,n,a,i){t[Ia]=Array.isArray(t[Ia])?t[Ia]:[],t[Ia].indexOf(r)===-1&&a.push(pr(i.messages[Ia],t.fullField,t[Ia].join(", ")))},gx=function(t,r,n,a,i){if(t.pattern){if(t.pattern instanceof RegExp)t.pattern.lastIndex=0,t.pattern.test(r)||a.push(pr(i.messages.pattern.mismatch,t.fullField,r,t.pattern));else if(typeof t.pattern=="string"){var s=new RegExp(t.pattern);s.test(r)||a.push(pr(i.messages.pattern.mismatch,t.fullField,r,t.pattern))}}},Ge={required:f0,whitespace:ux,type:dx,range:mx,enum:px,pattern:gx},xx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r,"string")&&!t.required)return n();Ge.required(t,r,a,s,i,"string"),Dt(r,"string")||(Ge.type(t,r,a,s,i),Ge.range(t,r,a,s,i),Ge.pattern(t,r,a,s,i),t.whitespace===!0&&Ge.whitespace(t,r,a,s,i))}n(s)},vx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&Ge.type(t,r,a,s,i)}n(s)},wx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(r===""&&(r=void 0),Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&(Ge.type(t,r,a,s,i),Ge.range(t,r,a,s,i))}n(s)},_x=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&Ge.type(t,r,a,s,i)}n(s)},yx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),Dt(r)||Ge.type(t,r,a,s,i)}n(s)},kx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&(Ge.type(t,r,a,s,i),Ge.range(t,r,a,s,i))}n(s)},Ex=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&(Ge.type(t,r,a,s,i),Ge.range(t,r,a,s,i))}n(s)},bx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(r==null&&!t.required)return n();Ge.required(t,r,a,s,i,"array"),r!=null&&(Ge.type(t,r,a,s,i),Ge.range(t,r,a,s,i))}n(s)},Sx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&Ge.type(t,r,a,s,i)}n(s)},Tx="enum",Fx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i),r!==void 0&&Ge[Tx](t,r,a,s,i)}n(s)},Cx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r,"string")&&!t.required)return n();Ge.required(t,r,a,s,i),Dt(r,"string")||Ge.pattern(t,r,a,s,i)}n(s)},Ax=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r,"date")&&!t.required)return n();if(Ge.required(t,r,a,s,i),!Dt(r,"date")){var c;r instanceof Date?c=r:c=new Date(r),Ge.type(t,c,a,s,i),c&&Ge.range(t,c.getTime(),a,s,i)}}n(s)},Dx=function(t,r,n,a,i){var s=[],o=Array.isArray(r)?"array":typeof r;Ge.required(t,r,a,s,i,o),n(s)},Qo=function(t,r,n,a,i){var s=t.type,o=[],c=t.required||!t.required&&a.hasOwnProperty(t.field);if(c){if(Dt(r,s)&&!t.required)return n();Ge.required(t,r,a,o,i,s),Dt(r,s)||Ge.type(t,r,a,o,i)}n(o)},Rx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Dt(r)&&!t.required)return n();Ge.required(t,r,a,s,i)}n(s)},ki={string:xx,method:vx,number:wx,boolean:_x,regexp:yx,integer:kx,float:Ex,array:bx,object:Sx,enum:Fx,pattern:Cx,date:Ax,url:Qo,hex:Qo,email:Qo,required:Dx,any:Rx};function el(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var t=JSON.parse(JSON.stringify(this));return t.clone=this.clone,t}}}var tl=el(),Ei=function(){function e(r){this.rules=null,this._messages=tl,this.define(r)}var t=e.prototype;return t.define=function(n){var a=this;if(!n)throw new Error("Cannot configure a schema with no rules");if(typeof n!="object"||Array.isArray(n))throw new Error("Rules must be an object");this.rules={},Object.keys(n).forEach(function(i){var s=n[i];a.rules[i]=Array.isArray(s)?s:[s]})},t.messages=function(n){return n&&(this._messages=c0(el(),n)),this._messages},t.validate=function(n,a,i){var s=this;a===void 0&&(a={}),i===void 0&&(i=function(){});var o=n,c=a,f=i;if(typeof c=="function"&&(f=c,c={}),!this.rules||Object.keys(this.rules).length===0)return f&&f(null,o),Promise.resolve(o);function u(m){var x=[],v={};function k(S){if(Array.isArray(S)){var b;x=(b=x).concat.apply(b,S)}else x.push(S)}for(var w=0;w<m.length;w++)k(m[w]);x.length?(v=Zo(x),f(x,v)):f(null,o)}if(c.messages){var h=this.messages();h===tl&&(h=el()),c0(h,c.messages),c.messages=h}else c.messages=this.messages();var d={},p=c.keys||Object.keys(this.rules);p.forEach(function(m){var x=s.rules[m],v=o[m];x.forEach(function(k){var w=k;typeof w.transform=="function"&&(o===n&&(o=sa({},o)),v=o[m]=w.transform(v)),typeof w=="function"?w={validator:w}:w=sa({},w),w.validator=s.getValidationMethod(w),w.validator&&(w.field=m,w.fullField=w.fullField||m,w.type=s.getType(w),d[m]=d[m]||[],d[m].push({rule:w,value:v,source:o,field:m}))})});var g={};return lx(d,c,function(m,x){var v=m.rule,k=(v.type==="object"||v.type==="array")&&(typeof v.fields=="object"||typeof v.defaultField=="object");k=k&&(v.required||!v.required&&m.value),v.field=m.field;function w(T,y){return sa({},y,{fullField:v.fullField+"."+T,fullFields:v.fullFields?[].concat(v.fullFields,[T]):[T]})}function S(T){T===void 0&&(T=[]);var y=Array.isArray(T)?T:[T];!c.suppressWarning&&y.length&&e.warning("async-validator:",y),y.length&&v.message!==void 0&&(y=[].concat(v.message));var O=y.map(l0(v,o));if(c.first&&O.length)return g[v.field]=1,x(O);if(!k)x(O);else{if(v.required&&!m.value)return v.message!==void 0?O=[].concat(v.message).map(l0(v,o)):c.error&&(O=[c.error(v,pr(c.messages.required,v.field))]),x(O);var B={};v.defaultField&&Object.keys(m.value).map(function(I){B[I]=v.defaultField}),B=sa({},B,m.rule.fields);var H={};Object.keys(B).forEach(function(I){var X=B[I],q=Array.isArray(X)?X:[X];H[I]=q.map(w.bind(null,I))});var j=new e(H);j.messages(c.messages),m.rule.options&&(m.rule.options.messages=c.messages,m.rule.options.error=c.error),j.validate(m.value,m.rule.options||c,function(I){var X=[];O&&O.length&&X.push.apply(X,O),I&&I.length&&X.push.apply(X,I),x(X.length?X:null)})}}var b;if(v.asyncValidator)b=v.asyncValidator(v,m.value,S,m.source,c);else if(v.validator){try{b=v.validator(v,m.value,S,m.source,c)}catch(T){console.error==null||console.error(T),c.suppressValidatorError||setTimeout(function(){throw T},0),S(T.message)}b===!0?S():b===!1?S(typeof v.message=="function"?v.message(v.fullField||v.field):v.message||(v.fullField||v.field)+" fails"):b instanceof Array?S(b):b instanceof Error&&S(b.message)}b&&b.then&&b.then(function(){return S()},function(T){return S(T)})},function(m){u(m)},o)},t.getType=function(n){if(n.type===void 0&&n.pattern instanceof RegExp&&(n.type="pattern"),typeof n.validator!="function"&&n.type&&!ki.hasOwnProperty(n.type))throw new Error(pr("Unknown rule type %s",n.type));return n.type||"string"},t.getValidationMethod=function(n){if(typeof n.validator=="function")return n.validator;var a=Object.keys(n),i=a.indexOf("message");return i!==-1&&a.splice(i,1),a.length===1&&a[0]==="required"?ki.required:ki[this.getType(n)]||void 0},e}();Ei.register=function(t,r){if(typeof r!="function")throw new Error("Cannot register a validator by type, validator is not a function");ki[t]=r},Ei.warning=i0,Ei.messages=tl,Ei.validators=ki;function Ox(e){const t={};for(const r in e){const n=e[r].getForm(),a=n.rules||n.rule,i=r.split(".");let s=t;if(a)for(let o=0;o<i.length;o++){const c=i[o];s[c]||(s[c]={type:"object",fields:{}}),o==i.length-1?s[c]=a:s=s[c].fields}}return new Ei(t)}function rl(e,t){G.forEach(e,r=>{r.children?rl(r.children,t):t(r)})}function Bx(e,t){const r=de.uiContext.get();function n(){return e.data?e.data:t.value?t.value[r.table.data]:[]}return{getData:n,insert(a,i){n().splice(a,0,i)},unshift(a){n().unshift(a)},remove(a){n().splice(a,1)},get(a){return n()[a]}}}function Nx(e,t,r){const n=Bx(e,r),a=l.reactive([]);function i(W){return typeof e.rowKey=="string"?W[e.rowKey]:e.rowKey(W)}function s(W){return W[e.editable.rowKey]}function o(W){for(const A in a){const _=a[A],F=_.cells,D=_.rowData;if(W({rowData:D,row:_,cells:F})==="break")return}}function c(W){o(({rowData:A,row:_,cells:F})=>{G.forEach(F,(D,M)=>{W({rowData:A,row:_,cells:F,cell:D,key:M})})})}const{merge:f}=Ze(),u=l.computed(()=>f({enabled:!1,mode:"free",rowKey:"id",addForm:{},editForm:{},exclusive:!0,exclusiveEffect:"cancel",activeTrigger:"onClick",activeDefault:!1,isEditable(W){return!0}},e.editable));function h(W,A,_,F){function D(re){return G.get(W,re)}function M(re,le){G.set(W,re,le)}const K=l.computed(()=>{var re;return((re=F.editable)==null?void 0:re.updateCell)||u.value.updateCell}),J=l.reactive({mode:_<0?"add":"edit",oldValue:void 0,newValue:void 0,loading:!1,isEditing:u.value.activeDefault,activeTrigger:u.value.activeTrigger,column:F,updateCell:K,showAction:!0,isEditable:()=>{var ce;let re=(ce=F==null?void 0:F.editable)==null?void 0:ce.disabled;re instanceof Function&&(re=config.disabled({column:item,editableId:_,row:rowData}));let le=null;return re!=null&&(le=!re),le??(u.value.isEditable({editableId:_,key:A,row:W})||!1)},isChanged:()=>J.newValue!==J.oldValue,getForm:()=>{let re=u.value[J.mode+"Form"];return re==null&&(re=u.value.editForm),re[A]},active:(re={})=>{(re.exclusive??u.value.exclusive)&&((re.exclusiveEffect??u.value.exclusiveEffect)==="save"?S():b()),re.showAction!=null?J.showAction=re.showAction:J.showAction=null,J.isEditing=!0,J.oldValue=D(A);const ce=u.value.editForm[A];ce&&j(ce,W)},inactive:()=>{J.isEditing=!1,J.newValue=D(A)},resume:()=>{J.isEditing&&(J.isEditing=!1,M(A,J.oldValue),delete J.newValue,delete J.oldValue)},cancel:()=>{J.resume()},persist:()=>{J.isEditing=!1,delete J.newValue,delete J.oldValue},save:async()=>{const re=l.unref(J.updateCell);if(re){J.loading=!0;try{const le=await re({editableId:_,row:W,key:A,value:D(A)});le!=null&&W[u.value.rowKey]<0&&(W[u.value.rowKey]=le[u.value.rowKey]),J.persist()}finally{J.loading=!1}}}});return J}function d(W,A){const _={};rl(e.columns,J=>{_[J.key]=h(A,J.key,W,J)});const F=l.computed(()=>Ox(_)),D=i(A),M=D==null||D<0,K=l.reactive({isAdd:M,rowData:A,editableId:W,isEditing:!1,loading:!1,cells:_,validator:F,inactive:()=>{K.isEditing=!1,G.forEach(K.cells,J=>{J.isEditing&&J.inactive()})},active:()=>{K.isEditing=!0,G.forEach(K.cells,J=>{J.active({exclusive:!1})})},persist:()=>{K.isEditing=!1,K.inactive(),delete K.isAdd,G.forEach(K.cells,J=>{J.persist()})},resume:()=>{K.isEditing=!1,G.forEach(K.cells,J=>{J.resume()})},cancel:()=>{K.resume()},validate:async J=>{try{return G.forEach(K.cells,(re,le)=>{re.validateErrors=[]}),J==null&&(J=K.rowData),await K.validator.validate(J),!0}catch(re){const{errors:le,fields:ce}=re;return G.forEach(ce,(Be,V)=>{const We=K.cells[V];We&&(We.validateErrors=Be)}),ce}},getRowData:()=>{const J=G.cloneDeep(K.rowData);return delete J[e.editable.rowKey],delete J.children,J},save:async J=>{const{doSave:re}=J,le=K.rowData,{merge:ce}=Ze();if(await K.validate()!==!0)return;function V(Oe){Oe&&(i(Oe)==null&&console.error("保存接口没有返回rowKey,无法更新该行的id,newRow:",Oe),ce(le,Oe))}K.loading=!0;const We=K.getRowData();try{await re({isAdd:K.isAdd,row:We,setData:V}),K.persist()}finally{K.loading=!1}}});if(l.watch(()=>A,async(J,re,le)=>{await K.validate()},{deep:!0}),A.children&&A.children.length>0)for(const J of A.children){J[e.editable.rowKey]||(J[e.editable.rowKey]=g());const re=J[e.editable.rowKey];a[re]=d(re,J)}return M&&K.active(),K}let p=0;function g(){return p++,p}function m(W){W==null&&(W=n.getData()),G.forOwn(a,(A,_)=>{delete a[_]}),G.forEach(W,A=>{A[e.editable.rowKey]||(A[e.editable.rowKey]=g());const _=A[e.editable.rowKey];a[_]=d(_,A)}),u.value.onSetup&&u.value.onSetup()}function x(W){const A=e.editable.rowKey,_=[];for(const F of W){const D={[A]:F[A]};F.children&&F.children.length&&(D.children=x(F.children)),_.push(D)}return _}l.watch(()=>{const W=e.data;let A=[];return W!=null&&W instanceof Array&&(A=x(W)),JSON.stringify(A)},(W,A)=>{u.value.enabled&&m(e.data)},{immediate:!0}),l.watch(()=>u.value.enabled,W=>{var A;W&&(((A=n.getData())==null?void 0:A.length)>0&&m(),u.value.onEnabled&&u.value.onEnabled({...u.value}))},{immediate:!0}),l.watch(()=>u.value.mode,()=>{u.value.onEnabled&&u.value.onEnabled({...u.value})});function v(W,A){var _;if(A!=null)return(_=a[W])==null?void 0:_.cells[A]}function k(W={}){c(({cell:A})=>{A.active({...W,exclusive:!1})})}function w(){c(({cell:W})=>{W.isEditing&&W.inactive()})}async function S(){c(({cell:W})=>{W.isEditing&&W.save()})}function b(){c(({cell:W})=>{W.isEditing&&W.cancel()})}function T(){w(),o(({row:W})=>{delete W.isAdd}),c(({cell:W})=>{delete W.newValue,delete W.oldValue})}function y(){c(({cell:W})=>{W.resume()})}function O(){let W=!1;return o(({cells:A})=>{G.forEach(A,_=>{if(_.isChanged())return W=!0,"break"})}),W}let B=0;function H(W,A){rl(W,_=>{j(_,A)})}function j(W,A){const _=G.get(A,W.key),F=l.unref(W.value);F!=null&&_==null&&G.set(A,W.key,F)}async function I(W={row:void 0,active:!0}){const A=W.row||{[u.value.rowKey]:--B};H(u.value.addForm,A),e.editable.addRow?await e.editable.addRow(n.getData(),A):n.unshift(A)}function X(W,A){for(let _=0;_<A.length;_++){const F=A[_];if(s(F)===W)return G.remove(A,F),!0;if(F.children&&F.children.length>0&&X(W,F.children))return}return!1}function q(W){delete a[W],X(W,n.getData())}function te(W){const{cols:A}=W;o(({cells:_})=>{G.forEach(A,F=>{_[F].active({...W,exclusive:!1})})})}function ae(W){return a[W]}async function oe(){const W={};let A=!1;for(const _ in a){const F=a[_];await F.validate()!=!0&&(W[F.editableId]=W,A=!0)}return A?W:!0}function ue(W){for(const A of W)delete A[e.editable.rowKey],A.children&&A.children.length>0&&ue(A.children);return W}function z(W){return W==null&&(W=G.cloneDeep(n.getData())),W==null?[]:ue(W)}return{editable:{options:u,setupEditable:m,inactive:w,active:k,persist:T,saveEach:S,cancelAll:b,resume:y,addRow:I,removeRow:q,getEditableRow:ae,activeCols:te,hasDirty:O,getEditableCell:v,eachRows:o,eachCells:c,validate:oe,getCleanTableData:z}}}const X3="";function Px(e){const t=(n,a)=>G.get(e,`value[${n}].${a}`);l.provide("componentRef:get",t);const r=(n,a,i)=>G.set(e,`value[${n}].${a}`,i);return l.provide("componentRef:set",r),{getter:t,setter:r}}function Ix({props:e,ui:t,sortedColumns:r,renderRowHandle:n,renderCellComponent:a}){l.resolveDynamicComponent(t.table.name);const i=l.resolveDynamicComponent(t.tableColumn.name),s=l.resolveDynamicComponent(t.tableColumnGroup.name);t.tableColumn;const o={};return o.default=()=>{const c=[],f=u=>{const h={},d="cell_"+u.key;let p=i;if(u.children)h.default=()=>{const m=[];return G.forEach(u.children,x=>{x.show!==!1&&m.push(f(x))}),m},p=s;else if(u.type!=null){Fe.debug("cell render column.type:",u.type);const m=e.cellSlots&&e.cellSlots[d];m&&(h.default=m)}else h.default=m=>a(u,m);const g={...u};return delete g.children,l.createVNode(p,l.mergeProps({ref:"tableColumnRef"},g,{label:u.title,prop:u.key,dataIndex:u.key}),h)};if(G.forEach(r,u=>{u.show!==!1&&c.push(f(u))}),e.rowHandle&&e.rowHandle.show!==!1){const u={default:n};c.push(l.createVNode(i,l.mergeProps({ref:"tableColumnRef"},e.rowHandle,{label:e.rowHandle.title,prop:e.rowHandle.key||"rowHandle"}),u))}return c},e.slots&&G.forEach(e.slots,(c,f)=>{o[f]=c}),o}function h0(e){var c;const{props:t,renderRowHandle:r,renderCellComponent:n,sortedColumns:a}=e,{ui:i}=de.useUi(),s=a??{},o=[];for(const f in s){const u=s[f];if(u.show===!1)continue;const h={...u};if(h.dataIndex=u.key,o.push(h),u.children!=null){const d={...e,sortedColumns:u.children};delete d.renderRowHandle,h.children=h0(d)}else if(u.type==null){const d=h[i.table.renderMethod],p={...h};delete p[i.table.renderMethod],d?h[i.table.renderMethod]=(g,m,x)=>{const v=i.table.rebuildRenderScope(g,m,x);return d(v,()=>n(p,v))}:h[i.table.renderMethod]=(g,m,x)=>{const v=i.table.rebuildRenderScope(g,m,x);return n(p,v)}}}if(r&&((c=t.rowHandle)==null?void 0:c.show)!==!1){const f={key:"_rowHandle",...t.rowHandle};f[i.table.renderMethod]=(u,h,d)=>{const p=i.table.rebuildRenderScope(u,h,d);return r(p)},o.push(f)}return Fe.debug("table columns:",o),o}const d0=l.defineComponent({name:"FsTable",inheritAttrs:!1,props:{slots:{type:Object},cellSlots:{type:Object},columns:{type:Object,default:void 0},rowHandle:{type:Object},show:{type:Boolean,default:!0},data:{type:Array},conditionalRender:{type:Object},editable:{type:Object,default(){return{}}},loading:{type:Boolean,default:!1},sort:{type:Object},request:{type:Object},rowKey:{type:[String,Function],default:"id"}},emits:["row-handle","value-change","pagination-change","filter-change","sort-change","data-change"],setup(e,t){const r=l.ref(),n=l.ref([]);Px(n);const a=(b,T)=>{if(!T||b==null||b>n.value.length)return;const O=n.value[b][T];return O==null?void 0:O.getTargetRef()},{ui:i}=de.useUi(),s=l.getCurrentInstance();l.watch(()=>e.data,b=>{i.table.scrollTo({top:0,tableRef:r,fsTableRef:s}),t.emit("data-change",{data:b})});const o=l.resolveDynamicComponent(i.table.name),c=i.tableColumn,f=Nx(e,t,r),u=(b,T)=>{const y=T[c.row],O=y,B=T[i.tableColumn.index];return T.index=B,{...T,key:b.key,value:G.get(y,b.key),row:y,form:O,getComponentRef:H=>a(B,H)}};function h(b){t.emit("row-handle",b)}const d=i.table.onChange({onSortChange:b=>{t.emit("sort-change",b)},onFilterChange:b=>{t.emit("filter-change",b)},onPagination:()=>{},bubbleUp:b=>{b(t.attrs)}}),p=b=>{b.index=b[i.tableColumn.index];const T="cell-rowHandle",y={};if(e.cellSlots)for(const O in e.cellSlots)O.startsWith(T)&&(y[O]=e.cellSlots[O]);return l.createVNode(l.resolveComponent("fs-row-handle"),l.mergeProps(e.rowHandle,{scope:b,onHandle:h}),y)},g=(b,T)=>{var te,ae,oe,ue,z,W,A,_,F,D,M,K;const y="cell_"+b.key,O=T.row=T[c.row],B=u(b,T),H={modelValue:G.get(T[c.row],b.key),"onUpdate:modelValue":J=>{G.set(T[c.row],b.key,J),t.emit("value-change",B),b.valueChange&&b.valueChange(B)}},j=J=>{const re=T[i.tableColumn.index],le=b.key;let ce=n.value[re];ce==null&&(n.value[re]=ce={}),ce[le]=J},I=T[i.tableColumn.index],X=O[(te=e.editable)==null?void 0:te.rowKey],q=e.cellSlots&&e.cellSlots[y];if(((ue=(oe=(ae=f.editable)==null?void 0:ae.options)==null?void 0:oe.value)==null?void 0:ue.enabled)===!0){const J=f.editable.getEditableCell(X,b.key);return l.createVNode(l.resolveComponent("fs-editable-cell"),l.mergeProps({ref:j,key:b.key,columnKey:b.key,index:I,editableId:X,item:b,editableCell:J,editableOpts:(W=(z=f.editable)==null?void 0:z.options)==null?void 0:W.value,scope:B,slots:q,disabled:(F=(_=(A=f.editable)==null?void 0:A.options)==null?void 0:_.value)==null?void 0:F.disabled,readonly:(K=(M=(D=f.editable)==null?void 0:D.options)==null?void 0:M.value)==null?void 0:K.readonly},H),null)}else return l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:j,key:b.key,item:b,scope:B,slots:q},H,{conditionalRender:e.conditionalRender}),null)},{expose:m}=t;m({tableRef:r,componentRefs:n,getComponentRef:a,...f});const x=i.table.renderMode,v=l.computed(()=>({[i.table.data]:e.data})),{merge:k}=Ze(),w=l.computed(()=>k({},t.attrs,d)),S=l.computed(()=>e.columns);if(x==="slot"){const b=l.computed(()=>Ix({props:e,ui:i,sortedColumns:S.value,renderRowHandle:p,renderCellComponent:g}));return()=>{if(e.show===!1)return;const T=l.createVNode(o,l.mergeProps({ref:r,loading:e.loading,rowKey:e.rowKey},w.value,v.value),b.value);if(typeof i.table.vLoading=="string"){const y=l.resolveDirective(i.table.vLoading);return l.withDirectives(T,[[y,e.loading]])}return T}}else{const b=l.computed(()=>h0({props:e,ctx:t,ui:i,getContextFn:u,sortedColumns:S.value,componentRefs:n,renderRowHandle:p,renderCellComponent:g,columns:e.columns}));return()=>{if(e.show!==!1)return l.createVNode(o,l.mergeProps({ref:r,loading:e.loading,rowKey:e.rowKey},w.value,{columns:b.value},v.value),e.slots)}}}}),m0=l.defineComponent({name:"FsCell",props:{item:{},scope:{default(){return{}}},slots:{},conditionalRender:{type:Object}},setup(e,t){const{doComputed:r}=Pn(),i=r(()=>e.item.component,()=>e.scope),s=l.ref();function o(){return s.value.getTargetRef()}t.expose({getTargetRef:o,targetRef:s});const c=l.computed(()=>{let u=e.item.showTitle;const h=e.scope.value;return u===!0&&(u=h),u}),f=l.computed(()=>h=>l.createVNode("span",{class:"fs-cell",title:c.value},[h]));return()=>{var g,m;const u=e.scope.value,h=f.value,d={...e.scope,props:e.item},p=e.item.conditionalRender??e.conditionalRender;if(p&&p.match&&p.match(d))return h(p.render(d));if(e.slots)return h(e.slots(d));if(e.item.formatter)return h(e.item.formatter(d));if(e.item.cellRender)return h(e.item.cellRender(d));if(e.item.render)console.warn("column.render 配置已废弃，请使用column.cellRender代替");else return(g=i.value)!=null&&g.name?((m=i.value)==null?void 0:m.show)===!1?void 0:l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({title:c.value,ref:s},i.value,{scope:d}),null):h(G.toString(u))}}}),p0=l.defineComponent({name:"FsEditableCell",inheritAttrs:!1,props:{item:{},scope:{},index:{},editableId:{},columnKey:{},editableCell:{type:Object},editableOpts:{type:Object},disabled:{},readonly:{}},setup(e,t){de.uiContext.get();const{doComputed:r}=Pn();if(e.index===-1)return()=>{};const a=r(()=>{var p;return(p=e.editableCell)==null?void 0:p.getForm()},()=>e.scope),i=l.computed(()=>{var p;return a.value&&a.value.show!==!1&&((p=e.editableCell)==null?void 0:p.isEditable())});function s(p){p&&i.value&&e.editableCell.active()}async function o(){await e.editableCell.save()}function c(){e.editableCell.cancel()}const f=l.computed(()=>{var p;return((p=e.editableOpts)==null?void 0:p.mode)==="cell"&&e.editableCell.showAction!==!1}),u=l.computed(()=>e.editableCell.isChanged&&e.editableCell.isChanged()),h=()=>e.scope,d={default:()=>l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:"targetRef",item:e.item,scope:e.scope},t.attrs),null),edit:()=>{var g,m;let p=null;return(g=e.editableCell)!=null&&g.isEditing&&(a.value.blank===!1||((m=a.value.component)==null?void 0:m.show)===!1?p=null:a.value.conditionalRender&&a.value.conditionalRender.match&&a.value.conditionalRender.match(h())?p=l.createVNode(l.resolveComponent("fs-render"),l.mergeProps({"render-func":a.value.conditionalRender.render,scope:h()},t.attrs),null):a.value.render?p=l.createVNode(l.resolveComponent("fs-render"),l.mergeProps({"render-func":a.value.render,scope:h()},t.attrs),null):p=l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({ref:"targetInputRef"},a.value.component,t.attrs),null)),p}};return()=>{var m;if(!i.value||e.disabled||e.readonly)return l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:"targetRef",item:e.item,scope:e.scope},t.attrs),null);const p=e.editableCell,g=e.editableOpts.mode==="cell"?(m=e.editableOpts)==null?void 0:m.activeTrigger:!1;return l.createVNode(l.resolveComponent("fs-editable"),{ref:"editableRef",class:"fs-editable-cell",editing:p==null?void 0:p.isEditing,showAction:f.value,dirty:u.value,"onUpdate:editing":s,onSubmit:o,onCancel:c,loading:p==null?void 0:p.loading,trigger:g,validateErrors:p==null?void 0:p.validateErrors},d)}},methods:{getTargetRef(){var e;return((e=this.$refs.targetInputRef)==null?void 0:e.getTargetRef())||this.$refs.targetRef}}}),Lx={class:"fs-editable"},Mx={class:"fs-editable-input"},Vx={key:0,class:"fs-editable-dirty"},Ux={key:0,class:"fs-editable-action fs-editable-icon"},$x={class:"fs-editable-input"},Wx={class:"fs-editable-action"},Hx={class:"error-icon"},g0=l.defineComponent({__name:"fs-editable",props:{disabled:{type:Boolean,default:!1},editing:{type:Boolean,default:!1},dirty:{type:Boolean,default:!1},trigger:{type:[String,Boolean],default:"onClick"},loading:{type:Boolean,default:!1},showAction:{type:Boolean,default:!0},validateErrors:{default:()=>[]}},emits:["update:editing","submit","cancel"],setup(e,{emit:t}){const r=e,{ui:n}=de.useUi(),a=l.computed(()=>r.trigger?{[r.trigger]:()=>{t("update:editing",!0)}}:{});function i(){t("submit")}function s(){t("cancel")}function o(){var f;return((f=r.validateErrors)==null?void 0:f.length)>0}function c(){var f,u;if(((f=r.validateErrors)==null?void 0:f.length)!==0)return(u=r.validateErrors)==null?void 0:u.map(h=>h.message).join(",")}return(f,u)=>{const h=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("div",Lx,[!f.editing||f.disabled?(l.openBlock(),l.createElementBlock("div",l.mergeProps({key:0,class:"fs-editable-inner fs-editable-pointer"},a.value),[l.createElementVNode("div",Mx,[f.dirty?(l.openBlock(),l.createElementBlock("div",Vx)):l.createCommentVNode("",!0),l.renderSlot(f.$slots,"default")]),f.trigger&&!f.disabled?(l.openBlock(),l.createElementBlock("div",Ux,[l.createVNode(h,{icon:l.unref(n).icons.edit},null,8,["icon"])])):l.createCommentVNode("",!0)],16)):(l.openBlock(),l.createElementBlock("div",{key:1,class:l.normalizeClass(["fs-editable-inner",{"fs-validate-error":o()}])},[l.createElementVNode("div",$x,[l.renderSlot(f.$slots,"edit")]),l.createElementVNode("div",Wx,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(n).tooltip.name),null,{[l.unref(n).tooltip.content]:l.withCtx(()=>[l.createElementVNode("span",Hx,l.toDisplayString(c()),1)]),[l.unref(n).tooltip.trigger]:l.withCtx(()=>[l.createVNode(h,{class:l.normalizeClass({hidden:!o(),"error-icon":!0}),size:"mini",icon:l.unref(n).icons.info},null,8,["class","icon"])]),_:2},1024)),f.showAction?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[f.loading?(l.openBlock(),l.createBlock(h,{key:0,size:"mini",spin:!0,icon:l.unref(n).icons.refresh},null,8,["icon"])):(l.openBlock(),l.createBlock(h,{key:1,size:"mini",icon:l.unref(n).icons.check,onClick:i},null,8,["icon"])),l.createVNode(h,{class:l.normalizeClass({hidden:f.loading}),size:"mini",icon:l.unref(n).icons.close,onClick:s},null,8,["class","icon"])],64)):l.createCommentVNode("",!0)])],2))])}}}),K3="",jx=l.defineComponent({name:"FsActionbar",props:{buttons:{}},emits:["action"],setup(e,t){function r(a,i,s){const o={key:a,btn:i,$event:s};if(i.click){i.click(o);return}if(i.onClick){i.onClick(o);return}t.emit("action",o)}const n=l.computed(()=>{let a=[];for(let s in e.buttons)a.push({...e.buttons[s],_key:s});a=G.sortBy(a,s=>s.order??In.orderDefault);const i={};return a.forEach(s=>{let o=s._key;delete s._key,i[o]=s}),i});return{onClick:r,computedButtons:n}}}),Y3="",zx={class:"fs-actionbar"};function Gx(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",zx,[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(o,c)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c},[o.show!==!1?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0},o,{onClick:f=>e.onClick(c,o,f)}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))])}const x0=rt(jx,[["render",Gx]]);class Xx{constructor(){ke(this,"valueChange");ke(this,"mergeForm")}}const nl="ColumnsFilterContext",Kx=l.defineComponent({__name:"index",props:{container:{default:()=>({is:"fs-columns-filter-layout-default"})},is:{},show:{type:Boolean},mode:{default:"default"},columns:{},originalColumns:{},storage:{type:[Boolean,String],default:!0},text:{}},emits:["update:columns","update:show"],setup(e,{expose:t,emit:r}){const n=e,{t:a}=nr(),i=de.uiContext.get(),s=l.ref(!1),o=()=>{s.value=!0},c=l.computed(()=>g(n.originalColumns)),f=l.ref([]),{merge:u}=Ze(),h=l.computed(()=>{const q={title:a("fs.toolbar.columnFilter.title"),fixed:a("fs.toolbar.columnFilter.fixed"),order:a("fs.toolbar.columnFilter.order"),reset:a("fs.toolbar.columnFilter.reset"),confirm:a("fs.toolbar.columnFilter.confirm"),unnamed:a("fs.toolbar.columnFilter.unnamed")};return u(q,n.text),q});function d(q){return{key:q.key,title:q.title,fixed:q.fixed??!1,show:q.show??!0,__show:q.columnSetShow!==!1,__disabled:q.columnSetDisabled??!1}}function p(q){const te={};return G.forEach(q,ae=>{te[ae.key]=ae}),te}function g(q){const te={};return G.forEach(q,ae=>{const oe=d(ae);if(ae.children){const ue=g(ae.children);for(let z in ue)te[z]=ue[z]}else te[oe.key]=oe}),te}function m(q){const te=[];return G.forEach(q,ae=>{const oe=d(ae);if(ae.children){const ue=m(ae.children);for(let z of ue)te.push(z)}else te.push(oe)}),te}function x(q){f.value=m(q)}function v(){f.value=m(n.originalColumns),k(!0),H()}function k(q=!1){q||O(f.value);const te=G.cloneDeep(f.value);te.forEach(ae=>{ae&&(delete ae.__disabled,delete ae.__show)}),b(te),s.value=!1}l.provide(nl,{originalColumns:c,currentColumns:f,text:h,active:s,submit:k,reset:v});function w(){k(!1),r("update:show",!1)}function S(){v(),r("update:show",!1)}function b(q){r("update:columns",p(q))}const T=l.ref();function y(){if(T.value==null){const q=Gm.useRoute();T.value=new Yc({$router:q,tableName:"columnsFilter",keyType:n.storage})}return T.value}function O(q){if(n.storage===!1)return;const te=[];for(let ae=0;ae<q.length;ae++){const oe=q[ae];te.push(oe)}y().updateTableValue(te)}function B(){if(n.storage!==!1)return y().getTableValue()}function H(){y().clearTableValue()}function j(q){const te=[];G.forEach(q,oe=>{const ue=G.pick(oe,"key","__show","__disabled");te.push(JSON.stringify(ue))}),te.sort();let ae="";for(const oe of te)ae+=oe;return ae}l.watch(()=>n.columns,q=>{x(q)}),(()=>{x(n.columns);const q=B();if(q){const te=j(q);if(j(c.value)!==te)return;const oe=[];for(const ue of q){const z=f.value.find(W=>W.key===ue.key);z&&(z.fixed=ue.fixed,z.show=ue.show,oe.push(z))}f.value=oe,l.nextTick(()=>{k(!0)})}})(),t({start:o,original:c,columns:f});function X(q){return q.label||q.title||q.key||h.value.unnamed}return(q,te)=>{var oe;const ae=l.resolveComponent("fs-button");return q.mode==="simple"?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).row.name),{class:"fs-table-columns-filter-simple"},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(f.value,(ue,z)=>{var W;return l.withDirectives((l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).col.name),{key:z,span:6},{default:l.withCtx(()=>{var A;return[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).checkbox.name),l.normalizeProps({[l.unref(i).checkbox.modelValue]:ue.show,["onUpdate:"+l.unref(i).checkbox.modelValue]:_=>ue.show=_,disabled:((A=c.value[ue.key])==null?void 0:A.__disabled)===!0,class:"item-label",title:X(ue)}),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(X(ue)),1)]),_:2},1040,["disabled","title"]))]}),_:2},1024)),[[l.vShow,((W=c.value[ue.key])==null?void 0:W.__show)!==!1]])}),128))]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).divider.name))),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).row.name),null,{default:l.withCtx(()=>[l.createVNode(ae,{style:{"margin-right":"5px"},type:"primary",icon:l.unref(i).icons.check,text:h.value.confirm,onClick:te[0]||(te[0]=ue=>w())},null,8,["icon","text"]),l.createVNode(ae,{icon:l.unref(i).icons.refresh,text:h.value.reset,onClick:S},null,8,["icon","text"])]),_:1}))],64)):(l.openBlock(),l.createBlock(l.resolveDynamicComponent(((oe=q.container)==null?void 0:oe.is)||"fs-columns-filter-layout-default"),l.normalizeProps(l.mergeProps({key:1},q.container)),{buttons:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).row.name),{class:"fs-drawer-footer",gutter:10},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).col.name),{span:12},{default:l.withCtx(()=>[l.createVNode(ae,{icon:l.unref(i).icons.refresh,text:h.value.reset,block:"",onClick:v},null,8,["icon","text"])]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).col.name),{span:12},{default:l.withCtx(()=>[l.createVNode(ae,{type:"primary",icon:l.unref(i).icons.check,text:h.value.confirm,block:"",onClick:te[1]||(te[1]=ue=>k(!1))},null,8,["icon","text"])]),_:1}))]),_:1}))]),_:1},16))}}}),q3="",Yx=l.defineComponent({name:"FsToolbar",components:{FsTableColumnsFilter:Kx},props:{buttons:{type:Object},compact:{type:Boolean,default:!0},columns:{type:Object,default:void 0},storage:{type:[String,Boolean],default:!0},slots:{},columnsFilter:{type:Object}},emits:["update:columns"],setup(e,t){nr();const r=l.ref(),{ui:n}=de.useUi(),{merge:a}=Ze(),i=l.computed(()=>{const c={columns:{click:()=>{r.value.start()}}};a(c,e.buttons);let f=[];for(let h in c)f.push({...c[h],_key:h});f=G.sortBy(f,h=>h.order??In.orderDefault);const u={};return f.forEach(h=>{let d=h._key;delete h._key,u[d]=h}),u}),s=l.ref(!1);return{ui:n,columnsFilterRef:r,computedButtons:i,popoverVisible:s,handleSimpleClick:()=>{n.type!=="element"&&(s.value=!s.value)}}}}),J3="",qx={class:"fs-toolbar"};function Jx(e,t,r,n,a,i){var o;const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",qx,[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(c,f)=>{var u;return l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[f==="columns"&&e.columnsFilter&&((u=e.columnsFilter)==null?void 0:u.mode)==="simple"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.popover.name),l.normalizeProps({key:0,[e.ui.popover.visible]:e.popoverVisible,["onUpdate:"+e.ui.popover.visible]:t[2]||(t[2]=h=>e.popoverVisible=h),"display-directive":"show",placement:"bottom",width:760,trigger:"click"}),{[e.ui.popover.triggerSlotName]:l.withCtx(()=>[l.createVNode(s,l.mergeProps(c,{onClick:e.handleSimpleClick}),null,16,["onClick"])]),[e.ui.popover.contentSlotName]:l.withCtx(()=>[e.columns?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.columnsFilter.is||"fs-table-columns-filter"),l.mergeProps({key:0,ref_for:!0,ref:"columnsFilterRef",show:e.popoverVisible,"onUpdate:show":t[0]||(t[0]=h=>e.popoverVisible=h),mode:"simple"},e.columnsFilter,{columns:e.columns,storage:e.storage,"onUpdate:columns":t[1]||(t[1]=h=>e.$emit("update:columns",h))}),null,16,["show","columns","storage"])):l.createCommentVNode("",!0)]),_:2},1040)):(l.openBlock(),l.createBlock(s,l.mergeProps({key:1},c,{onClick:h=>c.click()}),null,16,["onClick"]))],64)):l.createCommentVNode("",!0)],64)}),128)),e.columns&&((o=e.columnsFilter)==null?void 0:o.mode)!=="simple"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.columnsFilter.is||"fs-table-columns-filter"),l.mergeProps({key:0,ref:"columnsFilterRef"},e.columnsFilter,{columns:e.columns,storage:e.storage,"onUpdate:columns":t[3]||(t[3]=c=>e.$emit("update:columns",c))}),null,16,["columns","storage"])):l.createCommentVNode("",!0)])}const v0=rt(Yx,[["render",Jx]]);/**!
 * Sortable 1.14.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */function w0(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),r.push.apply(r,n)}return r}function Qr(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?w0(Object(r),!0).forEach(function(n){Zx(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):w0(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function Ps(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Ps=function(t){return typeof t}:Ps=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ps(e)}function Zx(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function wn(){return wn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},wn.apply(this,arguments)}function Qx(e,t){if(e==null)return{};var r={},n=Object.keys(e),a,i;for(i=0;i<n.length;i++)a=n[i],!(t.indexOf(a)>=0)&&(r[a]=e[a]);return r}function ev(e,t){if(e==null)return{};var r=Qx(e,t),n,a;if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],!(t.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var tv="1.14.0";function _n(e){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(e)}var yn=_n(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),bi=_n(/Edge/i),_0=_n(/firefox/i),Si=_n(/safari/i)&&!_n(/chrome/i)&&!_n(/android/i),y0=_n(/iP(ad|od|hone)/i),rv=_n(/chrome/i)&&_n(/android/i),k0={capture:!1,passive:!1};function Je(e,t,r){e.addEventListener(t,r,!yn&&k0)}function Xe(e,t,r){e.removeEventListener(t,r,!yn&&k0)}function Is(e,t){if(t){if(t[0]===">"&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch{return!1}return!1}}function nv(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function en(e,t,r,n){if(e){r=r||document;do{if(t!=null&&(t[0]===">"?e.parentNode===r&&Is(e,t):Is(e,t))||n&&e===r)return e;if(e===r)break}while(e=nv(e))}return null}var E0=/\s+/g;function gr(e,t,r){if(e&&t)if(e.classList)e.classList[r?"add":"remove"](t);else{var n=(" "+e.className+" ").replace(E0," ").replace(" "+t+" "," ");e.className=(n+(r?" "+t:"")).replace(E0," ")}}function Ae(e,t,r){var n=e&&e.style;if(n){if(r===void 0)return document.defaultView&&document.defaultView.getComputedStyle?r=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(r=e.currentStyle),t===void 0?r:r[t];!(t in n)&&t.indexOf("webkit")===-1&&(t="-webkit-"+t),n[t]=r+(typeof r=="string"?"":"px")}}function La(e,t){var r="";if(typeof e=="string")r=e;else do{var n=Ae(e,"transform");n&&n!=="none"&&(r=n+" "+r)}while(!t&&(e=e.parentNode));var a=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return a&&new a(r)}function b0(e,t,r){if(e){var n=e.getElementsByTagName(t),a=0,i=n.length;if(r)for(;a<i;a++)r(n[a],a);return n}return[]}function tn(){var e=document.scrollingElement;return e||document.documentElement}function Rt(e,t,r,n,a){if(!(!e.getBoundingClientRect&&e!==window)){var i,s,o,c,f,u,h;if(e!==window&&e.parentNode&&e!==tn()?(i=e.getBoundingClientRect(),s=i.top,o=i.left,c=i.bottom,f=i.right,u=i.height,h=i.width):(s=0,o=0,c=window.innerHeight,f=window.innerWidth,u=window.innerHeight,h=window.innerWidth),(t||r)&&e!==window&&(a=a||e.parentNode,!yn))do if(a&&a.getBoundingClientRect&&(Ae(a,"transform")!=="none"||r&&Ae(a,"position")!=="static")){var d=a.getBoundingClientRect();s-=d.top+parseInt(Ae(a,"border-top-width")),o-=d.left+parseInt(Ae(a,"border-left-width")),c=s+i.height,f=o+i.width;break}while(a=a.parentNode);if(n&&e!==window){var p=La(a||e),g=p&&p.a,m=p&&p.d;p&&(s/=m,o/=g,h/=g,u/=m,c=s+u,f=o+h)}return{top:s,left:o,bottom:c,right:f,width:h,height:u}}}function S0(e,t,r){for(var n=Vn(e,!0),a=Rt(e)[t];n;){var i=Rt(n)[r],s=void 0;if(r==="top"||r==="left"?s=a>=i:s=a<=i,!s)return n;if(n===tn())break;n=Vn(n,!1)}return!1}function Ma(e,t,r,n){for(var a=0,i=0,s=e.children;i<s.length;){if(s[i].style.display!=="none"&&s[i]!==De.ghost&&(n||s[i]!==De.dragged)&&en(s[i],r.draggable,e,!1)){if(a===t)return s[i];a++}i++}return null}function al(e,t){for(var r=e.lastElementChild;r&&(r===De.ghost||Ae(r,"display")==="none"||t&&!Is(r,t));)r=r.previousElementSibling;return r||null}function Ar(e,t){var r=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)e.nodeName.toUpperCase()!=="TEMPLATE"&&e!==De.clone&&(!t||Is(e,t))&&r++;return r}function T0(e){var t=0,r=0,n=tn();if(e)do{var a=La(e),i=a.a,s=a.d;t+=e.scrollLeft*i,r+=e.scrollTop*s}while(e!==n&&(e=e.parentNode));return[t,r]}function av(e,t){for(var r in e)if(e.hasOwnProperty(r)){for(var n in t)if(t.hasOwnProperty(n)&&t[n]===e[r][n])return Number(r)}return-1}function Vn(e,t){if(!e||!e.getBoundingClientRect)return tn();var r=e,n=!1;do if(r.clientWidth<r.scrollWidth||r.clientHeight<r.scrollHeight){var a=Ae(r);if(r.clientWidth<r.scrollWidth&&(a.overflowX=="auto"||a.overflowX=="scroll")||r.clientHeight<r.scrollHeight&&(a.overflowY=="auto"||a.overflowY=="scroll")){if(!r.getBoundingClientRect||r===document.body)return tn();if(n||t)return r;n=!0}}while(r=r.parentNode);return tn()}function iv(e,t){if(e&&t)for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function il(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}var Ti;function F0(e,t){return function(){if(!Ti){var r=arguments,n=this;r.length===1?e.call(n,r[0]):e.apply(n,r),Ti=setTimeout(function(){Ti=void 0},t)}}}function sv(){clearTimeout(Ti),Ti=void 0}function C0(e,t,r){e.scrollLeft+=t,e.scrollTop+=r}function A0(e){var t=window.Polymer,r=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):r?r(e).clone(!0)[0]:e.cloneNode(!0)}var xr="Sortable"+new Date().getTime();function ov(){var e=[],t;return{captureAnimationState:function(){if(e=[],!!this.options.animation){var n=[].slice.call(this.el.children);n.forEach(function(a){if(!(Ae(a,"display")==="none"||a===De.ghost)){e.push({target:a,rect:Rt(a)});var i=Qr({},e[e.length-1].rect);if(a.thisAnimationDuration){var s=La(a,!0);s&&(i.top-=s.f,i.left-=s.e)}a.fromRect=i}})}},addAnimationState:function(n){e.push(n)},removeAnimationState:function(n){e.splice(av(e,{target:n}),1)},animateAll:function(n){var a=this;if(!this.options.animation){clearTimeout(t),typeof n=="function"&&n();return}var i=!1,s=0;e.forEach(function(o){var c=0,f=o.target,u=f.fromRect,h=Rt(f),d=f.prevFromRect,p=f.prevToRect,g=o.rect,m=La(f,!0);m&&(h.top-=m.f,h.left-=m.e),f.toRect=h,f.thisAnimationDuration&&il(d,h)&&!il(u,h)&&(g.top-h.top)/(g.left-h.left)===(u.top-h.top)/(u.left-h.left)&&(c=cv(g,d,p,a.options)),il(h,u)||(f.prevFromRect=u,f.prevToRect=h,c||(c=a.options.animation),a.animate(f,g,h,c)),c&&(i=!0,s=Math.max(s,c),clearTimeout(f.animationResetTimer),f.animationResetTimer=setTimeout(function(){f.animationTime=0,f.prevFromRect=null,f.fromRect=null,f.prevToRect=null,f.thisAnimationDuration=null},c),f.thisAnimationDuration=c)}),clearTimeout(t),i?t=setTimeout(function(){typeof n=="function"&&n()},s):typeof n=="function"&&n(),e=[]},animate:function(n,a,i,s){if(s){Ae(n,"transition",""),Ae(n,"transform","");var o=La(this.el),c=o&&o.a,f=o&&o.d,u=(a.left-i.left)/(c||1),h=(a.top-i.top)/(f||1);n.animatingX=!!u,n.animatingY=!!h,Ae(n,"transform","translate3d("+u+"px,"+h+"px,0)"),this.forRepaintDummy=lv(n),Ae(n,"transition","transform "+s+"ms"+(this.options.easing?" "+this.options.easing:"")),Ae(n,"transform","translate3d(0,0,0)"),typeof n.animated=="number"&&clearTimeout(n.animated),n.animated=setTimeout(function(){Ae(n,"transition",""),Ae(n,"transform",""),n.animated=!1,n.animatingX=!1,n.animatingY=!1},s)}}}}function lv(e){return e.offsetWidth}function cv(e,t,r,n){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-r.top,2)+Math.pow(t.left-r.left,2))*n.animation}var Va=[],sl={initializeByDefault:!0},Fi={mount:function(t){for(var r in sl)sl.hasOwnProperty(r)&&!(r in t)&&(t[r]=sl[r]);Va.forEach(function(n){if(n.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")}),Va.push(t)},pluginEvent:function(t,r,n){var a=this;this.eventCanceled=!1,n.cancel=function(){a.eventCanceled=!0};var i=t+"Global";Va.forEach(function(s){r[s.pluginName]&&(r[s.pluginName][i]&&r[s.pluginName][i](Qr({sortable:r},n)),r.options[s.pluginName]&&r[s.pluginName][t]&&r[s.pluginName][t](Qr({sortable:r},n)))})},initializePlugins:function(t,r,n,a){Va.forEach(function(o){var c=o.pluginName;if(!(!t.options[c]&&!o.initializeByDefault)){var f=new o(t,r,t.options);f.sortable=t,f.options=t.options,t[c]=f,wn(n,f.defaults)}});for(var i in t.options)if(t.options.hasOwnProperty(i)){var s=this.modifyOption(t,i,t.options[i]);typeof s<"u"&&(t.options[i]=s)}},getEventProperties:function(t,r){var n={};return Va.forEach(function(a){typeof a.eventProperties=="function"&&wn(n,a.eventProperties.call(r[a.pluginName],t))}),n},modifyOption:function(t,r,n){var a;return Va.forEach(function(i){t[i.pluginName]&&i.optionListeners&&typeof i.optionListeners[r]=="function"&&(a=i.optionListeners[r].call(t[i.pluginName],n))}),a}};function fv(e){var t=e.sortable,r=e.rootEl,n=e.name,a=e.targetEl,i=e.cloneEl,s=e.toEl,o=e.fromEl,c=e.oldIndex,f=e.newIndex,u=e.oldDraggableIndex,h=e.newDraggableIndex,d=e.originalEvent,p=e.putSortable,g=e.extraEventProperties;if(t=t||r&&r[xr],!!t){var m,x=t.options,v="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent&&!yn&&!bi?m=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(m=document.createEvent("Event"),m.initEvent(n,!0,!0)),m.to=s||r,m.from=o||r,m.item=a||r,m.clone=i,m.oldIndex=c,m.newIndex=f,m.oldDraggableIndex=u,m.newDraggableIndex=h,m.originalEvent=d,m.pullMode=p?p.lastPutMode:void 0;var k=Qr(Qr({},g),Fi.getEventProperties(n,t));for(var w in k)m[w]=k[w];r&&r.dispatchEvent(m),x[v]&&x[v].call(t,m)}}var uv=["evt"],fr=function(t,r){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},a=n.evt,i=ev(n,uv);Fi.pluginEvent.bind(De)(t,r,Qr({dragEl:xe,parentEl:pt,ghostEl:Le,rootEl:ct,nextEl:oa,lastDownEl:Ls,cloneEl:gt,cloneHidden:Un,dragStarted:Ai,putSortable:$t,activeSortable:De.active,originalEvent:a,oldIndex:Ua,oldDraggableIndex:Ci,newIndex:vr,newDraggableIndex:$n,hideGhostForTarget:I0,unhideGhostForTarget:L0,cloneNowHidden:function(){Un=!0},cloneNowShown:function(){Un=!1},dispatchSortableEvent:function(o){ar({sortable:r,name:o,originalEvent:a})}},i))};function ar(e){fv(Qr({putSortable:$t,cloneEl:gt,targetEl:xe,rootEl:ct,oldIndex:Ua,oldDraggableIndex:Ci,newIndex:vr,newDraggableIndex:$n},e))}var xe,pt,Le,ct,oa,Ls,gt,Un,Ua,vr,Ci,$n,Ms,$t,$a=!1,Vs=!1,Us=[],la,$r,ol,ll,D0,R0,Ai,Wa,Di,Ri=!1,$s=!1,Ws,Gt,cl=[],fl=!1,Hs=[],js=typeof document<"u",zs=y0,O0=bi||yn?"cssFloat":"float",hv=js&&!rv&&!y0&&"draggable"in document.createElement("div"),B0=function(){if(js){if(yn)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto",e.style.pointerEvents==="auto"}}(),N0=function(t,r){var n=Ae(t),a=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),i=Ma(t,0,r),s=Ma(t,1,r),o=i&&Ae(i),c=s&&Ae(s),f=o&&parseInt(o.marginLeft)+parseInt(o.marginRight)+Rt(i).width,u=c&&parseInt(c.marginLeft)+parseInt(c.marginRight)+Rt(s).width;if(n.display==="flex")return n.flexDirection==="column"||n.flexDirection==="column-reverse"?"vertical":"horizontal";if(n.display==="grid")return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(i&&o.float&&o.float!=="none"){var h=o.float==="left"?"left":"right";return s&&(c.clear==="both"||c.clear===h)?"vertical":"horizontal"}return i&&(o.display==="block"||o.display==="flex"||o.display==="table"||o.display==="grid"||f>=a&&n[O0]==="none"||s&&n[O0]==="none"&&f+u>a)?"vertical":"horizontal"},dv=function(t,r,n){var a=n?t.left:t.top,i=n?t.right:t.bottom,s=n?t.width:t.height,o=n?r.left:r.top,c=n?r.right:r.bottom,f=n?r.width:r.height;return a===o||i===c||a+s/2===o+f/2},mv=function(t,r){var n;return Us.some(function(a){var i=a[xr].options.emptyInsertThreshold;if(!(!i||al(a))){var s=Rt(a),o=t>=s.left-i&&t<=s.right+i,c=r>=s.top-i&&r<=s.bottom+i;if(o&&c)return n=a}}),n},P0=function(t){function r(i,s){return function(o,c,f,u){var h=o.options.group.name&&c.options.group.name&&o.options.group.name===c.options.group.name;if(i==null&&(s||h))return!0;if(i==null||i===!1)return!1;if(s&&i==="clone")return i;if(typeof i=="function")return r(i(o,c,f,u),s)(o,c,f,u);var d=(s?o:c).options.group.name;return i===!0||typeof i=="string"&&i===d||i.join&&i.indexOf(d)>-1}}var n={},a=t.group;(!a||Ps(a)!="object")&&(a={name:a}),n.name=a.name,n.checkPull=r(a.pull,!0),n.checkPut=r(a.put),n.revertClone=a.revertClone,t.group=n},I0=function(){!B0&&Le&&Ae(Le,"display","none")},L0=function(){!B0&&Le&&Ae(Le,"display","")};js&&document.addEventListener("click",function(e){if(Vs)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),Vs=!1,!1},!0);var ca=function(t){if(xe){t=t.touches?t.touches[0]:t;var r=mv(t.clientX,t.clientY);if(r){var n={};for(var a in t)t.hasOwnProperty(a)&&(n[a]=t[a]);n.target=n.rootEl=r,n.preventDefault=void 0,n.stopPropagation=void 0,r[xr]._onDragOver(n)}}},pv=function(t){xe&&xe.parentNode[xr]._isOutsideThisEl(t.target)};function De(e,t){if(!(e&&e.nodeType&&e.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=wn({},t),e[xr]=this;var r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return N0(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(s,o){s.setData("Text",o.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:De.supportPointer!==!1&&"PointerEvent"in window&&!Si,emptyInsertThreshold:5};Fi.initializePlugins(this,e,r);for(var n in r)!(n in t)&&(t[n]=r[n]);P0(t);for(var a in this)a.charAt(0)==="_"&&typeof this[a]=="function"&&(this[a]=this[a].bind(this));this.nativeDraggable=t.forceFallback?!1:hv,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?Je(e,"pointerdown",this._onTapStart):(Je(e,"mousedown",this._onTapStart),Je(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(Je(e,"dragover",this),Je(e,"dragenter",this)),Us.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),wn(this,ov())}De.prototype={constructor:De,_isOutsideThisEl:function(t){!this.el.contains(t)&&t!==this.el&&(Wa=null)},_getDirection:function(t,r){return typeof this.options.direction=="function"?this.options.direction.call(this,t,r,xe):this.options.direction},_onTapStart:function(t){if(t.cancelable){var r=this,n=this.el,a=this.options,i=a.preventOnFilter,s=t.type,o=t.touches&&t.touches[0]||t.pointerType&&t.pointerType==="touch"&&t,c=(o||t).target,f=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||c,u=a.filter;if(Ev(n),!xe&&!(/mousedown|pointerdown/.test(s)&&t.button!==0||a.disabled)&&!f.isContentEditable&&!(!this.nativeDraggable&&Si&&c&&c.tagName.toUpperCase()==="SELECT")&&(c=en(c,a.draggable,n,!1),!(c&&c.animated)&&Ls!==c)){if(Ua=Ar(c),Ci=Ar(c,a.draggable),typeof u=="function"){if(u.call(this,t,c,this)){ar({sortable:r,rootEl:f,name:"filter",targetEl:c,toEl:n,fromEl:n}),fr("filter",r,{evt:t}),i&&t.cancelable&&t.preventDefault();return}}else if(u&&(u=u.split(",").some(function(h){if(h=en(f,h.trim(),n,!1),h)return ar({sortable:r,rootEl:h,name:"filter",targetEl:c,fromEl:n,toEl:n}),fr("filter",r,{evt:t}),!0}),u)){i&&t.cancelable&&t.preventDefault();return}a.handle&&!en(f,a.handle,n,!1)||this._prepareDragStart(t,o,c)}}},_prepareDragStart:function(t,r,n){var a=this,i=a.el,s=a.options,o=i.ownerDocument,c;if(n&&!xe&&n.parentNode===i){var f=Rt(n);if(ct=i,xe=n,pt=xe.parentNode,oa=xe.nextSibling,Ls=n,Ms=s.group,De.dragged=xe,la={target:xe,clientX:(r||t).clientX,clientY:(r||t).clientY},D0=la.clientX-f.left,R0=la.clientY-f.top,this._lastX=(r||t).clientX,this._lastY=(r||t).clientY,xe.style["will-change"]="all",c=function(){if(fr("delayEnded",a,{evt:t}),De.eventCanceled){a._onDrop();return}a._disableDelayedDragEvents(),!_0&&a.nativeDraggable&&(xe.draggable=!0),a._triggerDragStart(t,r),ar({sortable:a,name:"choose",originalEvent:t}),gr(xe,s.chosenClass,!0)},s.ignore.split(",").forEach(function(u){b0(xe,u.trim(),ul)}),Je(o,"dragover",ca),Je(o,"mousemove",ca),Je(o,"touchmove",ca),Je(o,"mouseup",a._onDrop),Je(o,"touchend",a._onDrop),Je(o,"touchcancel",a._onDrop),_0&&this.nativeDraggable&&(this.options.touchStartThreshold=4,xe.draggable=!0),fr("delayStart",this,{evt:t}),s.delay&&(!s.delayOnTouchOnly||r)&&(!this.nativeDraggable||!(bi||yn))){if(De.eventCanceled){this._onDrop();return}Je(o,"mouseup",a._disableDelayedDrag),Je(o,"touchend",a._disableDelayedDrag),Je(o,"touchcancel",a._disableDelayedDrag),Je(o,"mousemove",a._delayedDragTouchMoveHandler),Je(o,"touchmove",a._delayedDragTouchMoveHandler),s.supportPointer&&Je(o,"pointermove",a._delayedDragTouchMoveHandler),a._dragStartTimer=setTimeout(c,s.delay)}else c()}},_delayedDragTouchMoveHandler:function(t){var r=t.touches?t.touches[0]:t;Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){xe&&ul(xe),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;Xe(t,"mouseup",this._disableDelayedDrag),Xe(t,"touchend",this._disableDelayedDrag),Xe(t,"touchcancel",this._disableDelayedDrag),Xe(t,"mousemove",this._delayedDragTouchMoveHandler),Xe(t,"touchmove",this._delayedDragTouchMoveHandler),Xe(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,r){r=r||t.pointerType=="touch"&&t,!this.nativeDraggable||r?this.options.supportPointer?Je(document,"pointermove",this._onTouchMove):r?Je(document,"touchmove",this._onTouchMove):Je(document,"mousemove",this._onTouchMove):(Je(xe,"dragend",this),Je(ct,"dragstart",this._onDragStart));try{document.selection?Xs(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(t,r){if($a=!1,ct&&xe){fr("dragStarted",this,{evt:r}),this.nativeDraggable&&Je(document,"dragover",pv);var n=this.options;!t&&gr(xe,n.dragClass,!1),gr(xe,n.ghostClass,!0),De.active=this,t&&this._appendGhost(),ar({sortable:this,name:"start",originalEvent:r})}else this._nulling()},_emulateDragOver:function(){if($r){this._lastX=$r.clientX,this._lastY=$r.clientY,I0();for(var t=document.elementFromPoint($r.clientX,$r.clientY),r=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint($r.clientX,$r.clientY),t!==r);)r=t;if(xe.parentNode[xr]._isOutsideThisEl(t),r)do{if(r[xr]){var n=void 0;if(n=r[xr]._onDragOver({clientX:$r.clientX,clientY:$r.clientY,target:t,rootEl:r}),n&&!this.options.dragoverBubble)break}t=r}while(r=r.parentNode);L0()}},_onTouchMove:function(t){if(la){var r=this.options,n=r.fallbackTolerance,a=r.fallbackOffset,i=t.touches?t.touches[0]:t,s=Le&&La(Le,!0),o=Le&&s&&s.a,c=Le&&s&&s.d,f=zs&&Gt&&T0(Gt),u=(i.clientX-la.clientX+a.x)/(o||1)+(f?f[0]-cl[0]:0)/(o||1),h=(i.clientY-la.clientY+a.y)/(c||1)+(f?f[1]-cl[1]:0)/(c||1);if(!De.active&&!$a){if(n&&Math.max(Math.abs(i.clientX-this._lastX),Math.abs(i.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(Le){s?(s.e+=u-(ol||0),s.f+=h-(ll||0)):s={a:1,b:0,c:0,d:1,e:u,f:h};var d="matrix(".concat(s.a,",").concat(s.b,",").concat(s.c,",").concat(s.d,",").concat(s.e,",").concat(s.f,")");Ae(Le,"webkitTransform",d),Ae(Le,"mozTransform",d),Ae(Le,"msTransform",d),Ae(Le,"transform",d),ol=u,ll=h,$r=i}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!Le){var t=this.options.fallbackOnBody?document.body:ct,r=Rt(xe,!0,zs,!0,t),n=this.options;if(zs){for(Gt=t;Ae(Gt,"position")==="static"&&Ae(Gt,"transform")==="none"&&Gt!==document;)Gt=Gt.parentNode;Gt!==document.body&&Gt!==document.documentElement?(Gt===document&&(Gt=tn()),r.top+=Gt.scrollTop,r.left+=Gt.scrollLeft):Gt=tn(),cl=T0(Gt)}Le=xe.cloneNode(!0),gr(Le,n.ghostClass,!1),gr(Le,n.fallbackClass,!0),gr(Le,n.dragClass,!0),Ae(Le,"transition",""),Ae(Le,"transform",""),Ae(Le,"box-sizing","border-box"),Ae(Le,"margin",0),Ae(Le,"top",r.top),Ae(Le,"left",r.left),Ae(Le,"width",r.width),Ae(Le,"height",r.height),Ae(Le,"opacity","0.8"),Ae(Le,"position",zs?"absolute":"fixed"),Ae(Le,"zIndex","100000"),Ae(Le,"pointerEvents","none"),De.ghost=Le,t.appendChild(Le),Ae(Le,"transform-origin",D0/parseInt(Le.style.width)*100+"% "+R0/parseInt(Le.style.height)*100+"%")}},_onDragStart:function(t,r){var n=this,a=t.dataTransfer,i=n.options;if(fr("dragStart",this,{evt:t}),De.eventCanceled){this._onDrop();return}fr("setupClone",this),De.eventCanceled||(gt=A0(xe),gt.draggable=!1,gt.style["will-change"]="",this._hideClone(),gr(gt,this.options.chosenClass,!1),De.clone=gt),n.cloneId=Xs(function(){fr("clone",n),!De.eventCanceled&&(n.options.removeCloneOnHide||ct.insertBefore(gt,xe),n._hideClone(),ar({sortable:n,name:"clone"}))}),!r&&gr(xe,i.dragClass,!0),r?(Vs=!0,n._loopId=setInterval(n._emulateDragOver,50)):(Xe(document,"mouseup",n._onDrop),Xe(document,"touchend",n._onDrop),Xe(document,"touchcancel",n._onDrop),a&&(a.effectAllowed="move",i.setData&&i.setData.call(n,a,xe)),Je(document,"drop",n),Ae(xe,"transform","translateZ(0)")),$a=!0,n._dragStartId=Xs(n._dragStarted.bind(n,r,t)),Je(document,"selectstart",n),Ai=!0,Si&&Ae(document.body,"user-select","none")},_onDragOver:function(t){var r=this.el,n=t.target,a,i,s,o=this.options,c=o.group,f=De.active,u=Ms===c,h=o.sort,d=$t||f,p,g=this,m=!1;if(fl)return;function x(ue,z){fr(ue,g,Qr({evt:t,isOwner:u,axis:p?"vertical":"horizontal",revert:s,dragRect:a,targetRect:i,canSort:h,fromSortable:d,target:n,completed:k,onMove:function(A,_){return Gs(ct,r,xe,a,A,Rt(A),t,_)},changed:w},z))}function v(){x("dragOverAnimationCapture"),g.captureAnimationState(),g!==d&&d.captureAnimationState()}function k(ue){return x("dragOverCompleted",{insertion:ue}),ue&&(u?f._hideClone():f._showClone(g),g!==d&&(gr(xe,$t?$t.options.ghostClass:f.options.ghostClass,!1),gr(xe,o.ghostClass,!0)),$t!==g&&g!==De.active?$t=g:g===De.active&&$t&&($t=null),d===g&&(g._ignoreWhileAnimating=n),g.animateAll(function(){x("dragOverAnimationComplete"),g._ignoreWhileAnimating=null}),g!==d&&(d.animateAll(),d._ignoreWhileAnimating=null)),(n===xe&&!xe.animated||n===r&&!n.animated)&&(Wa=null),!o.dragoverBubble&&!t.rootEl&&n!==document&&(xe.parentNode[xr]._isOutsideThisEl(t.target),!ue&&ca(t)),!o.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),m=!0}function w(){vr=Ar(xe),$n=Ar(xe,o.draggable),ar({sortable:g,name:"change",toEl:r,newIndex:vr,newDraggableIndex:$n,originalEvent:t})}if(t.preventDefault!==void 0&&t.cancelable&&t.preventDefault(),n=en(n,o.draggable,r,!0),x("dragOver"),De.eventCanceled)return m;if(xe.contains(t.target)||n.animated&&n.animatingX&&n.animatingY||g._ignoreWhileAnimating===n)return k(!1);if(Vs=!1,f&&!o.disabled&&(u?h||(s=pt!==ct):$t===this||(this.lastPutMode=Ms.checkPull(this,f,xe,t))&&c.checkPut(this,f,xe,t))){if(p=this._getDirection(t,n)==="vertical",a=Rt(xe),x("dragOverValid"),De.eventCanceled)return m;if(s)return pt=ct,v(),this._hideClone(),x("revert"),De.eventCanceled||(oa?ct.insertBefore(xe,oa):ct.appendChild(xe)),k(!0);var S=al(r,o.draggable);if(!S||wv(t,p,this)&&!S.animated){if(S===xe)return k(!1);if(S&&r===t.target&&(n=S),n&&(i=Rt(n)),Gs(ct,r,xe,a,n,i,t,!!n)!==!1)return v(),r.appendChild(xe),pt=r,w(),k(!0)}else if(S&&vv(t,p,this)){var b=Ma(r,0,o,!0);if(b===xe)return k(!1);if(n=b,i=Rt(n),Gs(ct,r,xe,a,n,i,t,!1)!==!1)return v(),r.insertBefore(xe,b),pt=r,w(),k(!0)}else if(n.parentNode===r){i=Rt(n);var T=0,y,O=xe.parentNode!==r,B=!dv(xe.animated&&xe.toRect||a,n.animated&&n.toRect||i,p),H=p?"top":"left",j=S0(n,"top","top")||S0(xe,"top","top"),I=j?j.scrollTop:void 0;Wa!==n&&(y=i[H],Ri=!1,$s=!B&&o.invertSwap||O),T=_v(t,n,i,p,B?1:o.swapThreshold,o.invertedSwapThreshold==null?o.swapThreshold:o.invertedSwapThreshold,$s,Wa===n);var X;if(T!==0){var q=Ar(xe);do q-=T,X=pt.children[q];while(X&&(Ae(X,"display")==="none"||X===Le))}if(T===0||X===n)return k(!1);Wa=n,Di=T;var te=n.nextElementSibling,ae=!1;ae=T===1;var oe=Gs(ct,r,xe,a,n,i,t,ae);if(oe!==!1)return(oe===1||oe===-1)&&(ae=oe===1),fl=!0,setTimeout(xv,30),v(),ae&&!te?r.appendChild(xe):n.parentNode.insertBefore(xe,ae?te:n),j&&C0(j,0,I-j.scrollTop),pt=xe.parentNode,y!==void 0&&!$s&&(Ws=Math.abs(y-Rt(n)[H])),w(),k(!0)}if(r.contains(xe))return k(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){Xe(document,"mousemove",this._onTouchMove),Xe(document,"touchmove",this._onTouchMove),Xe(document,"pointermove",this._onTouchMove),Xe(document,"dragover",ca),Xe(document,"mousemove",ca),Xe(document,"touchmove",ca)},_offUpEvents:function(){var t=this.el.ownerDocument;Xe(t,"mouseup",this._onDrop),Xe(t,"touchend",this._onDrop),Xe(t,"pointerup",this._onDrop),Xe(t,"touchcancel",this._onDrop),Xe(document,"selectstart",this)},_onDrop:function(t){var r=this.el,n=this.options;if(vr=Ar(xe),$n=Ar(xe,n.draggable),fr("drop",this,{evt:t}),pt=xe&&xe.parentNode,vr=Ar(xe),$n=Ar(xe,n.draggable),De.eventCanceled){this._nulling();return}$a=!1,$s=!1,Ri=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),hl(this.cloneId),hl(this._dragStartId),this.nativeDraggable&&(Xe(document,"drop",this),Xe(r,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Si&&Ae(document.body,"user-select",""),Ae(xe,"transform",""),t&&(Ai&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),Le&&Le.parentNode&&Le.parentNode.removeChild(Le),(ct===pt||$t&&$t.lastPutMode!=="clone")&&gt&&gt.parentNode&&gt.parentNode.removeChild(gt),xe&&(this.nativeDraggable&&Xe(xe,"dragend",this),ul(xe),xe.style["will-change"]="",Ai&&!$a&&gr(xe,$t?$t.options.ghostClass:this.options.ghostClass,!1),gr(xe,this.options.chosenClass,!1),ar({sortable:this,name:"unchoose",toEl:pt,newIndex:null,newDraggableIndex:null,originalEvent:t}),ct!==pt?(vr>=0&&(ar({rootEl:pt,name:"add",toEl:pt,fromEl:ct,originalEvent:t}),ar({sortable:this,name:"remove",toEl:pt,originalEvent:t}),ar({rootEl:pt,name:"sort",toEl:pt,fromEl:ct,originalEvent:t}),ar({sortable:this,name:"sort",toEl:pt,originalEvent:t})),$t&&$t.save()):vr!==Ua&&vr>=0&&(ar({sortable:this,name:"update",toEl:pt,originalEvent:t}),ar({sortable:this,name:"sort",toEl:pt,originalEvent:t})),De.active&&((vr==null||vr===-1)&&(vr=Ua,$n=Ci),ar({sortable:this,name:"end",toEl:pt,originalEvent:t}),this.save()))),this._nulling()},_nulling:function(){fr("nulling",this),ct=xe=pt=Le=oa=gt=Ls=Un=la=$r=Ai=vr=$n=Ua=Ci=Wa=Di=$t=Ms=De.dragged=De.ghost=De.clone=De.active=null,Hs.forEach(function(t){t.checked=!0}),Hs.length=ol=ll=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":xe&&(this._onDragOver(t),gv(t));break;case"selectstart":t.preventDefault();break}},toArray:function(){for(var t=[],r,n=this.el.children,a=0,i=n.length,s=this.options;a<i;a++)r=n[a],en(r,s.draggable,this.el,!1)&&t.push(r.getAttribute(s.dataIdAttr)||kv(r));return t},sort:function(t,r){var n={},a=this.el;this.toArray().forEach(function(i,s){var o=a.children[s];en(o,this.options.draggable,a,!1)&&(n[i]=o)},this),r&&this.captureAnimationState(),t.forEach(function(i){n[i]&&(a.removeChild(n[i]),a.appendChild(n[i]))}),r&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,r){return en(t,r||this.options.draggable,this.el,!1)},option:function(t,r){var n=this.options;if(r===void 0)return n[t];var a=Fi.modifyOption(this,t,r);typeof a<"u"?n[t]=a:n[t]=r,t==="group"&&P0(n)},destroy:function(){fr("destroy",this);var t=this.el;t[xr]=null,Xe(t,"mousedown",this._onTapStart),Xe(t,"touchstart",this._onTapStart),Xe(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(Xe(t,"dragover",this),Xe(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(r){r.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Us.splice(Us.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!Un){if(fr("hideClone",this),De.eventCanceled)return;Ae(gt,"display","none"),this.options.removeCloneOnHide&&gt.parentNode&&gt.parentNode.removeChild(gt),Un=!0}},_showClone:function(t){if(t.lastPutMode!=="clone"){this._hideClone();return}if(Un){if(fr("showClone",this),De.eventCanceled)return;xe.parentNode==ct&&!this.options.group.revertClone?ct.insertBefore(gt,xe):oa?ct.insertBefore(gt,oa):ct.appendChild(gt),this.options.group.revertClone&&this.animate(xe,gt),Ae(gt,"display",""),Un=!1}}};function gv(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move"),e.cancelable&&e.preventDefault()}function Gs(e,t,r,n,a,i,s,o){var c,f=e[xr],u=f.options.onMove,h;return window.CustomEvent&&!yn&&!bi?c=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(c=document.createEvent("Event"),c.initEvent("move",!0,!0)),c.to=t,c.from=e,c.dragged=r,c.draggedRect=n,c.related=a||t,c.relatedRect=i||Rt(t),c.willInsertAfter=o,c.originalEvent=s,e.dispatchEvent(c),u&&(h=u.call(f,c,s)),h}function ul(e){e.draggable=!1}function xv(){fl=!1}function vv(e,t,r){var n=Rt(Ma(r.el,0,r.options,!0)),a=10;return t?e.clientX<n.left-a||e.clientY<n.top&&e.clientX<n.right:e.clientY<n.top-a||e.clientY<n.bottom&&e.clientX<n.left}function wv(e,t,r){var n=Rt(al(r.el,r.options.draggable)),a=10;return t?e.clientX>n.right+a||e.clientX<=n.right&&e.clientY>n.bottom&&e.clientX>=n.left:e.clientX>n.right&&e.clientY>n.top||e.clientX<=n.right&&e.clientY>n.bottom+a}function _v(e,t,r,n,a,i,s,o){var c=n?e.clientY:e.clientX,f=n?r.height:r.width,u=n?r.top:r.left,h=n?r.bottom:r.right,d=!1;if(!s){if(o&&Ws<f*a){if(!Ri&&(Di===1?c>u+f*i/2:c<h-f*i/2)&&(Ri=!0),Ri)d=!0;else if(Di===1?c<u+Ws:c>h-Ws)return-Di}else if(c>u+f*(1-a)/2&&c<h-f*(1-a)/2)return yv(t)}return d=d||s,d&&(c<u+f*i/2||c>h-f*i/2)?c>u+f/2?1:-1:0}function yv(e){return Ar(xe)<Ar(e)?1:-1}function kv(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,r=t.length,n=0;r--;)n+=t.charCodeAt(r);return n.toString(36)}function Ev(e){Hs.length=0;for(var t=e.getElementsByTagName("input"),r=t.length;r--;){var n=t[r];n.checked&&Hs.push(n)}}function Xs(e){return setTimeout(e,0)}function hl(e){return clearTimeout(e)}js&&Je(document,"touchmove",function(e){(De.active||$a)&&e.cancelable&&e.preventDefault()}),De.utils={on:Je,off:Xe,css:Ae,find:b0,is:function(t,r){return!!en(t,r,t,!1)},extend:iv,throttle:F0,closest:en,toggleClass:gr,clone:A0,index:Ar,nextTick:Xs,cancelNextTick:hl,detectDirection:N0,getChild:Ma},De.get=function(e){return e[xr]},De.mount=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t[0].constructor===Array&&(t=t[0]),t.forEach(function(n){if(!n.prototype||!n.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(n));n.utils&&(De.utils=Qr(Qr({},De.utils),n.utils)),Fi.mount(n)})},De.create=function(e,t){return new De(e,t)},De.version=tv;var St=[],Oi,dl,ml=!1,pl,gl,Ks,Bi;function bv(){function e(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var t in this)t.charAt(0)==="_"&&typeof this[t]=="function"&&(this[t]=this[t].bind(this))}return e.prototype={dragStarted:function(r){var n=r.originalEvent;this.sortable.nativeDraggable?Je(document,"dragover",this._handleAutoScroll):this.options.supportPointer?Je(document,"pointermove",this._handleFallbackAutoScroll):n.touches?Je(document,"touchmove",this._handleFallbackAutoScroll):Je(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(r){var n=r.originalEvent;!this.options.dragOverBubble&&!n.rootEl&&this._handleAutoScroll(n)},drop:function(){this.sortable.nativeDraggable?Xe(document,"dragover",this._handleAutoScroll):(Xe(document,"pointermove",this._handleFallbackAutoScroll),Xe(document,"touchmove",this._handleFallbackAutoScroll),Xe(document,"mousemove",this._handleFallbackAutoScroll)),M0(),Ys(),sv()},nulling:function(){Ks=dl=Oi=ml=Bi=pl=gl=null,St.length=0},_handleFallbackAutoScroll:function(r){this._handleAutoScroll(r,!0)},_handleAutoScroll:function(r,n){var a=this,i=(r.touches?r.touches[0]:r).clientX,s=(r.touches?r.touches[0]:r).clientY,o=document.elementFromPoint(i,s);if(Ks=r,n||this.options.forceAutoScrollFallback||bi||yn||Si){xl(r,this.options,o,n);var c=Vn(o,!0);ml&&(!Bi||i!==pl||s!==gl)&&(Bi&&M0(),Bi=setInterval(function(){var f=Vn(document.elementFromPoint(i,s),!0);f!==c&&(c=f,Ys()),xl(r,a.options,f,n)},10),pl=i,gl=s)}else{if(!this.options.bubbleScroll||Vn(o,!0)===tn()){Ys();return}xl(r,this.options,Vn(o,!1),!1)}}},wn(e,{pluginName:"scroll",initializeByDefault:!0})}function Ys(){St.forEach(function(e){clearInterval(e.pid)}),St=[]}function M0(){clearInterval(Bi)}var xl=F0(function(e,t,r,n){if(t.scroll){var a=(e.touches?e.touches[0]:e).clientX,i=(e.touches?e.touches[0]:e).clientY,s=t.scrollSensitivity,o=t.scrollSpeed,c=tn(),f=!1,u;dl!==r&&(dl=r,Ys(),Oi=t.scroll,u=t.scrollFn,Oi===!0&&(Oi=Vn(r,!0)));var h=0,d=Oi;do{var p=d,g=Rt(p),m=g.top,x=g.bottom,v=g.left,k=g.right,w=g.width,S=g.height,b=void 0,T=void 0,y=p.scrollWidth,O=p.scrollHeight,B=Ae(p),H=p.scrollLeft,j=p.scrollTop;p===c?(b=w<y&&(B.overflowX==="auto"||B.overflowX==="scroll"||B.overflowX==="visible"),T=S<O&&(B.overflowY==="auto"||B.overflowY==="scroll"||B.overflowY==="visible")):(b=w<y&&(B.overflowX==="auto"||B.overflowX==="scroll"),T=S<O&&(B.overflowY==="auto"||B.overflowY==="scroll"));var I=b&&(Math.abs(k-a)<=s&&H+w<y)-(Math.abs(v-a)<=s&&!!H),X=T&&(Math.abs(x-i)<=s&&j+S<O)-(Math.abs(m-i)<=s&&!!j);if(!St[h])for(var q=0;q<=h;q++)St[q]||(St[q]={});(St[h].vx!=I||St[h].vy!=X||St[h].el!==p)&&(St[h].el=p,St[h].vx=I,St[h].vy=X,clearInterval(St[h].pid),(I!=0||X!=0)&&(f=!0,St[h].pid=setInterval((function(){n&&this.layer===0&&De.active._onTouchMove(Ks);var te=St[this.layer].vy?St[this.layer].vy*o:0,ae=St[this.layer].vx?St[this.layer].vx*o:0;typeof u=="function"&&u.call(De.dragged.parentNode[xr],ae,te,e,Ks,St[this.layer].el)!=="continue"||C0(St[this.layer].el,ae,te)}).bind({layer:h}),24))),h++}while(t.bubbleScroll&&d!==c&&(d=Vn(d,!1)));ml=f}},30),V0=function(t){var r=t.originalEvent,n=t.putSortable,a=t.dragEl,i=t.activeSortable,s=t.dispatchSortableEvent,o=t.hideGhostForTarget,c=t.unhideGhostForTarget;if(r){var f=n||i;o();var u=r.changedTouches&&r.changedTouches.length?r.changedTouches[0]:r,h=document.elementFromPoint(u.clientX,u.clientY);c(),f&&!f.el.contains(h)&&(s("spill"),this.onSpill({dragEl:a,putSortable:n}))}};function vl(){}vl.prototype={startIndex:null,dragStart:function(t){var r=t.oldDraggableIndex;this.startIndex=r},onSpill:function(t){var r=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var a=Ma(this.sortable.el,this.startIndex,this.options);a?this.sortable.el.insertBefore(r,a):this.sortable.el.appendChild(r),this.sortable.animateAll(),n&&n.animateAll()},drop:V0},wn(vl,{pluginName:"revertOnSpill"});function wl(){}wl.prototype={onSpill:function(t){var r=t.dragEl,n=t.putSortable,a=n||this.sortable;a.captureAnimationState(),r.parentNode&&r.parentNode.removeChild(r),a.animateAll()},drop:V0},wn(wl,{pluginName:"removeOnSpill"}),De.mount(new bv),De.mount(wl,vl);var Sv=Object.defineProperty,Tv=Object.defineProperties,Fv=Object.getOwnPropertyDescriptors,U0=Object.getOwnPropertySymbols,Cv=Object.prototype.hasOwnProperty,Av=Object.prototype.propertyIsEnumerable,$0=(e,t,r)=>t in e?Sv(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Wn=(e,t)=>{for(var r in t||(t={}))Cv.call(t,r)&&$0(e,r,t[r]);if(U0)for(var r of U0(t))Av.call(t,r)&&$0(e,r,t[r]);return e},qs=(e,t)=>Tv(e,Fv(t));function _l(e){e.parentElement!==null&&e.parentElement.removeChild(e)}function W0(e,t,r){const n=r===0?e.children[0]:e.children[r-1].nextSibling;e.insertBefore(t,n)}function Dv(){return typeof window<"u"?window.console:global.console}const Rv=Dv();function Ov(e){const t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}const Bv=/-(\w)/g,Nv=Ov(e=>e.replace(Bv,(t,r)=>r.toUpperCase())),H0=["Start","Add","Remove","Update","End"],j0=["Choose","Unchoose","Sort","Filter","Clone"],z0=["Move"],Pv=[z0,H0,j0].flatMap(e=>e).map(e=>`on${e}`),yl={manage:z0,manageAndEmit:H0,emit:j0};function Iv(e){return Pv.indexOf(e)!==-1}const Lv=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"];function Mv(e){return Lv.includes(e)}function Vv(e){return["transition-group","TransitionGroup"].includes(e)}function G0(e){return["id","class","role","style"].includes(e)||e.startsWith("data-")||e.startsWith("aria-")||e.startsWith("on")}function X0(e){return e.reduce((t,[r,n])=>(t[r]=n,t),{})}function Uv({$attrs:e,componentData:t={}}){const r=X0(Object.entries(e).filter(([n,a])=>G0(n)));return Wn(Wn({},r),t)}function $v({$attrs:e,callBackBuilder:t}){const r=X0(K0(e));Object.entries(t).forEach(([a,i])=>{yl[a].forEach(s=>{r[`on${s}`]=i(s)})});const n=`[data-draggable]${r.draggable||""}`;return qs(Wn({},r),{draggable:n})}function K0(e){return Object.entries(e).filter(([t,r])=>!G0(t)).map(([t,r])=>[Nv(t),r]).filter(([t,r])=>!Iv(t))}const Y0=e=>{const t=e.el||Array.isArray(e.children)&&e.children[0].el.parentNode;return t||console.error("使用 transition-group , 需要在slot中template内至少2层html标签"),t||{}},Wv=(e,t)=>e.__draggable_context=t,q0=e=>e.__draggable_context;class Hv{constructor({nodes:{header:t,default:r,footer:n},root:a,realList:i}){this.defaultNodes=r,this.children=[...t,...r,...n],this.externalComponent=a.externalComponent,this.rootTransition=a.transition,this.tag=a.tag,this.realList=i}get _isRootComponent(){return this.externalComponent||this.rootTransition}render(t,r){const{tag:n,children:a,_isRootComponent:i}=this;return t(n,r,i?{default:()=>a}:a)}updated(){const{defaultNodes:t,realList:r}=this;t.forEach((n,a)=>{Wv(Y0(n),{element:r[a],index:a})})}getUnderlyingVm(t){return q0(t)}getVmIndexFromDomIndex(t,r){const{defaultNodes:n}=this,{length:a}=n,i=r.children,s=i.item(t);if(s===null)return a;const o=q0(s);if(o)return o.index;if(a===0)return 0;const c=Y0(n[0]),f=[...i].findIndex(u=>u===c);return t<f?0:a}}function jv(e,t){const r=e[t];return r?r():[]}function zv({$slots:e,realList:t,getKey:r}){const n=t||[],[a,i]=["header","footer"].map(c=>jv(e,c)),{item:s}=e;if(!s)throw new Error("draggable element must have an item slot");const o=n.flatMap((c,f)=>s({element:c,index:f}).map(u=>(u.key=r(c),u.props=qs(Wn({},u.props||{}),{"data-draggable":!0}),u)));if(o.length!==n.length)throw new Error("Item slot must have only one child");return{header:a,footer:i,default:o}}function Gv(e){const t=Vv(e),r=!Mv(e)&&!t;return{transition:t,externalComponent:r,tag:r?l.resolveComponent(e):t?l.TransitionGroup:e}}function Xv({$slots:e,tag:t,realList:r,getKey:n}){const a=zv({$slots:e,realList:r,getKey:n}),i=Gv(t);return new Hv({nodes:a,root:i,realList:r})}function J0(e,t){l.nextTick(()=>this.$emit(e.toLowerCase(),t))}function Z0(e){return(t,r)=>{if(this.realList!==null)return this[`onDrag${e}`](t,r)}}function Kv(e){const t=Z0.call(this,e);return(r,n)=>{t.call(this,r,n),J0.call(this,e,r)}}let kl=null;const Yv={list:{type:Array,required:!1,default:null},modelValue:{type:Array,required:!1,default:null},itemKey:{type:[String,Function],required:!0},clone:{type:Function,default:e=>e},tag:{type:String,default:"div"},move:{type:Function,default:null},componentData:{type:Object,required:!1,default:null}},qv=["update:modelValue","change",...[...yl.manageAndEmit,...yl.emit].map(e=>e.toLowerCase())],Jv=l.defineComponent({name:"draggable",inheritAttrs:!1,props:Yv,emits:qv,data(){return{error:!1}},render(){try{this.error=!1;const{$slots:e,$attrs:t,tag:r,componentData:n,realList:a,getKey:i}=this,s=Xv({$slots:e,tag:r,realList:a,getKey:i});this.componentStructure=s;const o=Uv({$attrs:t,componentData:n});return s.render(l.h,o)}catch(e){return this.error=!0,l.h("pre",{style:{color:"red"}},e.stack)}},created(){this.list!==null&&this.modelValue!==null&&Rv.error("modelValue and list props are mutually exclusive! Please set one or another.")},mounted(){if(this.error)return;const{$attrs:e,$el:t,componentStructure:r}=this;r.updated();const n=$v({$attrs:e,callBackBuilder:{manageAndEmit:i=>Kv.call(this,i),emit:i=>J0.bind(this,i),manage:i=>Z0.call(this,i)}}),a=t.nodeType===1?t:t.parentElement;this._sortable=new De(a,n),this.targetDomElement=a,a.__draggable_component__=this},updated(){this.componentStructure.updated()},beforeUnmount(){this._sortable!==void 0&&this._sortable.destroy()},computed:{realList(){const{list:e}=this;return e||this.modelValue},getKey(){const{itemKey:e}=this;return typeof e=="function"?e:t=>t[e]}},watch:{$attrs:{handler(e){const{_sortable:t}=this;t&&K0(e).forEach(([r,n])=>{t.option(r,n)})},deep:!0}},methods:{getUnderlyingVm(e){return this.componentStructure.getUnderlyingVm(e)||null},getUnderlyingPotencialDraggableComponent(e){return e.__draggable_component__},emitChanges(e){l.nextTick(()=>this.$emit("change",e))},alterList(e){if(this.list){e(this.list);return}const t=[...this.modelValue];e(t),this.$emit("update:modelValue",t)},spliceList(){const e=t=>t.splice(...arguments);this.alterList(e)},updatePosition(e,t){const r=n=>n.splice(t,0,n.splice(e,1)[0]);this.alterList(r)},getRelatedContextFromMoveEvent({to:e,related:t}){const r=this.getUnderlyingPotencialDraggableComponent(e);if(!r)return{component:r};const n=r.realList,a={list:n,component:r};if(e!==t&&n){const i=r.getUnderlyingVm(t)||{};return Wn(Wn({},i),a)}return a},getVmIndexFromDomIndex(e){return this.componentStructure.getVmIndexFromDomIndex(e,this.targetDomElement)},onDragStart(e){this.context=this.getUnderlyingVm(e.item),e.item._underlying_vm_=this.clone(this.context.element),kl=e.item},onDragAdd(e){const t=e.item._underlying_vm_;if(t===void 0)return;_l(e.item);const r=this.getVmIndexFromDomIndex(e.newIndex);this.spliceList(r,0,t);const n={element:t,newIndex:r};this.emitChanges({added:n})},onDragRemove(e){if(W0(this.$el,e.item,e.oldIndex),e.pullMode==="clone"){_l(e.clone);return}const{index:t,element:r}=this.context;this.spliceList(t,1);const n={element:r,oldIndex:t};this.emitChanges({removed:n})},onDragUpdate(e){_l(e.item),W0(e.from,e.item,e.oldIndex);const t=this.context.index,r=this.getVmIndexFromDomIndex(e.newIndex);this.updatePosition(t,r);const n={element:this.context.element,oldIndex:t,newIndex:r};this.emitChanges({moved:n})},computeFutureIndex(e,t){if(!e.element)return 0;const r=[...t.to.children].filter(s=>s.style.display!=="none"),n=r.indexOf(t.related),a=e.component.getVmIndexFromDomIndex(n);return r.indexOf(kl)!==-1||!t.willInsertAfter?a:a+1},onDragMove(e,t){const{move:r,realList:n}=this;if(!r||!n)return!0;const a=this.getRelatedContextFromMoveEvent(e),i=this.computeFutureIndex(a,e),s=qs(Wn({},this.context),{futureIndex:i}),o=qs(Wn({},e),{relatedContext:a,draggedContext:s});return r(o,t)},onDragEnd(){kl=null}}}),Zv=l.defineComponent({name:"FsTableColumnsFixedController",props:{modelValue:{default:!1}},emits:["update:modelValue","change"],setup(e,t){const{ui:r}=de.useUi(),n=l.ref([{value:"left",icon:r.icons.left},{value:!1,icon:r.icons.close},{value:"right",icon:r.icons.right}]);function a(i){t.emit("update:modelValue",i),t.emit("change",i)}return{ui:r,options:n,submit:a}}}),Z3="";function Qv(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.buttonGroup.name),{class:"fs-table-columns-fixed-controller"},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.options,o=>(l.openBlock(),l.createBlock(s,{key:o.icon,type:e.modelValue===o.value?"primary":"default",icon:o.icon,size:"small",onClick:c=>e.submit(o.value)},null,8,["type","icon","onClick"]))),128))]),_:1})}const ew=rt(Zv,[["render",Qv]]),tw={class:"component--list"},rw={key:"__first__",class:"component--list-item",flex:"main:justify cross:center"},nw={span:12},aw={class:"title"},iw=["title","i"],sw={class:"item-right"},ow={"flex-box":"0",class:"component--list-item-handle handle"},Q0=l.defineComponent({__name:"fs-columns-filter-layout-default",props:{width:{},drawer:{}},setup(e){const t=e,{ui:r}=de.useUi(),{originalColumns:n,currentColumns:a,text:i,active:s}=l.inject(nl),o=l.computed(()=>G.merge({[r.drawer.visible]:s.value,["onUpdate:"+r.drawer.visible]:k=>{s.value=k},[r.drawer.width]:t.width||"300px"},t.drawer)),c=l.ref(!1);function f(k){c.value=k,a.value=a.value.map(w=>(!w.__show||w.__disabled||(w.show=k),w))}const u=l.computed(()=>({[r.checkbox.modelValue]:c.value,["onUpdate:"+r.checkbox.modelValue]:k=>{f(k)}})),h=l.computed(()=>a.value.filter(k=>k.__show&&k.show===!0).length),d=l.computed(()=>a.value.filter(k=>k.__show).length),p=l.computed(()=>h.value>0&&h.value<d.value);l.watch(()=>{a.value},()=>{x()},{immediate:!0});function g(k){const w=k.draggedContext.element,S=k.relatedContext.element,b=[];for(const H of a.value)H.key===w.key?b.push(S):H.key===S.key?b.push(w):b.push(H);let T=0,y=b.length-1,O=b.length-1,B=0;for(let H=0;H<b.length;H++){const j=b[H];j.fixed==="left"?T=H:j.fixed==="right"?y=y>H?H:y:(O=O>H?H:O,B=B<H?H:B)}if(O<T||B>y)return!1}function m(k,w){w&&(a.value[k].show=!0),w==="left"&&a.value.unshift(a.value.splice(k,1)[0]),w==="right"&&a.value.push(a.value.splice(k,1)[0]),x()}function x(){c.value=h.value===d.value}function v(k){return k.label||k.title||k.key||i.value.unnamed}return(k,w)=>{const S=l.resolveComponent("fs-icon");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).drawer.name),l.mergeProps({class:"fs-columns-filter-layout-default",title:l.unref(i).title},o.value,{"append-to-body":""}),{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).drawer.hasContentWrap||"div"),{class:"fs-drawer-wrapper fs-table-columns-filter",title:l.unref(i).title},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).card.name),{shadow:"never"},{default:l.withCtx(()=>[l.createElementVNode("div",tw,[l.createElementVNode("div",rw,[l.createElementVNode("span",nw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).checkbox.name),l.mergeProps({indeterminate:p.value},u.value),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(h.value)+" / "+l.toDisplayString(d.value),1)]),_:1},16,["indeterminate"]))]),l.createElementVNode("span",aw,l.toDisplayString(l.unref(i).fixed)+" / "+l.toDisplayString(l.unref(i).order),1)]),l.createVNode(l.unref(Jv),{modelValue:l.unref(a),"onUpdate:modelValue":w[0]||(w[0]=b=>l.isRef(a)?a.value=b:null),"item-key":"key",move:g},{item:l.withCtx(({element:b,index:T})=>{var y,O;return[l.withDirectives(l.createElementVNode("div",{title:v(b),class:"component--list-item",flex:"main:justify cross:center",i:T},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).checkbox.name),l.normalizeProps({[l.unref(r).checkbox.modelValue]:b.show,["onUpdate:"+l.unref(r).checkbox.modelValue]:B=>b.show=B,disabled:((y=l.unref(n)[b.key])==null?void 0:y.__disabled)===!0,class:"item-label",title:v(b),onChange:x}),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(v(b)),1)]),_:2},1040,["disabled","title"])),l.createElementVNode("div",sw,[l.createVNode(ew,{modelValue:b.fixed,"onUpdate:modelValue":B=>b.fixed=B,"flex-box":"0",class:"d2-mr-10",onChange:B=>m(T,B)},null,8,["modelValue","onUpdate:modelValue","onChange"]),l.createElementVNode("div",ow,[l.createVNode(S,{icon:l.unref(r).icons.sort},null,8,["icon"])])])],8,iw),[[l.vShow,((O=l.unref(n)[b.key])==null?void 0:O.__show)!==!1]])]}),_:1},8,["modelValue"])])]),_:1})),l.renderSlot(k.$slots,"buttons")]),_:3},8,["title"]))]),_:3},16,["title"])}}}),lw=l.defineComponent({name:"FsSearchButtons",inheritAttrs:!1,props:{buttons:{type:Object}},setup(){const{ui:e}=de.useUi();return{ui:e}}}),cw={class:"fs-search-col fs-search-btns"};function fw(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",cw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.buttons,(o,c)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c},[o.show?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0},o,{onClick:f=>o._click()}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))]),_:1}))])}const eu=rt(lw,[["render",fw]]),uw=l.defineComponent({name:"FsSearch",components:{FsSearchButtons:eu},inheritAttrs:!1,props:{container:{type:Object},initialForm:{type:Object},validatedForm:{type:Object},options:{type:Object},columns:{type:Object},buttons:{type:Object},searchAfterReset:{type:Boolean,default:!0},autoSearch:{type:Boolean,default:!0},debounce:{type:[Boolean,Object],default:void 0},slots:{type:Object,default(){return{}}},show:{type:Boolean,default:!0},validate:{default:!1},validateOnChange:{default:!0,type:Boolean},col:{},formItem:{type:Object,default:void 0}},emits:["search","reset","_reset","validate-error","update:validatedForm"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=n,{doComputed:i,AsyncComputeValue:s,ComputeValue:o}=Pn();G.each(e.columns,A=>{A.value!=null&&(A.value instanceof s||A.value instanceof o)&&Fe.warn("search.value配置不支持ComputeValue/AsyncCompute类型的动态计算")});function c(){const A={};return G.forEach(e.columns,(_,F)=>{var M;if(_.value===void 0)return;const D=l.unref(_.value);D!==void 0&&_.show!==!1&&((M=_.component)==null?void 0:M.show)!==!1&&(A[F]=D)}),G.cloneDeep(n({},e.initialForm,A))}const f=l.reactive(c());let u=null;const h=i(()=>e.columns,b,null,A=>{const _=G.cloneDeep(e.formItem||{});A=n(_,A),e.validate||G.forEach(A,M=>{delete M.rules,delete M.rule}),e.col&&G.forEach(A,M=>{M.col=n({},e.col,M.col)}),G.forEach(A,M=>{M._cellRender=()=>m(M)});let F=[];G.forEach(A,(M,K)=>{M._key=K,F.push(M)}),F=G.sortBy(F,M=>M.order??In.orderDefault);const D={};return F.forEach(M=>{let K=M._key;delete M._key,D[K]=M}),D});function d(){const A=G.cloneDeep(f);t.emit("update:validatedForm",A)}l.watch(()=>e.validatedForm,A=>{for(const _ in f)delete f[_];n(f,A||{})},{deep:!0});const p=(A,_)=>G.get(A,_);function g(A){if(A!=null)return A.indexOf(".")>=0?A.split("."):A}function m(A){const _=A.key;async function F(re){z(re,A)}function D(){oe(A)}function M(re,le){le.code==="Enter"&&re.autoSearchTrigger==="enter"&&O()}let K=null;e.slots["search_"+_]?K=l.createVNode(l.resolveComponent("fs-slot-render"),{slots:e.slots["search_"+_],scope:T(_)},null):A.render?K=l.createVNode(l.resolveComponent("fs-render"),{"render-func":A.render,scope:T(_)},null):A.component&&A.component.show!==!1&&(K=l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({ref:re=>{k.value[_]=re},"model-value":p(f,_),onKeyup:re=>{M(A,re)}},A.component,{scope:T(_),"onUpdate:modelValue":F,onInput:D}),null));const J=g(_);return r.formItem.render({prop:_,label:A.title,props:{...A,label:A.title,[r.formItem.prop]:J,path:_,rulePath:_},slots:{default(){return K}}})}const x=l.ref(),{t:v}=nr(),k=l.ref({});function w(A){return k.value[A]}function S(A){var _;return(_=w(A))==null?void 0:_.getTargetRef()}function b(){return{form:f,validatedForm:e.validatedForm,getComponentRef:S}}function T(A){return{...b(),key:A,value:G.get(f,A)}}async function y(A=!1,_="search"){try{return e.validate&&await r.form.validateWrap(x.value),!0}catch(F){return A||t.emit("validate-error",{...b(),error:F,trigger:_}),!1}}async function O(){u&&u.cancel(),await y()&&(d(),await l.nextTick(),t.emit("search",b()))}async function B(){const A=c(),_=G.entries(f);for(const F of _){const D=G.get(A,F[0]);D==null?G.unset(f,F[0]):G.set(f,F[0],D)}await y()&&(d(),await l.nextTick(),e.reset&&e.reset(b()),t.emit("_reset",b()),t.emit("reset",b()),e.searchAfterReset&&O())}const H=l.computed(()=>{const A=[],_={search:{show:!0,type:"primary",disabled:!1,click:F=>{O()},order:1,text:v("fs.search.search.text")},reset:{show:!0,disabled:!1,click:F=>{B()},text:v("fs.search.reset.text"),order:2}};n(_,e.buttons);for(let F in _){const D=_[F];D._click=()=>{D.click(b())},A.push(D)}return A.sort((F,D)=>F.order-D.order),A});function j(){var A;if(e.autoSearch!==!1&&e.debounce!==!1){let _=((A=e.debounce)==null?void 0:A.wait)||500;u=G.debounce(O,_,e.debounce)}}j();function I(){return f}function X(){return e.validatedForm}function q(A,_=!0){_||G.each(G.keys(f),F=>{delete f[F]}),a(f,A),d()}const te=l.ref(!1),ae=()=>{Fe.debug("do auto search,inputEventDisabled:",te.value),te.value!==!0&&u&&u()},oe=A=>{A.autoSearchTrigger==="input"&&ae()},ue=A=>{te.value=A,ae()};async function z(A,_){const F=_.key;G.set(f,F,A);const D=e.validateOnChangeSilent;if(e.validateOnChange&&await y(D,"change")&&d(),_.valueChange){const M=_.key,K=f[M],J=S(M);(_.valueChange instanceof Function?_.valueChange:_.valueChange.handle)({key:M,value:K,componentRef:J,...b()})}(_.autoSearchTrigger==null||_.autoSearchTrigger===!0||_.autoSearchTrigger==="change")&&ae()}const W=l.computed(()=>e.validate?e.options.rules:[]);return d(),{get:p,ui:r,onValueChanged:z,doValidate:y,doSearch:O,doReset:B,formData:f,componentRenderRefs:k,getComponentRenderRef:w,getComponentRef:S,getForm:I,getValidatedForm:X,setForm:q,searchFormRef:x,onInput:oe,inputEventDisabled:te,changeInputEventDisabled:ue,computedColumns:h,computedButtons:H,computedRules:W,buildFieldContext:T,getContextFn:b}}}),Q3="",hw={class:"fs-search fs-search-v2"};function dw(e,t,r,n,a,i){const s=l.resolveComponent("fs-button"),o=l.resolveComponent("fs-slot-render");return l.openBlock(),l.createElementBlock("div",hw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.collapseTransition.name),null,{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),l.mergeProps({ref:"searchFormRef",model:e.formData},e.options,{rules:e.computedRules,class:"fs-search-form",onCompositionstart:t[0]||(t[0]=c=>e.changeInputEventDisabled(!0)),onCompositionend:t[1]||(t[1]=c=>e.changeInputEventDisabled(!1))}),{default:l.withCtx(()=>{var c;return[e.show!==!1?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(((c=e.container)==null?void 0:c.is)||"fs-search-layout-default"),l.mergeProps({key:0},e.container,{columns:e.computedColumns,"get-context-fn":e.getContextFn}),l.createSlots({"search-buttons":l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(f,u)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:u},[f.show!==!1?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0},f,{onClick:h=>f._click()}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))]),_:2},[e.slots["search-left"]?{name:"search-left",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-left"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"0"}:void 0,e.slots["search-middle"]?{name:"search-middle",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-middle"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"1"}:void 0,e.slots["search-right"]?{name:"search-right",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-right"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"2"}:void 0]),1040,["columns","get-context-fn"])):l.createCommentVNode("",!0)]}),_:1},16,["model","rules"]))]),_:1}))])}const tu=rt(uw,[["render",dw]]),mw=l.defineComponent({name:"FsSearchV1",components:{FsSearchButtons:eu},inheritAttrs:!1,props:{initialForm:{type:Object},options:{type:Object},columns:{type:Object},tabs:{type:Object},buttons:{type:Object},searchAfterReset:{type:Boolean,default:!0},autoSearch:{type:Boolean,default:!0},debounce:{type:[Boolean,Object],default:void 0},slots:{default(){return{}}},show:{type:Boolean,default:!0},validate:{default:!1},layout:{type:String,default:"single-line"},col:{},collapse:{type:Boolean,default:!1}},emits:["search","reset","collapse","update:collapse"],setup(e,t){const{ui:r}=de.useUi();l.onMounted(()=>{if(z.value&&q.value){te.value=q.value.$el.offsetHeight;const A=q.value.$el.children;A&&A.length>1&&(ae.value=A[1].offsetHeight+2)}});let n=null;function a(){return G.cloneDeep(e.initialForm||{})}const i=l.reactive(a()),{doComputed:s,AsyncComputeValue:o}=Pn();G.each(e.columns,A=>{A.value!=null&&A.value instanceof o&&Fe.warn("search.value配置不支持AsyncCompute类型的动态计算")});const{merge:c}=Ze(),f=c,u=s(()=>e.columns,x,null,A=>{e.validate||G.forEach(A,D=>{delete D.rules}),e.col&&G.forEach(A,D=>{D.col=c({},e.col,D.col)});let _=[];G.forEach(A,(D,M)=>{D._key=M,_.push(D)}),_=G.sortBy(_,D=>D.order??In.orderDefault);const F={};return _.forEach(D=>{let M=D._key;delete D._key,F[M]=D}),F});G.forEach(u.value,(A,_)=>{var D;if(A.value===void 0)return;const F=l.unref(A.value);F!==void 0&&A.show!==!1&&((D=A.component)==null?void 0:D.show)!==!1&&(i[_]=F)});const h=l.ref(),{t:d}=nr(),p=l.ref({});function g(A){return p.value[A]}function m(A){var _,F;return(F=(_=g(A))==null?void 0:_.$refs)==null?void 0:F.targetRef}function x(){return{form:i,validatedForm:i,getComponentRef:m}}const v=l.ref(x());async function k(){if(n&&n.cancel(),await r.form.validateWrap(h.value))t.emit("search",v.value);else return r.message.error({message:d("fs.search.error.message")}),!1}function w(){const A=a(),_=G.entries(i);for(const F of _){const D=G.get(A,F[0]);D==null?G.unset(i,F[0]):G.set(i,F[0],D)}e.reset&&e.reset(v.value),t.emit("reset",x()),e.searchAfterReset&&l.nextTick(()=>{k()})}const S=l.computed(()=>{const A=[],_={search:{show:!0,type:"primary",disabled:!1,click:F=>{k()},order:1,text:d("fs.search.search.text")},reset:{show:!0,disabled:!1,click:F=>{w()},text:d("fs.search.reset.text"),order:2}};c(_,e.buttons);for(let F in _){const D=_[F];D._click=()=>{D.click(x())},A.push(D)}return A.sort((F,D)=>F.order-D.order),A});function b(){var A;if(e.autoSearch!==!1&&e.debounce!==!1){let _=((A=e.debounce)==null?void 0:A.wait)||500;n=G.debounce(k,_,e.debounce)}}b();function T(){return i}function y(A,_=!0){_||G.each(G.keys(i),F=>{delete i[F]}),f(i,A)}const O=l.ref(!1),B=()=>{Fe.debug("do auto search,inputEventDisabled:",O.value),O.value!==!0&&n&&n()},H=A=>{A.autoSearchTrigger==="input"&&B()},j=A=>{O.value=A,B()};function I(A,_){const F=_.key;if(G.set(i,F,A),_.valueChange){const D=_.key,M=i[D],K=m(D);(_.valueChange instanceof Function?_.valueChange:_.valueChange.handle)({key:D,value:M,componentRef:K,...x()})}(_.autoSearchTrigger==null||_.autoSearchTrigger===!0||_.autoSearchTrigger==="change")&&B()}const X=l.computed(()=>e.validate?e.options.rules:[]),q=l.ref(),te=l.ref(0),ae=l.ref(0),oe=()=>{t.emit("update:collapse",!e.collapse),t.emit("collapse",!e.collapse)},ue=l.computed(()=>e.layout==="multi-line"?r.col.name:"div"),z=l.computed(()=>e.layout==="multi-line"),W=l.computed(()=>z.value?e.collapse?ae.value?ae.value+"px":"":te.value?te.value+"px":"":"auto");return{get:(A,_)=>G.get(A,_),ui:r,onValueChanged:I,doSearch:k,doReset:w,form:i,componentRenderRefs:p,getComponentRenderRef:g,getComponentRef:m,getForm:T,setForm:y,searchFormRef:h,onInput:H,inputEventDisabled:O,changeInputEventDisabled:j,computedColumns:u,computedButtons:S,computedRules:X,columnsRowRef:q,computedColumnBoxHeight:W,computedColName:ue,computedIsMultiLine:z,toggleCollapse:oe,searchEventContextRef:v}}}),eD="",pw={class:"fs-search-box"},gw={class:"fs-search-main"},xw={key:0,class:"fs-search-col"},vw={key:1,class:"fs-search-col fs-search-middle"},ww={key:3,class:"fs-search-col fs-search-right"},_w={key:0,class:"fs-search-action"};function yw(e,t,r,n,a,i){const s=l.resolveComponent("fs-slot-render"),o=l.resolveComponent("fs-component-render"),c=l.resolveComponent("fs-search-buttons"),f=l.resolveComponent("fs-button");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.collapseTransition.name),null,{default:l.withCtx(()=>[e.show!==!1?(l.openBlock(),l.createElementBlock("div",{key:0,class:l.normalizeClass(["fs-search",{"fs-search-multi-line":e.computedIsMultiLine}])},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),l.mergeProps({ref:"searchFormRef",model:e.form},e.options,{rules:e.computedRules,class:"fs-search-form",onCompositionstart:t[0]||(t[0]=u=>e.changeInputEventDisabled(!0)),onCompositionend:t[1]||(t[1]=u=>e.changeInputEventDisabled(!1))}),{default:l.withCtx(()=>[l.createElementVNode("div",pw,[l.createElementVNode("div",gw,[l.createElementVNode("div",{class:l.normalizeClass(["fs-search-columns",{"fs-search-collapse":e.collapse}]),style:l.normalizeStyle({height:e.computedColumnBoxHeight})},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),{ref:"columnsRowRef"},{default:l.withCtx(()=>[e.slots["search-left"]?(l.openBlock(),l.createElementBlock("div",xw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-left"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedColumns,(u,h)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:h},[u.show===!0?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedColName),l.mergeProps({key:0,class:"fs-search-col"},u.col),{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.mergeProps(u,{[e.ui.formItem.prop||""]:h,label:u.title}),{default:l.withCtx(()=>[e.slots["search_"+h]?(l.openBlock(),l.createBlock(s,{key:0,slots:e.slots["search_"+h],scope:{...e.searchEventContextRef,key:h}},null,8,["slots","scope"])):(l.openBlock(),l.createElementBlock(l.Fragment,{key:1},[u.component&&u.component.show!==!1?(l.openBlock(),l.createBlock(o,l.mergeProps({key:0,ref_for:!0,ref:d=>{d&&(e.componentRenderRefs[u.key]=d)},"model-value":e.get(e.form,h)},u.component,{scope:e.searchEventContextRef,"onUpdate:modelValue":d=>e.onValueChanged(d,u),onInput:d=>e.onInput(u)}),null,16,["model-value","scope","onUpdate:modelValue","onInput"])):l.createCommentVNode("",!0)],64))]),_:2},1040,["label"]))]),_:2},1040)):l.createCommentVNode("",!0)],64))),128)),e.slots["search-middle"]?(l.openBlock(),l.createElementBlock("div",vw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-middle"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0),e.computedIsMultiLine?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(c,{key:2,buttons:e.computedButtons},null,8,["buttons"])),e.slots["search-right"]?(l.openBlock(),l.createElementBlock("div",ww,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-right"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0)]),_:1},512))],6),e.computedIsMultiLine?(l.openBlock(),l.createBlock(c,{key:0,buttons:e.computedButtons},null,8,["buttons"])):l.createCommentVNode("",!0)]),e.computedIsMultiLine?(l.openBlock(),l.createElementBlock("div",_w,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(f,{icon:e.collapse?e.ui.icons.caretUp:e.ui.icons.caretDown,onClick:e.toggleCollapse},null,8,["icon","onClick"])]),_:1}))])):l.createCommentVNode("",!0)])]),_:1},16,["model","rules"]))],2)):l.createCommentVNode("",!0)]),_:1})}const ru=rt(mw,[["render",yw]]),kw=l.defineComponent({name:"FsSearchLayoutDefault",props:{collapse:{type:Boolean,default:!0},collapseButton:{type:Object},action:{type:Object},layout:{type:String,default:"single-line"},columns:{type:Object},col:{type:Object},getContextFn:{type:Function}},emits:["update:collapse","collapse"],setup(e,t){const{ui:r}=de.useUi(),{t:n}=nr(),a=l.ref(),i=l.computed(()=>e.layout==="multi-line");l.onMounted(()=>{i.value&&a.value&&(o.value=a.value.$el.offsetHeight)});const s=l.computed(()=>!i.value||!e.collapse?"auto":o.value?o.value+"px":""),o=l.ref(0),c=()=>{t.emit("update:collapse",!e.collapse),t.emit("collapse",!e.collapse)};function f(u){return G.merge({},e.col,u)}return{ui:r,columnsRowRef:a,computedColumnBoxHeight:s,computedIsMultiLine:i,toggleCollapse:c,mergeCol:f,t:n}}}),tD="",Ew={class:"fs-search-box"},bw={class:"fs-search-col fs-search-slot"},Sw={class:"fs-search-col fs-search-slot"},Tw={key:0,class:"fs-search-buttons-group fs-search-multi-line-buttons"};function Fw(e,t,r,n,a,i){var c;const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",{class:l.normalizeClass(["fs-search-layout-default",{"fs-search-multi-line":e.computedIsMultiLine}])},[l.createElementVNode("div",Ew,[l.createElementVNode("div",{class:l.normalizeClass(["fs-search-main",{"fs-search-collapse":e.collapse}]),style:l.normalizeStyle({maxHeight:e.computedColumnBoxHeight})},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),{ref:"columnsRowRef",class:"fs-search-columns"},{default:l.withCtx(()=>{var f;return[l.createElementVNode("span",bw,[l.renderSlot(e.$slots,"search-left")]),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.columns,(u,h)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:h},[u.show?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-search-col"},e.mergeCol(u.col)),{default:l.withCtx(()=>[l.createVNode(s,{"render-func":u._cellRender,scope:e.getContextFn()},null,8,["render-func","scope"])]),_:2},1040)):l.createCommentVNode("",!0)],64))),128)),l.createElementVNode("span",Sw,[l.renderSlot(e.$slots,"search-middle")]),e.computedIsMultiLine?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-search-col fs-search-buttons-group"},e.mergeCol((f=e.action)==null?void 0:f.col)),{default:l.withCtx(()=>{var u;return[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.normalizeProps({[e.ui.formItem.label||""]:(u=e.action)==null?void 0:u.label}),{default:l.withCtx(()=>[l.renderSlot(e.$slots,"search-buttons",l.normalizeProps(l.guardReactiveProps(e.getContextFn()))),l.renderSlot(e.$slots,"search-right",l.normalizeProps(l.guardReactiveProps(e.getContextFn())))]),_:3},16))]}),_:3},16))]}),_:3},512))],6),e.computedIsMultiLine?(l.openBlock(),l.createElementBlock("div",Tw,[l.renderSlot(e.$slots,"search-buttons"),((c=e.collapseButton)==null?void 0:c.show)!==!1?(l.openBlock(),l.createBlock(o,l.mergeProps({key:0,icon:e.collapse?e.ui.icons.caretUp:e.ui.icons.caretDown,text:e.collapse?e.t("fs.search.container.collapseButton.text.expand"):e.t("fs.search.container.collapseButton.text.collapse")},e.collapseButton,{onClick:e.toggleCollapse}),null,16,["icon","text","onClick"])):l.createCommentVNode("",!0),l.renderSlot(e.$slots,"search-right")])):l.createCommentVNode("",!0)])],2)}const nu=rt(kw,[["render",Fw]]),Cw={class:"fs-tabs-filter"},Aw=l.defineComponent({name:"FsTabsFilter",inheritAttrs:!1}),au=l.defineComponent({...Aw,props:{name:{},show:{type:Boolean,default:!1},defaultOption:{default:void 0},options:{default:()=>[]},modelValue:{},value:{default:"value"},label:{default:"label"}},emits:["update:modelValue","change"],setup(e,{emit:t}){const r=e,n=l.useAttrs(),{merge:a}=Ze(),i=l.computed(()=>a({show:!0,value:null,label:"全部"},r.defaultOption||{})),s="_default_key_",o=l.computed(()=>{const d=r.modelValue==null||r.modelValue===i.value.value?s:r.modelValue;return{type:"card",...n,[h.tabs.modelValue]:d,["onUpdate:"+h.tabs.modelValue]:c}});function c(d){s===d&&(d=i.value.value);const p=r.modelValue;t("update:modelValue",d),p!==d&&t("change",d)}function f(d){return d[r.value]}function u(d){return d[r.label]}const{ui:h}=de.useUi();return(d,p)=>(l.openBlock(),l.createElementBlock("div",Cw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabs.name),l.normalizeProps(l.guardReactiveProps(o.value)),{default:l.withCtx(()=>[i.value.show?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabPane.name),l.normalizeProps({key:0,[l.unref(h).tabPane.key||""]:s,[l.unref(h).tabPane.tab||""]:i.value.label}),null,16)):l.createCommentVNode("",!0),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(d.options,(g,m)=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabPane.name),l.normalizeProps({key:m,[l.unref(h).tabPane.key||""]:f(g),[l.unref(h).tabPane.tab||""]:u(g)}),null,16))),128))]),_:1},16))]))}}),rD="",Dw=l.defineComponent({name:"FsDictRadio",props:{dict:{},options:{type:Array},radioName:{},optionName:{type:String},optionProps:{type:Object,default(){return{}}},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{ui:r}=de.useUi();e.radioName&&console.warn("参数radioName即将废弃，请改成optionName");const n=l.computed(()=>e.optionName??e.radioName??r.radio.name);let a=vn(e,t,r.radioGroup.modelValue);const i=a.createComputedOptions();return{ui:r,computedRadioName:n,...a,computedOptions:i}}});function Rw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.radioGroup.name),null,{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedOptions,s=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedRadioName),l.mergeProps({key:e.getValue(s),[e.ui.radio.value||""]:e.getValue(s)},e.optionProps),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(e.getLabel(s)),1)]),_:2},1040))),128))]),_:1})}const iu=rt(Dw,[["render",Rw]]),su=l.defineComponent({name:"FsDictSelect",props:{dict:{},options:{type:Array},placeholder:{type:String},slots:{},renderLabel:{type:Function},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{t:r}=nr(),n=l.computed(()=>e.placeholder||r("fs.component.select.placeholder")),{ui:a}=de.useUi(),i=vn(e,t,a.select.modelValue),s=i.createComputedOptions();return{computedPlaceholder:n,...i,computedOptions:s}},render(){const{ui:e}=de.useUi(),t=l.resolveDynamicComponent(e.select.name);if(e.option.name==null){const i=this.computedOptions||[];return l.createVNode(t,{placeholder:this.computedPlaceholder,options:i,renderLabel:this.renderLabel},null)}const r=[],n=l.resolveDynamicComponent(e.option.name),a=this.computedOptions||[];for(const i of a){const s=l.createVNode(n,l.mergeProps(i,{value:this.getValue(i),label:this.getLabel(i)}),{default:()=>[this.renderLabel?this.renderLabel(i):this.getLabel(i)]});r.push(s)}return l.createVNode(t,{placeholder:this.computedPlaceholder},{default:()=>[r],...this.slots})}});function Ow(e){if(e==null)return 0;typeof e!="string"&&(e=JSON.stringify(e));let t=0,r,n,a;if(e.length===0)return t;for(r=0,a=e.length;r<a;r++)n=e.charCodeAt(r),t=(t<<5)-t+n,t|=0;return t}function Bw(e){let t=[];return typeof e.modelValue=="string"&&e.multiple&&e.separator!=null&&e.separator!==""?t=e.modelValue.split(e.separator):e.modelValue instanceof Array?t=e.modelValue:t=[e.modelValue],t}const Nw=l.defineComponent({name:"FsValuesFormat",props:{modelValue:{},dict:{},multiple:{default:!0},separator:{default:","},color:{},effect:{},autoColors:{type:Array},autoEffects:{type:Array},type:{default:"tag"},valueType:{type:String},defaultLabel:{},labelFormatter:{type:Function},itemRender:{type:Function},closable:{type:Boolean,default:!1}},emits:["click","dict-change","close","update:modelValue"],setup(e,t){const{ui:r}=de.useUi(),n=r.tag.colors,a=["plain","light"],i=vn(e,t),{getColor:s,getValue:o,removePropValue:c}=i;i.watchValue();function f(p,g){!g.effect&&p.effect&&(g.effect=p.effect);const m=r.tag.type,x=s(g);if(x!=null){if(typeof x!="string")return;c(g,"color"),g[m]=x;return}if(p.color==="auto"){const v=Ow(o(g)),k=p.autoColors?p.autoColors:n;g[m]=k[v%k.length];const w=p.autoEffects?p.autoEffects:a;g.effect=w[Math.floor(v/k.length)%w.length]}else g[m]=p.color}const u=l.computed(()=>{var w,S;if(e.valueType==="object")return e.modelValue&&!Array.isArray(e.modelValue)?[e.modelValue]:e.modelValue;const p=i.getDict();if(e.modelValue==null||e.modelValue==="")return[];const g=Bw(e);let m=[];const x=((w=e.dict)==null?void 0:w.value)||"value",v=((S=e.dict)==null?void 0:S.label)||"label";p?(m=p.getNodesFromDataMap(g),G.forEach(m,b=>{b[v]==null&&(b[v]=e.defaultLabel||b[x])})):(m=[],G.forEach(g,b=>{b instanceof Object?m.push(b):m.push({[x]:b,[v]:b})}));const k=[];return G.forEach(m,b=>{k.push(G.omit(b,"children"))}),G.forEach(k,b=>{f(e,b)}),k});function h(p){t.emit("click",{item:p})}function d(p,g){t.emit("close",{item:g,index:p});const m=[];for(let x=0;x<u.value.length;x++)x!==p&&m.push(o(u.value[x]));t.emit("update:modelValue",m)}return{ui:r,...i,doClick:h,computedValueItems:u,doClose:d}}}),nD="",Pw={class:"fs-values-format"},Iw=["onClick"];function Lw(e,t,r,n,a,i){const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("span",Pw,[e.itemRender?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:0},l.renderList(e.computedValueItems,c=>(l.openBlock(),l.createBlock(s,{key:e.getValue(c),"render-func":e.itemRender,scope:c},null,8,["render-func","scope"]))),128)):e.type==="text"?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:1},l.renderList(e.computedValueItems,c=>(l.openBlock(),l.createElementBlock("span",{key:e.getValue(c),onClick:f=>e.doClick(c)},l.toDisplayString(e.getLabel(c)),9,Iw))),128)):(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:2},l.renderList(e.computedValueItems,(c,f)=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.tag.name),l.mergeProps({key:e.getValue(c),class:"fs-tag",size:"small",closable:e.closable},c,{icon:null,name:null,onClose:u=>e.doClose(f,c),onClick:u=>e.doClick(c)}),{default:l.withCtx(()=>[c.icon?(l.openBlock(),l.createBlock(o,{key:0,icon:c.icon,class:"fs-tag-icon"},null,8,["icon"])):l.createCommentVNode("",!0),l.createTextVNode(" "+l.toDisplayString(e.getLabel(c)),1)]),_:2},1040,["closable","onClose","onClick"]))),128))])}const ou=rt(Nw,[["render",Lw]]),Mw=l.defineComponent({name:"FsDictCascaderFormat",props:{modelValue:{type:[String,Array],default:void 0,require:!0},separator:{type:String,default:",",require:!1},multiple:{type:Boolean,default:!1},dict:{type:Object,default:void 0,require:!1}},emits:["dict-change"],setup(e,t){var n;const r=vn(e,t);return(n=e.dict)!=null&&n.getNodesByValues&&r.watchValue(),{...r}},data(){return{}},computed:{labels(){return this.modelValue==null?[]:this.buildValueItem(this.modelValue)},multipleLabels(){if(this.modelValue==null)return[];const e=[];for(const t of this.modelValue)e.push(this.buildValueItem(t));return e}},methods:{getValueArr(e){if(e==null)if(this.multiple){e=[];for(const r of this.modelValue)for(const n of r)e.push(n)}else e=this.modelValue;if(e==null)return[];let t=null;return typeof e=="string"&&!this.multiple&&this.separator!=null&&this.separator!==""?t=e.split(this.separator):e instanceof Array?t=e:t=[e],t},buildValueItem(e){const t=this.getValueArr(e),r=this.getDict();if(r)return r.getNodesFromDataMap(t)}}}),Vw={key:0},Uw={key:0};function $w(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",null,[e.multiple?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:0},l.renderList(e.multipleLabels,(s,o)=>(l.openBlock(),l.createElementBlock("div",{key:o},[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(s,(c,f)=>(l.openBlock(),l.createElementBlock("span",{key:f},[f!==0?(l.openBlock(),l.createElementBlock("span",Vw," / ")):l.createCommentVNode("",!0),l.createElementVNode("span",null,l.toDisplayString(e.getLabel(c)),1)]))),128))]))),128)):(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:1},l.renderList(e.labels,(s,o)=>(l.openBlock(),l.createElementBlock("span",{key:o},[o!==0?(l.openBlock(),l.createElementBlock("span",Uw," / ")):l.createCommentVNode("",!0),l.createElementVNode("span",null,l.toDisplayString(e.getLabel(s)),1)]))),128))])}const lu=rt(Mw,[["render",$w]]),Ww=l.defineComponent({name:"FsDictCascader",props:{dict:{},options:{type:Array},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const r=vn(e,t),{ui:n}=de.useUi(),a=l.ref();e.dict&&(a.value=n.cascader.fieldNames({value:e.dict.value,label:e.dict.label,children:e.dict.children}));const i=r.createComputedOptions();return{ui:n,...r,fieldNamesBinder:a,computedOptions:i}}});function Hw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.cascader.name),l.mergeProps({options:e.computedOptions},e.fieldNamesBinder),null,16,["options"])}const cu=rt(Ww,[["render",Hw]]),jw=l.defineComponent({name:"FsDictCheckbox",props:{dict:{},options:{type:Array,default:void 0,require:!1},optionName:{type:String},optionProps:{type:Object,default(){return{}}},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{ui:r}=de.useUi();let n=vn(e,t,r.checkboxGroup.modelValue);const a=n.createComputedOptions();return{ui:r,...n,computedOptions:a}}});function zw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.checkboxGroup.name),null,{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedOptions,s=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.optionName||e.ui.checkbox.name),l.mergeProps({key:e.getValue(s),[e.ui.checkbox.value||""]:e.getValue(s)},e.optionProps),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(e.getLabel(s)),1)]),_:2},1040))),128))]),_:1})}const fu=rt(jw,[["render",zw]]),Gw=l.defineComponent({name:"FsDictSwitch",props:{dict:{type:Object},options:{},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{ui:r}=de.useUi();let n=vn(e,t,r.switch.modelValue);const a=n.createComputedOptions();return{ui:r,...n,computedOptions:a}},computed:{_active(){return this.computedOptions.length>0?this.computedOptions[0]:{}},_inActive(){return this.computedOptions.length>1?this.computedOptions[1]:{}},binding(){var t,r,n,a,i,s;const e=de.uiContext.get();return{[e.switch.activeText]:this._active[((t=this.dict)==null?void 0:t.label)||"label"],[e.switch.inactiveText]:this._inActive[((r=this.dict)==null?void 0:r.label)||"label"],[e.switch.activeColor]:this._active[((n=this.dict)==null?void 0:n.color)||"color"],[e.switch.inactiveColor]:this._inActive[((a=this.dict)==null?void 0:a.color)||"color"],[e.switch.activeValue]:this._active[((i=this.dict)==null?void 0:i.value)||"value"],[e.switch.inactiveValue]:this._inActive[((s=this.dict)==null?void 0:s.value)||"value"]}}}});function Xw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.switch.name),l.normalizeProps(l.guardReactiveProps(e.binding)),null,16)}const uu=rt(Gw,[["render",Xw]]),Kw=l.defineComponent({name:"FsDateFormat",props:{modelValue:{required:!1},valueFormat:{type:String,default:void 0,required:!1},format:{type:String,default:"YYYY-MM-DD HH:mm:ss",required:!1}},data(){return{item:{}}},computed:{doFormat(){if(this.modelValue==null||this.modelValue==="")return"";let e=null;return this.valueFormat!=null?e=At(this.modelValue,this.valueFormat):e=At(this.modelValue),e.format(this.format)}},created(){},methods:{}});function Yw(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",null,l.toDisplayString(e.doFormat),1)}const hu=rt(Kw,[["render",Yw]]),qw=l.defineComponent({name:"FsDictTree",props:{dict:{},options:{type:Array},placeholder:{type:String},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{t:r}=nr(),{ui:n}=de.useUi(),a=l.computed(()=>e.placeholder||r("fs.component.select.placeholder"));let i=vn(e,t);const s=i.createComputedOptions();return{ui:n,computedPlaceholder:a,...i,computedOptions:s}}});function Jw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.treeSelect.name),l.normalizeProps({[e.ui.treeSelect.options||""]:e.computedOptions,placeholder:e.computedPlaceholder}),null,16,["placeholder"])}const du=rt(qw,[["render",Jw]]),Zw={class:"fs-table-select"},Qw={class:"fs-table-select-current"},mu=l.defineComponent({__name:"fs-table-select",props:{modelValue:{},createCrudOptions:{},crudOptionsOverride:{default:void 0},dict:{},select:{default:void 0},showSelect:{type:Boolean,default:!0},dialog:{default:void 0},valuesFormat:{default:void 0},height:{default:void 0},multiple:{type:Boolean},crossPage:{type:Boolean,default:!0},rowKey:{default:void 0},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},valueType:{default:"value"}},emits:["change","update:modelValue"],setup(e,{expose:t,emit:r}){const n=e,a=l.useSlots(),{ui:i}=de.useUi(),s=l.ref(),o=l.ref(),c=l.ref(!1);function f(I){I==null||Array.isArray(I)&&I.length==0?g.value=[]:(n.multiple?g.value=I||[]:g.value=[I],n.valueType==="object"&&(g.value=g.value.map(X=>n.dict.getValue(X))))}const u=async()=>{var I,X;if(!(n.disabled||n.readonly||(I=n.select)!=null&&I.disabled||(X=n.select)!=null&&X.readonly)){if(n.dict==null)throw new Error("必须配置dict，且必须配置dict.getNodesByValues");c.value=!0,f(n.modelValue),await b.doRefresh()}},h=l.computed(()=>({...n.valuesFormat})),d=l.computed(()=>{const I=`onUpdate:${i.select.modelValue}`;let X=n.modelValue;return n.valueType==="object"&&n.modelValue&&(n.multiple?X=n.modelValue.map(q=>n.dict.getValue(q)):X=n.dict.getValue(n.modelValue)),{[i.select.modelValue]:X,[I]:q=>{r("update:modelValue",q)},[i.select.clearable]:!0,...i.select.buildMultiBinding(n.multiple),show:!1,...n.select}}),p=l.computed(()=>{const I=i.dialog.buildProps({title:"选择",width:"80%"});return k(I,n.dialog)});l.watch(()=>n.modelValue,async I=>{I!==g.value&&(f(I),await l.nextTick(),await n.dict.appendByValues(g.value))});const g=l.ref([]);function m(){return n.rowKey||w.value.table.rowKey||"id"}const x=l.ref(!1),v=l.computed(()=>{let I=i.table.buildSelectionCrudOptions({crossPage:n.crossPage,getRowKey:m,getPageData(){return w.value.data},multiple:n.multiple,selectedRowKeys:g,onSelectedKeysChanged:async q=>{g.value=[...q],await l.nextTick(),await n.dict.appendByValues(g.value)}});return k({table:{async onRefreshed(){i.table.setSelectedRows&&(x.value=!0,await l.nextTick(),await l.nextTick(),i.table.setSelectedRows({getRowKey:m,multiple:n.multiple,tableRef:b.getBaseTableRef(),selectedRowKeys:g}),x.value=!1)}}},I,n.crudOptionsOverride)}),{merge:k}=Ze(),{crudBinding:w,crudRef:S,crudExpose:b,context:T,appendCrudOptions:y,crudOptions:O}=Df({createCrudOptions:n.createCrudOptions,crudOptionsOverride:v.value});l.watch(()=>n.crudOptionsOverride,async(I,X)=>{var te;if(JSON.stringify(I)===JSON.stringify(X))return;const q=(te=w.value)==null?void 0:te.pagination[i.pagination.currentPage];y(I),S.value&&(w.value.pagination[i.pagination.currentPage]=q,await b.doRefresh({goFirstPage:!1}))});function B(){var X;if(n.dict.loading)return;let I=null;((X=g.value)==null?void 0:X.length)>0&&(I=[...g.value],n.valueType==="object"&&(I=I.map(q=>n.dict.getDictMap()[q])),n.multiple!==!0&&(I=I[0])),r("update:modelValue",I),r("change",I),c.value=!1}const H=()=>({opened:c,open:u}),j=l.ref(H());return t(j.value),(I,X)=>{var oe;const q=l.resolveComponent("fs-dict-select"),te=l.resolveComponent("fs-values-format"),ae=l.resolveComponent("fs-crud");return l.openBlock(),l.createElementBlock("div",Zw,[(oe=l.unref(a))!=null&&oe.default?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(q,l.mergeProps({key:0,ref_key:"dictSelectRef",ref:s,dict:I.dict,disabled:I.disabled,readonly:I.readonly},d.value,{open:!1,onClick:u}),null,16,["dict","disabled","readonly"])),l.renderSlot(I.$slots,"default",l.normalizeProps(l.guardReactiveProps(j.value))),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).formItem.skipValidationWrapper),null,{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).dialog.name),l.mergeProps({[l.unref(i).dialog.visible]:c.value,["onUpdate:"+l.unref(i).dialog.visible]:X[2]||(X[2]=ue=>c.value=ue)},p.value),{[l.unref(i).dialog.footerSlotName]:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).button.name),{onClick:X[1]||(X[1]=ue=>c.value=!1)},{default:l.withCtx(()=>[l.createTextVNode("取消")]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(i).button.name),{type:"primary",onClick:B},{default:l.withCtx(()=>[l.createTextVNode("确认")]),_:1}))]),default:l.withCtx(()=>[l.createElementVNode("div",{style:l.normalizeStyle({width:"100%",height:I.height||"60vh"})},[l.createVNode(ae,l.mergeProps({ref_key:"crudRef",ref:S},l.unref(w)),{"header-top":l.withCtx(()=>[l.createElementVNode("div",Qw,[l.createTextVNode(" 当前选中： "),l.createVNode(te,l.mergeProps({ref_key:"valuesFormatRef",ref:o,modelValue:g.value,"onUpdate:modelValue":X[0]||(X[0]=ue=>g.value=ue),dict:I.dict,closable:!0},h.value),null,16,["modelValue","dict"])])]),_:1},16)],4)]),_:2},1040))]),_:1}))])}}}),aD="",pu=Object.freeze(Object.defineProperty({__proto__:null,FsActionbar:x0,FsBox:Yf,FsButton:Hf,FsCell:m0,FsColumnsFilterLayoutDefault:Q0,FsComponentRender:Jf,FsContainer:Uf,FsCrud:n0,FsDateFormat:hu,FsDictCascader:cu,FsDictCascaderFormat:lu,FsDictCheckbox:fu,FsDictRadio:iu,FsDictSelect:su,FsDictSwitch:uu,FsDictTree:du,FsEditable:g0,FsEditableCell:p0,FsForm:Qf,FsFormHelper:t0,FsFormItem:e0,FsFormProvider:r0,FsFormWrapper:Pa,FsIcon:jf,FsIconSvg:Gf,FsIconify:zf,FsLabel:Xf,FsLayoutCard:Wf,FsLayoutDefault:$f,FsLoading:Kf,FsPage:ff,FsRender:Yo,FsRowHandle:a0,FsSearch:tu,FsSearchLayoutDefault:nu,FsSearchV1:ru,FsSlotRender:Zf,FsTable:d0,FsTableSelect:mu,FsTabsFilter:au,FsToolbar:v0,FsValuesFormat:ou},Symbol.toStringTag,{value:"Module"})),{setDictRequest:e2}=Lf(),gu={install(e,t={}){t.ui&&de.uiContext.set(t.ui);const{merge:r}=Ze();t.commonOptions&&(ci.commonOptions=t.commonOptions),t.dictRequest&&e2(t.dictRequest),t.i18n&&Ss.setVueI18n(t.i18n);for(const n in pu){const a=pu[n];e.component(n,a)}Pa._context=e._context,Na.install(),e.config.globalProperties.$fsui=de.uiContext.get(),r(Vf.logger,t.logger),t2(t.logger)}};function t2(e){var t;((t=e==null?void 0:e.off)==null?void 0:t.tableColumns)!==!1&&console.warn(`[fast-crud] crudBinding.value.table.columns / toolbar.columnsFilter.originalColumns 由array改成map. 请改成通过key读取，你可以全局代码搜索【value.table.columns / columnsFilter.originalColumns】来检查是否有使用它们。
      [通过 app.use(FastCrud,{logger:{off:{tableColumns:false}}}) 可关闭此警告] `)}function El(e){const t=navigator.userAgent;return e==="ie"?t.indexOf("compatible")>-1&&t.indexOf("MSIE")>-1?(new RegExp("MSIE (\\d+\\.\\d+);").test(t),parseFloat(RegExp.$1)):!1:t.indexOf(e)>-1}const r2={_isIE11(){let e=0;const t=/MSIE (\d+\.\d+);/.test(navigator.userAgent),r=!!navigator.userAgent.match(/Trident\/7.0/),n=navigator.userAgent.indexOf("rv:11.0");return t&&(e=Number(RegExp.$1)),navigator.appVersion.indexOf("MSIE 10")!==-1&&(e=10),r&&n!==-1&&(e=11),e===11},_isEdge(){return/Edge/.test(navigator.userAgent)},_getDownloadUrl(e){const t="\uFEFF";if(window.Blob&&window.URL&&window.URL.createObjectURL){const r=new Blob([t+e],{type:"text/csv"});return URL.createObjectURL(r)}else return"data:attachment/csv;charset=utf-8,"+t+encodeURIComponent(e)},download(e,t){if(El("ie")&&El("ie")<10){const r=window.top.open("about:blank","_blank");r.document.charset="utf-8",r.document.write(t),r.document.close(),r.document.execCommand("SaveAs",e+".csv"),r.close()}else if(El("ie")===10||this._isIE11()||this._isEdge()){const r="\uFEFF",n=new Blob([r+t],{type:"text/csv"});navigator.msSaveBlob(n,e+".csv")}else{const r=document.createElement("a");r.download=e+".csv",r.href=this._getDownloadUrl(t),document.body.appendChild(r),r.click(),document.body.removeChild(r)}}},n2=`\r
`,bl=(e,t,{separator:r,quoted:n})=>{const a=t.map(i=>n?(i=typeof i=="string"?i.replace(/"/g,'"'):i,`"${i}"`):i);e.push(a.join(r))},a2={separator:",",quoted:!1};function i2(e,t,r,n=!1){r=Object.assign({},a2,r);let a;const i=[],s=[];return e?(a=e.map(o=>typeof o=="string"?o:(n||s.push(typeof o.label<"u"?o.label:o.prop),o.prop)),s.length>0&&bl(i,s,r)):(a=[],t.forEach(o=>{Array.isArray(o)||(a=a.concat(Object.keys(o)))}),a.length>0&&(a=a.filter((o,c,f)=>f.indexOf(o)===c),n||bl(i,a,r))),Array.isArray(t)&&t.forEach(o=>{Array.isArray(o)||(o=a.map(c=>typeof o[c]<"u"?o[c]:"")),bl(i,o,r)}),i.join(n2)}/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */(function(e){if(e.URL=e.URL||e.webkitURL,e.Blob&&e.URL)try{new Blob;return}catch{}var t=e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||function(r){var n=function(S){return Object.prototype.toString.call(S).match(/^\[object\s(.*)\]$/)[1]},a=function(){this.data=[]},i=function(b,T,y){this.data=b,this.size=b.length,this.type=T,this.encoding=y},s=a.prototype,o=i.prototype,c=r.FileReaderSync,f=function(S){this.code=this[this.name=S]},u="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),h=u.length,d=r.URL||r.webkitURL||r,p=d.createObjectURL,g=d.revokeObjectURL,m=d,x=r.btoa,v=r.atob,k=r.ArrayBuffer,w=r.Uint8Array;for(i.fake=o.fake=!0;h--;)f.prototype[u[h]]=h+1;return d.createObjectURL||(m=r.URL={}),m.createObjectURL=function(S){var b=S.type,T;if(b===null&&(b="application/octet-stream"),S instanceof i)return T="data:"+b,S.encoding==="base64"?T+";base64,"+S.data:S.encoding==="URI"?T+","+decodeURIComponent(S.data):x?T+";base64,"+x(S.data):T+","+encodeURIComponent(S.data);if(p)return p.call(d,S)},m.revokeObjectURL=function(S){S.substring(0,5)!=="data:"&&g&&g.call(d,S)},s.append=function(S){var b=this.data;if(w&&(S instanceof k||S instanceof w)){for(var T="",y=new w(S),O=0,B=y.length;O<B;O++)T+=String.fromCharCode(y[O]);b.push(T)}else if(n(S)==="Blob"||n(S)==="File")if(c){var H=new c;b.push(H.readAsBinaryString(S))}else throw new f("NOT_READABLE_ERR");else S instanceof i?S.encoding==="base64"&&v?b.push(v(S.data)):S.encoding==="URI"?b.push(decodeURIComponent(S.data)):S.encoding==="raw"&&b.push(S.data):(typeof S!="string"&&(S+=""),b.push(unescape(encodeURIComponent(S))))},s.getBlob=function(S){return arguments.length||(S=null),new i(this.data.join(""),S,"raw")},s.toString=function(){return"[object BlobBuilder]"},o.slice=function(S,b,T){var y=arguments.length;return y<3&&(T=null),new i(this.data.slice(S,y>1?b:this.data.length),T,this.encoding)},o.toString=function(){return"[object Blob]"},o.close=function(){this.size=this.data.length=0},a}(e);e.Blob=function(n,a){var i=a&&a.type||"",s=new t;if(n)for(var o=0,c=n.length;o<c;o++)s.append(n[o]);return s.getBlob(i)}})(typeof self<"u"&&self||typeof window<"u"&&window||globalThis.content||globalThis);var xu={exports:{}};(function(e,t){(function(r,n){n()})(gn,function(){function r(f,u){return typeof u>"u"?u={autoBom:!1}:typeof u!="object"&&(console.warn("Deprecated: Expected third argument to be a object"),u={autoBom:!u}),u.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(f.type)?new Blob(["\uFEFF",f],{type:f.type}):f}function n(f,u,h){var d=new XMLHttpRequest;d.open("GET",f),d.responseType="blob",d.onload=function(){c(d.response,u,h)},d.onerror=function(){console.error("could not download file")},d.send()}function a(f){var u=new XMLHttpRequest;u.open("HEAD",f,!1);try{u.send()}catch{}return 200<=u.status&&299>=u.status}function i(f){try{f.dispatchEvent(new MouseEvent("click"))}catch{var u=document.createEvent("MouseEvents");u.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),f.dispatchEvent(u)}}var s=typeof window=="object"&&window.window===window?window:typeof self=="object"&&self.self===self?self:typeof gn=="object"&&gn.global===gn?gn:void 0,o=s.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),c=s.saveAs||(typeof window!="object"||window!==s?function(){}:"download"in HTMLAnchorElement.prototype&&!o?function(f,u,h){var d=s.URL||s.webkitURL,p=document.createElement("a");u=u||f.name||"download",p.download=u,p.rel="noopener",typeof f=="string"?(p.href=f,p.origin===location.origin?i(p):a(p.href)?n(f,u,h):i(p,p.target="_blank")):(p.href=d.createObjectURL(f),setTimeout(function(){d.revokeObjectURL(p.href)},4e4),setTimeout(function(){i(p)},0))}:"msSaveOrOpenBlob"in navigator?function(f,u,h){if(u=u||f.name||"download",typeof f!="string")navigator.msSaveOrOpenBlob(r(f,h),u);else if(a(f))n(f,u,h);else{var d=document.createElement("a");d.href=f,d.target="_blank",setTimeout(function(){i(d)})}}:function(f,u,h,d){if(d=d||open("","_blank"),d&&(d.document.title=d.document.body.innerText="downloading..."),typeof f=="string")return n(f,u,h);var p=f.type==="application/octet-stream",g=/constructor/i.test(s.HTMLElement)||s.safari,m=/CriOS\/[\d]+/.test(navigator.userAgent);if((m||p&&g||o)&&typeof FileReader<"u"){var x=new FileReader;x.onloadend=function(){var w=x.result;w=m?w:w.replace(/^data:[^;]*;/,"data:attachment/file;"),d?d.location.href=w:location=w,d=null},x.readAsDataURL(f)}else{var v=s.URL||s.webkitURL,k=v.createObjectURL(f);d?d.location=k:location.href=k,d=null,setTimeout(function(){v.revokeObjectURL(k)},4e4)}});s.saveAs=c.saveAs=c,e.exports=c})})(xu);var s2=xu.exports;const vu=hi(s2);/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */var Js={};Js.version="0.18.5";var wu=1252,o2=[874,932,936,949,950,1250,1251,1252,1253,1254,1255,1256,1257,1258,1e4],Sl={0:1252,1:65001,2:65001,77:1e4,128:932,129:949,130:1361,134:936,136:950,161:1253,162:1254,163:1258,177:1255,178:1256,186:1257,204:1251,222:874,238:1250,255:1252,69:6969},Tl=function(e){o2.indexOf(e)!=-1&&(wu=Sl[0]=e)};function l2(){Tl(1252)}var Wr=function(e){Tl(e)};function Fl(){Wr(1200),l2()}function _u(e){for(var t=[],r=0,n=e.length;r<n;++r)t[r]=e.charCodeAt(r);return t}function c2(e){for(var t=[],r=0;r<e.length>>1;++r)t[r]=String.fromCharCode(e.charCodeAt(2*r)+(e.charCodeAt(2*r+1)<<8));return t.join("")}function yu(e){for(var t=[],r=0;r<e.length>>1;++r)t[r]=String.fromCharCode(e.charCodeAt(2*r+1)+(e.charCodeAt(2*r)<<8));return t.join("")}var Ni=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1);return t==255&&r==254?c2(e.slice(2)):t==254&&r==255?yu(e.slice(2)):t==65279?e.slice(1):e},Zs=function(t){return String.fromCharCode(t)},ku=function(t){return String.fromCharCode(t)},Hn,jn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function Pi(e){for(var t="",r=0,n=0,a=0,i=0,s=0,o=0,c=0,f=0;f<e.length;)r=e.charCodeAt(f++),i=r>>2,n=e.charCodeAt(f++),s=(r&3)<<4|n>>4,a=e.charCodeAt(f++),o=(n&15)<<2|a>>6,c=a&63,isNaN(n)?o=c=64:isNaN(a)&&(c=64),t+=jn.charAt(i)+jn.charAt(s)+jn.charAt(o)+jn.charAt(c);return t}function wr(e){var t="",r=0,n=0,a=0,i=0,s=0,o=0,c=0;e=e.replace(/[^\w\+\/\=]/g,"");for(var f=0;f<e.length;)i=jn.indexOf(e.charAt(f++)),s=jn.indexOf(e.charAt(f++)),r=i<<2|s>>4,t+=String.fromCharCode(r),o=jn.indexOf(e.charAt(f++)),n=(s&15)<<4|o>>2,o!==64&&(t+=String.fromCharCode(n)),c=jn.indexOf(e.charAt(f++)),a=(o&3)<<6|c,c!==64&&(t+=String.fromCharCode(a));return t}var He=function(){return typeof Buffer<"u"&&typeof process<"u"&&typeof process.versions<"u"&&!!process.versions.node}(),kn=function(){if(typeof Buffer<"u"){var e=!Buffer.from;if(!e)try{Buffer.from("foo","utf8")}catch{e=!0}return e?function(t,r){return r?new Buffer(t,r):new Buffer(t)}:Buffer.from.bind(Buffer)}return function(){}}();function zn(e){return He?Buffer.alloc?Buffer.alloc(e):new Buffer(e):typeof Uint8Array<"u"?new Uint8Array(e):new Array(e)}function Eu(e){return He?Buffer.allocUnsafe?Buffer.allocUnsafe(e):new Buffer(e):typeof Uint8Array<"u"?new Uint8Array(e):new Array(e)}var _r=function(t){return He?kn(t,"binary"):t.split("").map(function(r){return r.charCodeAt(0)&255})};function Qs(e){if(typeof ArrayBuffer>"u")return _r(e);for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n!=e.length;++n)r[n]=e.charCodeAt(n)&255;return t}function Gn(e){if(Array.isArray(e))return e.map(function(n){return String.fromCharCode(n)}).join("");for(var t=[],r=0;r<e.length;++r)t[r]=String.fromCharCode(e[r]);return t.join("")}function f2(e){if(typeof Uint8Array>"u")throw new Error("Unsupported");return new Uint8Array(e)}function Cl(e){if(typeof ArrayBuffer>"u")throw new Error("Unsupported");if(e instanceof ArrayBuffer)return Cl(new Uint8Array(e));for(var t=new Array(e.length),r=0;r<e.length;++r)t[r]=e[r];return t}var Lt=He?function(e){return Buffer.concat(e.map(function(t){return Buffer.isBuffer(t)?t:kn(t)}))}:function(e){if(typeof Uint8Array<"u"){var t=0,r=0;for(t=0;t<e.length;++t)r+=e[t].length;var n=new Uint8Array(r),a=0;for(t=0,r=0;t<e.length;r+=a,++t)if(a=e[t].length,e[t]instanceof Uint8Array)n.set(e[t],r);else{if(typeof e[t]=="string")throw"wtf";n.set(new Uint8Array(e[t]),r)}return n}return[].concat.apply([],e.map(function(i){return Array.isArray(i)?i:[].slice.call(i)}))};function u2(e){for(var t=[],r=0,n=e.length+250,a=zn(e.length+255),i=0;i<e.length;++i){var s=e.charCodeAt(i);if(s<128)a[r++]=s;else if(s<2048)a[r++]=192|s>>6&31,a[r++]=128|s&63;else if(s>=55296&&s<57344){s=(s&1023)+64;var o=e.charCodeAt(++i)&1023;a[r++]=240|s>>8&7,a[r++]=128|s>>2&63,a[r++]=128|o>>6&15|(s&3)<<4,a[r++]=128|o&63}else a[r++]=224|s>>12&15,a[r++]=128|s>>6&63,a[r++]=128|s&63;r>n&&(t.push(a.slice(0,r)),r=0,a=zn(65535),n=65530)}return t.push(a.slice(0,r)),Lt(t)}var ir=/\u0000/g,Ii=/[\u0001-\u0006]/g;function Ha(e){for(var t="",r=e.length-1;r>=0;)t+=e.charAt(r--);return t}function Hr(e,t){var r=""+e;return r.length>=t?r:vt("0",t-r.length)+r}function Al(e,t){var r=""+e;return r.length>=t?r:vt(" ",t-r.length)+r}function eo(e,t){var r=""+e;return r.length>=t?r:r+vt(" ",t-r.length)}function h2(e,t){var r=""+Math.round(e);return r.length>=t?r:vt("0",t-r.length)+r}function d2(e,t){var r=""+e;return r.length>=t?r:vt("0",t-r.length)+r}var bu=Math.pow(2,32);function ja(e,t){if(e>bu||e<-bu)return h2(e,t);var r=Math.round(e);return d2(r,t)}function to(e,t){return t=t||0,e.length>=7+t&&(e.charCodeAt(t)|32)===103&&(e.charCodeAt(t+1)|32)===101&&(e.charCodeAt(t+2)|32)===110&&(e.charCodeAt(t+3)|32)===101&&(e.charCodeAt(t+4)|32)===114&&(e.charCodeAt(t+5)|32)===97&&(e.charCodeAt(t+6)|32)===108}var Su=[["Sun","Sunday"],["Mon","Monday"],["Tue","Tuesday"],["Wed","Wednesday"],["Thu","Thursday"],["Fri","Friday"],["Sat","Saturday"]],Dl=[["J","Jan","January"],["F","Feb","February"],["M","Mar","March"],["A","Apr","April"],["M","May","May"],["J","Jun","June"],["J","Jul","July"],["A","Aug","August"],["S","Sep","September"],["O","Oct","October"],["N","Nov","November"],["D","Dec","December"]];function m2(e){return e||(e={}),e[0]="General",e[1]="0",e[2]="0.00",e[3]="#,##0",e[4]="#,##0.00",e[9]="0%",e[10]="0.00%",e[11]="0.00E+00",e[12]="# ?/?",e[13]="# ??/??",e[14]="m/d/yy",e[15]="d-mmm-yy",e[16]="d-mmm",e[17]="mmm-yy",e[18]="h:mm AM/PM",e[19]="h:mm:ss AM/PM",e[20]="h:mm",e[21]="h:mm:ss",e[22]="m/d/yy h:mm",e[37]="#,##0 ;(#,##0)",e[38]="#,##0 ;[Red](#,##0)",e[39]="#,##0.00;(#,##0.00)",e[40]="#,##0.00;[Red](#,##0.00)",e[45]="mm:ss",e[46]="[h]:mm:ss",e[47]="mmss.0",e[48]="##0.0E+0",e[49]="@",e[56]='"上午/下午 "hh"時"mm"分"ss"秒 "',e}var Se={0:"General",1:"0",2:"0.00",3:"#,##0",4:"#,##0.00",9:"0%",10:"0.00%",11:"0.00E+00",12:"# ?/?",13:"# ??/??",14:"m/d/yy",15:"d-mmm-yy",16:"d-mmm",17:"mmm-yy",18:"h:mm AM/PM",19:"h:mm:ss AM/PM",20:"h:mm",21:"h:mm:ss",22:"m/d/yy h:mm",37:"#,##0 ;(#,##0)",38:"#,##0 ;[Red](#,##0)",39:"#,##0.00;(#,##0.00)",40:"#,##0.00;[Red](#,##0.00)",45:"mm:ss",46:"[h]:mm:ss",47:"mmss.0",48:"##0.0E+0",49:"@",56:'"上午/下午 "hh"時"mm"分"ss"秒 "'},Tu={5:37,6:38,7:39,8:40,23:0,24:0,25:0,26:0,27:14,28:14,29:14,30:14,31:14,50:14,51:14,52:14,53:14,54:14,55:14,56:14,57:14,58:14,59:1,60:2,61:3,62:4,67:9,68:10,69:12,70:13,71:14,72:14,73:15,74:16,75:17,76:20,77:21,78:22,79:45,80:46,81:47,82:0},p2={5:'"$"#,##0_);\\("$"#,##0\\)',63:'"$"#,##0_);\\("$"#,##0\\)',6:'"$"#,##0_);[Red]\\("$"#,##0\\)',64:'"$"#,##0_);[Red]\\("$"#,##0\\)',7:'"$"#,##0.00_);\\("$"#,##0.00\\)',65:'"$"#,##0.00_);\\("$"#,##0.00\\)',8:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',66:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',41:'_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',42:'_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',43:'_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',44:'_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'};function ro(e,t,r){for(var n=e<0?-1:1,a=e*n,i=0,s=1,o=0,c=1,f=0,u=0,h=Math.floor(a);f<t&&(h=Math.floor(a),o=h*s+i,u=h*f+c,!(a-h<5e-8));)a=1/(a-h),i=s,s=o,c=f,f=u;if(u>t&&(f>t?(u=c,o=i):(u=f,o=s)),!r)return[0,n*o,u];var d=Math.floor(n*o/u);return[d,n*o-d*u,u]}function Xn(e,t,r){if(e>2958465||e<0)return null;var n=e|0,a=Math.floor(86400*(e-n)),i=0,s=[],o={D:n,T:a,u:86400*(e-n)-a,y:0,m:0,d:0,H:0,M:0,S:0,q:0};if(Math.abs(o.u)<1e-6&&(o.u=0),t&&t.date1904&&(n+=1462),o.u>.9999&&(o.u=0,++a==86400&&(o.T=a=0,++n,++o.D)),n===60)s=r?[1317,10,29]:[1900,2,29],i=3;else if(n===0)s=r?[1317,8,29]:[1900,1,0],i=6;else{n>60&&--n;var c=new Date(1900,0,1);c.setDate(c.getDate()+n-1),s=[c.getFullYear(),c.getMonth()+1,c.getDate()],i=c.getDay(),n<60&&(i=(i+6)%7),r&&(i=y2(c,s))}return o.y=s[0],o.m=s[1],o.d=s[2],o.S=a%60,a=Math.floor(a/60),o.M=a%60,a=Math.floor(a/60),o.H=a,o.q=i,o}var Fu=new Date(1899,11,31,0,0,0),g2=Fu.getTime(),x2=new Date(1900,2,1,0,0,0);function Cu(e,t){var r=e.getTime();return t?r-=1461*24*60*60*1e3:e>=x2&&(r+=24*60*60*1e3),(r-(g2+(e.getTimezoneOffset()-Fu.getTimezoneOffset())*6e4))/(24*60*60*1e3)}function Rl(e){return e.indexOf(".")==-1?e:e.replace(/(?:\.0*|(\.\d*[1-9])0+)$/,"$1")}function v2(e){return e.indexOf("E")==-1?e:e.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/,"$1E").replace(/(E[+-])(\d)$/,"$10$2")}function w2(e){var t=e<0?12:11,r=Rl(e.toFixed(12));return r.length<=t||(r=e.toPrecision(10),r.length<=t)?r:e.toExponential(5)}function _2(e){var t=Rl(e.toFixed(11));return t.length>(e<0?12:11)||t==="0"||t==="-0"?e.toPrecision(6):t}function Li(e){var t=Math.floor(Math.log(Math.abs(e))*Math.LOG10E),r;return t>=-4&&t<=-1?r=e.toPrecision(10+t):Math.abs(t)<=9?r=w2(e):t===10?r=e.toFixed(10).substr(0,12):r=_2(e),Rl(v2(r.toUpperCase()))}function fa(e,t){switch(typeof e){case"string":return e;case"boolean":return e?"TRUE":"FALSE";case"number":return(e|0)===e?e.toString(10):Li(e);case"undefined":return"";case"object":if(e==null)return"";if(e instanceof Date)return yr(14,Cu(e,t&&t.date1904),t)}throw new Error("unsupported value in General format: "+e)}function y2(e,t){t[0]-=581;var r=e.getDay();return e<60&&(r=(r+6)%7),r}function k2(e,t,r,n){var a="",i=0,s=0,o=r.y,c,f=0;switch(e){case 98:o=r.y+543;case 121:switch(t.length){case 1:case 2:c=o%100,f=2;break;default:c=o%1e4,f=4;break}break;case 109:switch(t.length){case 1:case 2:c=r.m,f=t.length;break;case 3:return Dl[r.m-1][1];case 5:return Dl[r.m-1][0];default:return Dl[r.m-1][2]}break;case 100:switch(t.length){case 1:case 2:c=r.d,f=t.length;break;case 3:return Su[r.q][0];default:return Su[r.q][1]}break;case 104:switch(t.length){case 1:case 2:c=1+(r.H+11)%12,f=t.length;break;default:throw"bad hour format: "+t}break;case 72:switch(t.length){case 1:case 2:c=r.H,f=t.length;break;default:throw"bad hour format: "+t}break;case 77:switch(t.length){case 1:case 2:c=r.M,f=t.length;break;default:throw"bad minute format: "+t}break;case 115:if(t!="s"&&t!="ss"&&t!=".0"&&t!=".00"&&t!=".000")throw"bad second format: "+t;return r.u===0&&(t=="s"||t=="ss")?Hr(r.S,t.length):(n>=2?s=n===3?1e3:100:s=n===1?10:1,i=Math.round(s*(r.S+r.u)),i>=60*s&&(i=0),t==="s"?i===0?"0":""+i/s:(a=Hr(i,2+n),t==="ss"?a.substr(0,2):"."+a.substr(2,t.length-1)));case 90:switch(t){case"[h]":case"[hh]":c=r.D*24+r.H;break;case"[m]":case"[mm]":c=(r.D*24+r.H)*60+r.M;break;case"[s]":case"[ss]":c=((r.D*24+r.H)*60+r.M)*60+Math.round(r.S+r.u);break;default:throw"bad abstime format: "+t}f=t.length===3?1:2;break;case 101:c=o,f=1;break}var u=f>0?Hr(c,f):"";return u}function Kn(e){var t=3;if(e.length<=t)return e;for(var r=e.length%t,n=e.substr(0,r);r!=e.length;r+=t)n+=(n.length>0?",":"")+e.substr(r,t);return n}var Au=/%/g;function E2(e,t,r){var n=t.replace(Au,""),a=t.length-n.length;return En(e,n,r*Math.pow(10,2*a))+vt("%",a)}function b2(e,t,r){for(var n=t.length-1;t.charCodeAt(n-1)===44;)--n;return En(e,t.substr(0,n),r/Math.pow(10,3*(t.length-n)))}function Du(e,t){var r,n=e.indexOf("E")-e.indexOf(".")-1;if(e.match(/^#+0.0E\+0$/)){if(t==0)return"0.0E+0";if(t<0)return"-"+Du(e,-t);var a=e.indexOf(".");a===-1&&(a=e.indexOf("E"));var i=Math.floor(Math.log(t)*Math.LOG10E)%a;if(i<0&&(i+=a),r=(t/Math.pow(10,i)).toPrecision(n+1+(a+i)%a),r.indexOf("e")===-1){var s=Math.floor(Math.log(t)*Math.LOG10E);for(r.indexOf(".")===-1?r=r.charAt(0)+"."+r.substr(1)+"E+"+(s-r.length+i):r+="E+"+(s-i);r.substr(0,2)==="0.";)r=r.charAt(0)+r.substr(2,a)+"."+r.substr(2+a),r=r.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");r=r.replace(/\+-/,"-")}r=r.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function(o,c,f,u){return c+f+u.substr(0,(a+i)%a)+"."+u.substr(i)+"E"})}else r=t.toExponential(n);return e.match(/E\+00$/)&&r.match(/e[+-]\d$/)&&(r=r.substr(0,r.length-1)+"0"+r.charAt(r.length-1)),e.match(/E\-/)&&r.match(/e\+/)&&(r=r.replace(/e\+/,"e")),r.replace("e","E")}var Ru=/# (\?+)( ?)\/( ?)(\d+)/;function S2(e,t,r){var n=parseInt(e[4],10),a=Math.round(t*n),i=Math.floor(a/n),s=a-i*n,o=n;return r+(i===0?"":""+i)+" "+(s===0?vt(" ",e[1].length+1+e[4].length):Al(s,e[1].length)+e[2]+"/"+e[3]+Hr(o,e[4].length))}function T2(e,t,r){return r+(t===0?"":""+t)+vt(" ",e[1].length+2+e[4].length)}var Ou=/^#*0*\.([0#]+)/,Bu=/\).*[0#]/,Nu=/\(###\) ###\\?-####/;function sr(e){for(var t="",r,n=0;n!=e.length;++n)switch(r=e.charCodeAt(n)){case 35:break;case 63:t+=" ";break;case 48:t+="0";break;default:t+=String.fromCharCode(r)}return t}function Pu(e,t){var r=Math.pow(10,t);return""+Math.round(e*r)/r}function Iu(e,t){var r=e-Math.floor(e),n=Math.pow(10,t);return t<(""+Math.round(r*n)).length?0:Math.round(r*n)}function F2(e,t){return t<(""+Math.round((e-Math.floor(e))*Math.pow(10,t))).length?1:0}function C2(e){return e<2147483647&&e>-2147483648?""+(e>=0?e|0:e-1|0):""+Math.floor(e)}function Dr(e,t,r){if(e.charCodeAt(0)===40&&!t.match(Bu)){var n=t.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");return r>=0?Dr("n",n,r):"("+Dr("n",n,-r)+")"}if(t.charCodeAt(t.length-1)===44)return b2(e,t,r);if(t.indexOf("%")!==-1)return E2(e,t,r);if(t.indexOf("E")!==-1)return Du(t,r);if(t.charCodeAt(0)===36)return"$"+Dr(e,t.substr(t.charAt(1)==" "?2:1),r);var a,i,s,o,c=Math.abs(r),f=r<0?"-":"";if(t.match(/^00+$/))return f+ja(c,t.length);if(t.match(/^[#?]+$/))return a=ja(r,0),a==="0"&&(a=""),a.length>t.length?a:sr(t.substr(0,t.length-a.length))+a;if(i=t.match(Ru))return S2(i,c,f);if(t.match(/^#+0+$/))return f+ja(c,t.length-t.indexOf("0"));if(i=t.match(Ou))return a=Pu(r,i[1].length).replace(/^([^\.]+)$/,"$1."+sr(i[1])).replace(/\.$/,"."+sr(i[1])).replace(/\.(\d*)$/,function(g,m){return"."+m+vt("0",sr(i[1]).length-m.length)}),t.indexOf("0.")!==-1?a:a.replace(/^0\./,".");if(t=t.replace(/^#+([0.])/,"$1"),i=t.match(/^(0*)\.(#*)$/))return f+Pu(c,i[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,i[1].length?"0.":".");if(i=t.match(/^#{1,3},##0(\.?)$/))return f+Kn(ja(c,0));if(i=t.match(/^#,##0\.([#0]*0)$/))return r<0?"-"+Dr(e,t,-r):Kn(""+(Math.floor(r)+F2(r,i[1].length)))+"."+Hr(Iu(r,i[1].length),i[1].length);if(i=t.match(/^#,#*,#0/))return Dr(e,t.replace(/^#,#*,/,""),r);if(i=t.match(/^([0#]+)(\\?-([0#]+))+$/))return a=Ha(Dr(e,t.replace(/[\\-]/g,""),r)),s=0,Ha(Ha(t.replace(/\\/g,"")).replace(/[0#]/g,function(g){return s<a.length?a.charAt(s++):g==="0"?"0":""}));if(t.match(Nu))return a=Dr(e,"##########",r),"("+a.substr(0,3)+") "+a.substr(3,3)+"-"+a.substr(6);var u="";if(i=t.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(i[4].length,7),o=ro(c,Math.pow(10,s)-1,!1),a=""+f,u=En("n",i[1],o[1]),u.charAt(u.length-1)==" "&&(u=u.substr(0,u.length-1)+"0"),a+=u+i[2]+"/"+i[3],u=eo(o[2],s),u.length<i[4].length&&(u=sr(i[4].substr(i[4].length-u.length))+u),a+=u,a;if(i=t.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(Math.max(i[1].length,i[4].length),7),o=ro(c,Math.pow(10,s)-1,!0),f+(o[0]||(o[1]?"":"0"))+" "+(o[1]?Al(o[1],s)+i[2]+"/"+i[3]+eo(o[2],s):vt(" ",2*s+1+i[2].length+i[3].length));if(i=t.match(/^[#0?]+$/))return a=ja(r,0),t.length<=a.length?a:sr(t.substr(0,t.length-a.length))+a;if(i=t.match(/^([#0?]+)\.([#0]+)$/)){a=""+r.toFixed(Math.min(i[2].length,10)).replace(/([^0])0+$/,"$1"),s=a.indexOf(".");var h=t.indexOf(".")-s,d=t.length-a.length-h;return sr(t.substr(0,h)+a+t.substr(t.length-d))}if(i=t.match(/^00,000\.([#0]*0)$/))return s=Iu(r,i[1].length),r<0?"-"+Dr(e,t,-r):Kn(C2(r)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function(g){return"00,"+(g.length<3?Hr(0,3-g.length):"")+g})+"."+Hr(s,i[1].length);switch(t){case"###,##0.00":return Dr(e,"#,##0.00",r);case"###,###":case"##,###":case"#,###":var p=Kn(ja(c,0));return p!=="0"?f+p:"";case"###,###.00":return Dr(e,"###,##0.00",r).replace(/^0\./,".");case"#,###.00":return Dr(e,"#,##0.00",r).replace(/^0\./,".")}throw new Error("unsupported format |"+t+"|")}function A2(e,t,r){for(var n=t.length-1;t.charCodeAt(n-1)===44;)--n;return En(e,t.substr(0,n),r/Math.pow(10,3*(t.length-n)))}function D2(e,t,r){var n=t.replace(Au,""),a=t.length-n.length;return En(e,n,r*Math.pow(10,2*a))+vt("%",a)}function Lu(e,t){var r,n=e.indexOf("E")-e.indexOf(".")-1;if(e.match(/^#+0.0E\+0$/)){if(t==0)return"0.0E+0";if(t<0)return"-"+Lu(e,-t);var a=e.indexOf(".");a===-1&&(a=e.indexOf("E"));var i=Math.floor(Math.log(t)*Math.LOG10E)%a;if(i<0&&(i+=a),r=(t/Math.pow(10,i)).toPrecision(n+1+(a+i)%a),!r.match(/[Ee]/)){var s=Math.floor(Math.log(t)*Math.LOG10E);r.indexOf(".")===-1?r=r.charAt(0)+"."+r.substr(1)+"E+"+(s-r.length+i):r+="E+"+(s-i),r=r.replace(/\+-/,"-")}r=r.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function(o,c,f,u){return c+f+u.substr(0,(a+i)%a)+"."+u.substr(i)+"E"})}else r=t.toExponential(n);return e.match(/E\+00$/)&&r.match(/e[+-]\d$/)&&(r=r.substr(0,r.length-1)+"0"+r.charAt(r.length-1)),e.match(/E\-/)&&r.match(/e\+/)&&(r=r.replace(/e\+/,"e")),r.replace("e","E")}function rn(e,t,r){if(e.charCodeAt(0)===40&&!t.match(Bu)){var n=t.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");return r>=0?rn("n",n,r):"("+rn("n",n,-r)+")"}if(t.charCodeAt(t.length-1)===44)return A2(e,t,r);if(t.indexOf("%")!==-1)return D2(e,t,r);if(t.indexOf("E")!==-1)return Lu(t,r);if(t.charCodeAt(0)===36)return"$"+rn(e,t.substr(t.charAt(1)==" "?2:1),r);var a,i,s,o,c=Math.abs(r),f=r<0?"-":"";if(t.match(/^00+$/))return f+Hr(c,t.length);if(t.match(/^[#?]+$/))return a=""+r,r===0&&(a=""),a.length>t.length?a:sr(t.substr(0,t.length-a.length))+a;if(i=t.match(Ru))return T2(i,c,f);if(t.match(/^#+0+$/))return f+Hr(c,t.length-t.indexOf("0"));if(i=t.match(Ou))return a=(""+r).replace(/^([^\.]+)$/,"$1."+sr(i[1])).replace(/\.$/,"."+sr(i[1])),a=a.replace(/\.(\d*)$/,function(g,m){return"."+m+vt("0",sr(i[1]).length-m.length)}),t.indexOf("0.")!==-1?a:a.replace(/^0\./,".");if(t=t.replace(/^#+([0.])/,"$1"),i=t.match(/^(0*)\.(#*)$/))return f+(""+c).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,i[1].length?"0.":".");if(i=t.match(/^#{1,3},##0(\.?)$/))return f+Kn(""+c);if(i=t.match(/^#,##0\.([#0]*0)$/))return r<0?"-"+rn(e,t,-r):Kn(""+r)+"."+vt("0",i[1].length);if(i=t.match(/^#,#*,#0/))return rn(e,t.replace(/^#,#*,/,""),r);if(i=t.match(/^([0#]+)(\\?-([0#]+))+$/))return a=Ha(rn(e,t.replace(/[\\-]/g,""),r)),s=0,Ha(Ha(t.replace(/\\/g,"")).replace(/[0#]/g,function(g){return s<a.length?a.charAt(s++):g==="0"?"0":""}));if(t.match(Nu))return a=rn(e,"##########",r),"("+a.substr(0,3)+") "+a.substr(3,3)+"-"+a.substr(6);var u="";if(i=t.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(i[4].length,7),o=ro(c,Math.pow(10,s)-1,!1),a=""+f,u=En("n",i[1],o[1]),u.charAt(u.length-1)==" "&&(u=u.substr(0,u.length-1)+"0"),a+=u+i[2]+"/"+i[3],u=eo(o[2],s),u.length<i[4].length&&(u=sr(i[4].substr(i[4].length-u.length))+u),a+=u,a;if(i=t.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(Math.max(i[1].length,i[4].length),7),o=ro(c,Math.pow(10,s)-1,!0),f+(o[0]||(o[1]?"":"0"))+" "+(o[1]?Al(o[1],s)+i[2]+"/"+i[3]+eo(o[2],s):vt(" ",2*s+1+i[2].length+i[3].length));if(i=t.match(/^[#0?]+$/))return a=""+r,t.length<=a.length?a:sr(t.substr(0,t.length-a.length))+a;if(i=t.match(/^([#0]+)\.([#0]+)$/)){a=""+r.toFixed(Math.min(i[2].length,10)).replace(/([^0])0+$/,"$1"),s=a.indexOf(".");var h=t.indexOf(".")-s,d=t.length-a.length-h;return sr(t.substr(0,h)+a+t.substr(t.length-d))}if(i=t.match(/^00,000\.([#0]*0)$/))return r<0?"-"+rn(e,t,-r):Kn(""+r).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function(g){return"00,"+(g.length<3?Hr(0,3-g.length):"")+g})+"."+Hr(0,i[1].length);switch(t){case"###,###":case"##,###":case"#,###":var p=Kn(""+c);return p!=="0"?f+p:"";default:if(t.match(/\.[0#?]*$/))return rn(e,t.slice(0,t.lastIndexOf(".")),r)+sr(t.slice(t.lastIndexOf(".")))}throw new Error("unsupported format |"+t+"|")}function En(e,t,r){return(r|0)===r?rn(e,t,r):Dr(e,t,r)}function R2(e){for(var t=[],r=!1,n=0,a=0;n<e.length;++n)switch(e.charCodeAt(n)){case 34:r=!r;break;case 95:case 42:case 92:++n;break;case 59:t[t.length]=e.substr(a,n-a),a=n+1}if(t[t.length]=e.substr(a),r===!0)throw new Error("Format |"+e+"| unterminated string ");return t}var Mu=/\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;function ua(e){for(var t=0,r="",n="";t<e.length;)switch(r=e.charAt(t)){case"G":to(e,t)&&(t+=6),t++;break;case'"':for(;e.charCodeAt(++t)!==34&&t<e.length;);++t;break;case"\\":t+=2;break;case"_":t+=2;break;case"@":++t;break;case"B":case"b":if(e.charAt(t+1)==="1"||e.charAt(t+1)==="2")return!0;case"M":case"D":case"Y":case"H":case"S":case"E":case"m":case"d":case"y":case"h":case"s":case"e":case"g":return!0;case"A":case"a":case"上":if(e.substr(t,3).toUpperCase()==="A/P"||e.substr(t,5).toUpperCase()==="AM/PM"||e.substr(t,5).toUpperCase()==="上午/下午")return!0;++t;break;case"[":for(n=r;e.charAt(t++)!=="]"&&t<e.length;)n+=e.charAt(t);if(n.match(Mu))return!0;break;case".":case"0":case"#":for(;t<e.length&&("0#?.,E+-%".indexOf(r=e.charAt(++t))>-1||r=="\\"&&e.charAt(t+1)=="-"&&"0#".indexOf(e.charAt(t+2))>-1););break;case"?":for(;e.charAt(++t)===r;);break;case"*":++t,(e.charAt(t)==" "||e.charAt(t)=="*")&&++t;break;case"(":case")":++t;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":for(;t<e.length&&"0123456789".indexOf(e.charAt(++t))>-1;);break;case" ":++t;break;default:++t;break}return!1}function O2(e,t,r,n){for(var a=[],i="",s=0,o="",c="t",f,u,h,d="H";s<e.length;)switch(o=e.charAt(s)){case"G":if(!to(e,s))throw new Error("unrecognized character "+o+" in "+e);a[a.length]={t:"G",v:"General"},s+=7;break;case'"':for(i="";(h=e.charCodeAt(++s))!==34&&s<e.length;)i+=String.fromCharCode(h);a[a.length]={t:"t",v:i},++s;break;case"\\":var p=e.charAt(++s),g=p==="("||p===")"?p:"t";a[a.length]={t:g,v:p},++s;break;case"_":a[a.length]={t:"t",v:" "},s+=2;break;case"@":a[a.length]={t:"T",v:t},++s;break;case"B":case"b":if(e.charAt(s+1)==="1"||e.charAt(s+1)==="2"){if(f==null&&(f=Xn(t,r,e.charAt(s+1)==="2"),f==null))return"";a[a.length]={t:"X",v:e.substr(s,2)},c=o,s+=2;break}case"M":case"D":case"Y":case"H":case"S":case"E":o=o.toLowerCase();case"m":case"d":case"y":case"h":case"s":case"e":case"g":if(t<0||f==null&&(f=Xn(t,r),f==null))return"";for(i=o;++s<e.length&&e.charAt(s).toLowerCase()===o;)i+=o;o==="m"&&c.toLowerCase()==="h"&&(o="M"),o==="h"&&(o=d),a[a.length]={t:o,v:i},c=o;break;case"A":case"a":case"上":var m={t:o,v:o};if(f==null&&(f=Xn(t,r)),e.substr(s,3).toUpperCase()==="A/P"?(f!=null&&(m.v=f.H>=12?"P":"A"),m.t="T",d="h",s+=3):e.substr(s,5).toUpperCase()==="AM/PM"?(f!=null&&(m.v=f.H>=12?"PM":"AM"),m.t="T",s+=5,d="h"):e.substr(s,5).toUpperCase()==="上午/下午"?(f!=null&&(m.v=f.H>=12?"下午":"上午"),m.t="T",s+=5,d="h"):(m.t="t",++s),f==null&&m.t==="T")return"";a[a.length]=m,c=o;break;case"[":for(i=o;e.charAt(s++)!=="]"&&s<e.length;)i+=e.charAt(s);if(i.slice(-1)!=="]")throw'unterminated "[" block: |'+i+"|";if(i.match(Mu)){if(f==null&&(f=Xn(t,r),f==null))return"";a[a.length]={t:"Z",v:i.toLowerCase()},c=i.charAt(1)}else i.indexOf("$")>-1&&(i=(i.match(/\$([^-\[\]]*)/)||[])[1]||"$",ua(e)||(a[a.length]={t:"t",v:i}));break;case".":if(f!=null){for(i=o;++s<e.length&&(o=e.charAt(s))==="0";)i+=o;a[a.length]={t:"s",v:i};break}case"0":case"#":for(i=o;++s<e.length&&"0#?.,E+-%".indexOf(o=e.charAt(s))>-1;)i+=o;a[a.length]={t:"n",v:i};break;case"?":for(i=o;e.charAt(++s)===o;)i+=o;a[a.length]={t:o,v:i},c=o;break;case"*":++s,(e.charAt(s)==" "||e.charAt(s)=="*")&&++s;break;case"(":case")":a[a.length]={t:n===1?"t":o,v:o},++s;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":for(i=o;s<e.length&&"0123456789".indexOf(e.charAt(++s))>-1;)i+=e.charAt(s);a[a.length]={t:"D",v:i};break;case" ":a[a.length]={t:o,v:o},++s;break;case"$":a[a.length]={t:"t",v:"$"},++s;break;default:if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(o)===-1)throw new Error("unrecognized character "+o+" in "+e);a[a.length]={t:"t",v:o},++s;break}var x=0,v=0,k;for(s=a.length-1,c="t";s>=0;--s)switch(a[s].t){case"h":case"H":a[s].t=d,c="h",x<1&&(x=1);break;case"s":(k=a[s].v.match(/\.0+$/))&&(v=Math.max(v,k[0].length-1)),x<3&&(x=3);case"d":case"y":case"M":case"e":c=a[s].t;break;case"m":c==="s"&&(a[s].t="M",x<2&&(x=2));break;case"X":break;case"Z":x<1&&a[s].v.match(/[Hh]/)&&(x=1),x<2&&a[s].v.match(/[Mm]/)&&(x=2),x<3&&a[s].v.match(/[Ss]/)&&(x=3)}switch(x){case 0:break;case 1:f.u>=.5&&(f.u=0,++f.S),f.S>=60&&(f.S=0,++f.M),f.M>=60&&(f.M=0,++f.H);break;case 2:f.u>=.5&&(f.u=0,++f.S),f.S>=60&&(f.S=0,++f.M);break}var w="",S;for(s=0;s<a.length;++s)switch(a[s].t){case"t":case"T":case" ":case"D":break;case"X":a[s].v="",a[s].t=";";break;case"d":case"m":case"y":case"h":case"H":case"M":case"s":case"e":case"b":case"Z":a[s].v=k2(a[s].t.charCodeAt(0),a[s].v,f,v),a[s].t="t";break;case"n":case"?":for(S=s+1;a[S]!=null&&((o=a[S].t)==="?"||o==="D"||(o===" "||o==="t")&&a[S+1]!=null&&(a[S+1].t==="?"||a[S+1].t==="t"&&a[S+1].v==="/")||a[s].t==="("&&(o===" "||o==="n"||o===")")||o==="t"&&(a[S].v==="/"||a[S].v===" "&&a[S+1]!=null&&a[S+1].t=="?"));)a[s].v+=a[S].v,a[S]={v:"",t:";"},++S;w+=a[s].v,s=S-1;break;case"G":a[s].t="t",a[s].v=fa(t,r);break}var b="",T,y;if(w.length>0){w.charCodeAt(0)==40?(T=t<0&&w.charCodeAt(0)===45?-t:t,y=En("n",w,T)):(T=t<0&&n>1?-t:t,y=En("n",w,T),T<0&&a[0]&&a[0].t=="t"&&(y=y.substr(1),a[0].v="-"+a[0].v)),S=y.length-1;var O=a.length;for(s=0;s<a.length;++s)if(a[s]!=null&&a[s].t!="t"&&a[s].v.indexOf(".")>-1){O=s;break}var B=a.length;if(O===a.length&&y.indexOf("E")===-1){for(s=a.length-1;s>=0;--s)a[s]==null||"n?".indexOf(a[s].t)===-1||(S>=a[s].v.length-1?(S-=a[s].v.length,a[s].v=y.substr(S+1,a[s].v.length)):S<0?a[s].v="":(a[s].v=y.substr(0,S+1),S=-1),a[s].t="t",B=s);S>=0&&B<a.length&&(a[B].v=y.substr(0,S+1)+a[B].v)}else if(O!==a.length&&y.indexOf("E")===-1){for(S=y.indexOf(".")-1,s=O;s>=0;--s)if(!(a[s]==null||"n?".indexOf(a[s].t)===-1)){for(u=a[s].v.indexOf(".")>-1&&s===O?a[s].v.indexOf(".")-1:a[s].v.length-1,b=a[s].v.substr(u+1);u>=0;--u)S>=0&&(a[s].v.charAt(u)==="0"||a[s].v.charAt(u)==="#")&&(b=y.charAt(S--)+b);a[s].v=b,a[s].t="t",B=s}for(S>=0&&B<a.length&&(a[B].v=y.substr(0,S+1)+a[B].v),S=y.indexOf(".")+1,s=O;s<a.length;++s)if(!(a[s]==null||"n?(".indexOf(a[s].t)===-1&&s!==O)){for(u=a[s].v.indexOf(".")>-1&&s===O?a[s].v.indexOf(".")+1:0,b=a[s].v.substr(0,u);u<a[s].v.length;++u)S<y.length&&(b+=y.charAt(S++));a[s].v=b,a[s].t="t",B=s}}}for(s=0;s<a.length;++s)a[s]!=null&&"n?".indexOf(a[s].t)>-1&&(T=n>1&&t<0&&s>0&&a[s-1].v==="-"?-t:t,a[s].v=En(a[s].t,a[s].v,T),a[s].t="t");var H="";for(s=0;s!==a.length;++s)a[s]!=null&&(H+=a[s].v);return H}var Vu=/\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;function Uu(e,t){if(t==null)return!1;var r=parseFloat(t[2]);switch(t[1]){case"=":if(e==r)return!0;break;case">":if(e>r)return!0;break;case"<":if(e<r)return!0;break;case"<>":if(e!=r)return!0;break;case">=":if(e>=r)return!0;break;case"<=":if(e<=r)return!0;break}return!1}function B2(e,t){var r=R2(e),n=r.length,a=r[n-1].indexOf("@");if(n<4&&a>-1&&--n,r.length>4)throw new Error("cannot find right format for |"+r.join("|")+"|");if(typeof t!="number")return[4,r.length===4||a>-1?r[r.length-1]:"@"];switch(r.length){case 1:r=a>-1?["General","General","General",r[0]]:[r[0],r[0],r[0],"@"];break;case 2:r=a>-1?[r[0],r[0],r[0],r[1]]:[r[0],r[1],r[0],"@"];break;case 3:r=a>-1?[r[0],r[1],r[0],r[2]]:[r[0],r[1],r[2],"@"];break}var i=t>0?r[0]:t<0?r[1]:r[2];if(r[0].indexOf("[")===-1&&r[1].indexOf("[")===-1)return[n,i];if(r[0].match(/\[[=<>]/)!=null||r[1].match(/\[[=<>]/)!=null){var s=r[0].match(Vu),o=r[1].match(Vu);return Uu(t,s)?[n,r[0]]:Uu(t,o)?[n,r[1]]:[n,r[s!=null&&o!=null?2:1]]}return[n,i]}function yr(e,t,r){r==null&&(r={});var n="";switch(typeof e){case"string":e=="m/d/yy"&&r.dateNF?n=r.dateNF:n=e;break;case"number":e==14&&r.dateNF?n=r.dateNF:n=(r.table!=null?r.table:Se)[e],n==null&&(n=r.table&&r.table[Tu[e]]||Se[Tu[e]]),n==null&&(n=p2[e]||"General");break}if(to(n,0))return fa(t,r);t instanceof Date&&(t=Cu(t,r.date1904));var a=B2(n,t);if(to(a[1]))return fa(t,r);if(t===!0)t="TRUE";else if(t===!1)t="FALSE";else if(t===""||t==null)return"";return O2(a[1],t,r,a[0])}function nn(e,t){if(typeof t!="number"){t=+t||-1;for(var r=0;r<392;++r){if(Se[r]==null){t<0&&(t=r);continue}if(Se[r]==e){t=r;break}}t<0&&(t=391)}return Se[t]=e,t}function Mi(e){for(var t=0;t!=392;++t)e[t]!==void 0&&nn(e[t],t)}function za(){Se=m2()}var $u={format:yr,load:nn,_table:Se,load_table:Mi,parse_date_code:Xn,is_date:ua,get_table:function(){return $u._table=Se}},N2={5:'"$"#,##0_);\\("$"#,##0\\)',6:'"$"#,##0_);[Red]\\("$"#,##0\\)',7:'"$"#,##0.00_);\\("$"#,##0.00\\)',8:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',23:"General",24:"General",25:"General",26:"General",27:"m/d/yy",28:"m/d/yy",29:"m/d/yy",30:"m/d/yy",31:"m/d/yy",32:"h:mm:ss",33:"h:mm:ss",34:"h:mm:ss",35:"h:mm:ss",36:"m/d/yy",41:'_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',42:'_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',43:'_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',44:'_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',50:"m/d/yy",51:"m/d/yy",52:"m/d/yy",53:"m/d/yy",54:"m/d/yy",55:"m/d/yy",56:"m/d/yy",57:"m/d/yy",58:"m/d/yy",59:"0",60:"0.00",61:"#,##0",62:"#,##0.00",63:'"$"#,##0_);\\("$"#,##0\\)',64:'"$"#,##0_);[Red]\\("$"#,##0\\)',65:'"$"#,##0.00_);\\("$"#,##0.00\\)',66:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',67:"0%",68:"0.00%",69:"# ?/?",70:"# ??/??",71:"m/d/yy",72:"m/d/yy",73:"d-mmm-yy",74:"d-mmm",75:"mmm-yy",76:"h:mm",77:"h:mm:ss",78:"m/d/yy h:mm",79:"mm:ss",80:"[h]:mm:ss",81:"mmss.0"},Wu=/[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;function P2(e){var t=typeof e=="number"?Se[e]:e;return t=t.replace(Wu,"(\\d+)"),new RegExp("^"+t+"$")}function I2(e,t,r){var n=-1,a=-1,i=-1,s=-1,o=-1,c=-1;(t.match(Wu)||[]).forEach(function(h,d){var p=parseInt(r[d+1],10);switch(h.toLowerCase().charAt(0)){case"y":n=p;break;case"d":i=p;break;case"h":s=p;break;case"s":c=p;break;case"m":s>=0?o=p:a=p;break}}),c>=0&&o==-1&&a>=0&&(o=a,a=-1);var f=(""+(n>=0?n:new Date().getFullYear())).slice(-4)+"-"+("00"+(a>=1?a:1)).slice(-2)+"-"+("00"+(i>=1?i:1)).slice(-2);f.length==7&&(f="0"+f),f.length==8&&(f="20"+f);var u=("00"+(s>=0?s:0)).slice(-2)+":"+("00"+(o>=0?o:0)).slice(-2)+":"+("00"+(c>=0?c:0)).slice(-2);return s==-1&&o==-1&&c==-1?f:n==-1&&a==-1&&i==-1?u:f+"T"+u}var L2=function(){var e={};e.version="1.2.0";function t(){for(var y=0,O=new Array(256),B=0;B!=256;++B)y=B,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,y=y&1?-306674912^y>>>1:y>>>1,O[B]=y;return typeof Int32Array<"u"?new Int32Array(O):O}var r=t();function n(y){var O=0,B=0,H=0,j=typeof Int32Array<"u"?new Int32Array(4096):new Array(4096);for(H=0;H!=256;++H)j[H]=y[H];for(H=0;H!=256;++H)for(B=y[H],O=256+H;O<4096;O+=256)B=j[O]=B>>>8^y[B&255];var I=[];for(H=1;H!=16;++H)I[H-1]=typeof Int32Array<"u"?j.subarray(H*256,H*256+256):j.slice(H*256,H*256+256);return I}var a=n(r),i=a[0],s=a[1],o=a[2],c=a[3],f=a[4],u=a[5],h=a[6],d=a[7],p=a[8],g=a[9],m=a[10],x=a[11],v=a[12],k=a[13],w=a[14];function S(y,O){for(var B=O^-1,H=0,j=y.length;H<j;)B=B>>>8^r[(B^y.charCodeAt(H++))&255];return~B}function b(y,O){for(var B=O^-1,H=y.length-15,j=0;j<H;)B=w[y[j++]^B&255]^k[y[j++]^B>>8&255]^v[y[j++]^B>>16&255]^x[y[j++]^B>>>24]^m[y[j++]]^g[y[j++]]^p[y[j++]]^d[y[j++]]^h[y[j++]]^u[y[j++]]^f[y[j++]]^c[y[j++]]^o[y[j++]]^s[y[j++]]^i[y[j++]]^r[y[j++]];for(H+=15;j<H;)B=B>>>8^r[(B^y[j++])&255];return~B}function T(y,O){for(var B=O^-1,H=0,j=y.length,I=0,X=0;H<j;)I=y.charCodeAt(H++),I<128?B=B>>>8^r[(B^I)&255]:I<2048?(B=B>>>8^r[(B^(192|I>>6&31))&255],B=B>>>8^r[(B^(128|I&63))&255]):I>=55296&&I<57344?(I=(I&1023)+64,X=y.charCodeAt(H++)&1023,B=B>>>8^r[(B^(240|I>>8&7))&255],B=B>>>8^r[(B^(128|I>>2&63))&255],B=B>>>8^r[(B^(128|X>>6&15|(I&3)<<4))&255],B=B>>>8^r[(B^(128|X&63))&255]):(B=B>>>8^r[(B^(224|I>>12&15))&255],B=B>>>8^r[(B^(128|I>>6&63))&255],B=B>>>8^r[(B^(128|I&63))&255]);return~B}return e.table=r,e.bstr=S,e.buf=b,e.str=T,e}(),Ee=function(){var t={};t.version="1.2.1";function r(E,N){for(var C=E.split("/"),R=N.split("/"),P=0,L=0,Z=Math.min(C.length,R.length);P<Z;++P){if(L=C[P].length-R[P].length)return L;if(C[P]!=R[P])return C[P]<R[P]?-1:1}return C.length-R.length}function n(E){if(E.charAt(E.length-1)=="/")return E.slice(0,-1).indexOf("/")===-1?E:n(E.slice(0,-1));var N=E.lastIndexOf("/");return N===-1?E:E.slice(0,N+1)}function a(E){if(E.charAt(E.length-1)=="/")return a(E.slice(0,-1));var N=E.lastIndexOf("/");return N===-1?E:E.slice(N+1)}function i(E,N){typeof N=="string"&&(N=new Date(N));var C=N.getHours();C=C<<6|N.getMinutes(),C=C<<5|N.getSeconds()>>>1,E.write_shift(2,C);var R=N.getFullYear()-1980;R=R<<4|N.getMonth()+1,R=R<<5|N.getDate(),E.write_shift(2,R)}function s(E){var N=E.read_shift(2)&65535,C=E.read_shift(2)&65535,R=new Date,P=C&31;C>>>=5;var L=C&15;C>>>=4,R.setMilliseconds(0),R.setFullYear(C+1980),R.setMonth(L-1),R.setDate(P);var Z=N&31;N>>>=5;var ie=N&63;return N>>>=6,R.setHours(N),R.setMinutes(ie),R.setSeconds(Z<<1),R}function o(E){Ht(E,0);for(var N={},C=0;E.l<=E.length-4;){var R=E.read_shift(2),P=E.read_shift(2),L=E.l+P,Z={};switch(R){case 21589:C=E.read_shift(1),C&1&&(Z.mtime=E.read_shift(4)),P>5&&(C&2&&(Z.atime=E.read_shift(4)),C&4&&(Z.ctime=E.read_shift(4))),Z.mtime&&(Z.mt=new Date(Z.mtime*1e3));break}E.l=L,N[R]=Z}return N}var c;function f(){return c||(c={})}function u(E,N){if(E[0]==80&&E[1]==75)return jm(E,N);if((E[0]|32)==109&&(E[1]|32)==105)return y3(E,N);if(E.length<512)throw new Error("CFB file size "+E.length+" < 512");var C=3,R=512,P=0,L=0,Z=0,ie=0,Y=0,Q=[],ee=E.slice(0,512);Ht(ee,0);var he=h(ee);switch(C=he[0],C){case 3:R=512;break;case 4:R=4096;break;case 0:if(he[1]==0)return jm(E,N);default:throw new Error("Major Version: Expected 3 or 4 saw "+C)}R!==512&&(ee=E.slice(0,R),Ht(ee,28));var ve=E.slice(0,R);d(ee,C);var ye=ee.read_shift(4,"i");if(C===3&&ye!==0)throw new Error("# Directory Sectors: Expected 0 saw "+ye);ee.l+=4,Z=ee.read_shift(4,"i"),ee.l+=4,ee.chk("00100000","Mini Stream Cutoff Size: "),ie=ee.read_shift(4,"i"),P=ee.read_shift(4,"i"),Y=ee.read_shift(4,"i"),L=ee.read_shift(4,"i");for(var me=-1,_e=0;_e<109&&(me=ee.read_shift(4,"i"),!(me<0));++_e)Q[_e]=me;var Ie=p(E,R);x(Y,L,Ie,R,Q);var dt=k(Ie,Z,Q,R);dt[Z].name="!Directory",P>0&&ie!==X&&(dt[ie].name="!MiniFAT"),dt[Q[0]].name="!FAT",dt.fat_addrs=Q,dt.ssz=R;var mt={},rr=[],ys=[],ks=[];w(Z,dt,Ie,rr,P,mt,ys,ie),g(ys,ks,rr),rr.shift();var Es={FileIndex:ys,FullPaths:ks};return N&&N.raw&&(Es.raw={header:ve,sectors:Ie}),Es}function h(E){if(E[E.l]==80&&E[E.l+1]==75)return[0,0];E.chk(q,"Header Signature: "),E.l+=16;var N=E.read_shift(2,"u");return[E.read_shift(2,"u"),N]}function d(E,N){var C=9;switch(E.l+=2,C=E.read_shift(2)){case 9:if(N!=3)throw new Error("Sector Shift: Expected 9 saw "+C);break;case 12:if(N!=4)throw new Error("Sector Shift: Expected 12 saw "+C);break;default:throw new Error("Sector Shift: Expected 9 or 12 saw "+C)}E.chk("0600","Mini Sector Shift: "),E.chk("000000000000","Reserved: ")}function p(E,N){for(var C=Math.ceil(E.length/N)-1,R=[],P=1;P<C;++P)R[P-1]=E.slice(P*N,(P+1)*N);return R[C-1]=E.slice(C*N),R}function g(E,N,C){for(var R=0,P=0,L=0,Z=0,ie=0,Y=C.length,Q=[],ee=[];R<Y;++R)Q[R]=ee[R]=R,N[R]=C[R];for(;ie<ee.length;++ie)R=ee[ie],P=E[R].L,L=E[R].R,Z=E[R].C,Q[R]===R&&(P!==-1&&Q[P]!==P&&(Q[R]=Q[P]),L!==-1&&Q[L]!==L&&(Q[R]=Q[L])),Z!==-1&&(Q[Z]=R),P!==-1&&R!=Q[R]&&(Q[P]=Q[R],ee.lastIndexOf(P)<ie&&ee.push(P)),L!==-1&&R!=Q[R]&&(Q[L]=Q[R],ee.lastIndexOf(L)<ie&&ee.push(L));for(R=1;R<Y;++R)Q[R]===R&&(L!==-1&&Q[L]!==L?Q[R]=Q[L]:P!==-1&&Q[P]!==P&&(Q[R]=Q[P]));for(R=1;R<Y;++R)if(E[R].type!==0){if(ie=R,ie!=Q[ie])do ie=Q[ie],N[R]=N[ie]+"/"+N[R];while(ie!==0&&Q[ie]!==-1&&ie!=Q[ie]);Q[R]=-1}for(N[0]+="/",R=1;R<Y;++R)E[R].type!==2&&(N[R]+="/")}function m(E,N,C){for(var R=E.start,P=E.size,L=[],Z=R;C&&P>0&&Z>=0;)L.push(N.slice(Z*I,Z*I+I)),P-=I,Z=ma(C,Z*4);return L.length===0?ne(0):Lt(L).slice(0,E.size)}function x(E,N,C,R,P){var L=X;if(E===X){if(N!==0)throw new Error("DIFAT chain shorter than expected")}else if(E!==-1){var Z=C[E],ie=(R>>>2)-1;if(!Z)return;for(var Y=0;Y<ie&&(L=ma(Z,Y*4))!==X;++Y)P.push(L);x(ma(Z,R-4),N-1,C,R,P)}}function v(E,N,C,R,P){var L=[],Z=[];P||(P=[]);var ie=R-1,Y=0,Q=0;for(Y=N;Y>=0;){P[Y]=!0,L[L.length]=Y,Z.push(E[Y]);var ee=C[Math.floor(Y*4/R)];if(Q=Y*4&ie,R<4+Q)throw new Error("FAT boundary crossed: "+Y+" 4 "+R);if(!E[ee])break;Y=ma(E[ee],Q)}return{nodes:L,data:fh([Z])}}function k(E,N,C,R){var P=E.length,L=[],Z=[],ie=[],Y=[],Q=R-1,ee=0,he=0,ve=0,ye=0;for(ee=0;ee<P;++ee)if(ie=[],ve=ee+N,ve>=P&&(ve-=P),!Z[ve]){Y=[];var me=[];for(he=ve;he>=0;){me[he]=!0,Z[he]=!0,ie[ie.length]=he,Y.push(E[he]);var _e=C[Math.floor(he*4/R)];if(ye=he*4&Q,R<4+ye)throw new Error("FAT boundary crossed: "+he+" 4 "+R);if(!E[_e]||(he=ma(E[_e],ye),me[he]))break}L[ve]={nodes:ie,data:fh([Y])}}return L}function w(E,N,C,R,P,L,Z,ie){for(var Y=0,Q=R.length?2:0,ee=N[E].data,he=0,ve=0,ye;he<ee.length;he+=128){var me=ee.slice(he,he+128);Ht(me,64),ve=me.read_shift(2),ye=Ul(me,0,ve-Q),R.push(ye);var _e={name:ye,type:me.read_shift(1),color:me.read_shift(1),L:me.read_shift(4,"i"),R:me.read_shift(4,"i"),C:me.read_shift(4,"i"),clsid:me.read_shift(16),state:me.read_shift(4,"i"),start:0,size:0},Ie=me.read_shift(2)+me.read_shift(2)+me.read_shift(2)+me.read_shift(2);Ie!==0&&(_e.ct=S(me,me.l-8));var dt=me.read_shift(2)+me.read_shift(2)+me.read_shift(2)+me.read_shift(2);dt!==0&&(_e.mt=S(me,me.l-8)),_e.start=me.read_shift(4,"i"),_e.size=me.read_shift(4,"i"),_e.size<0&&_e.start<0&&(_e.size=_e.type=0,_e.start=X,_e.name=""),_e.type===5?(Y=_e.start,P>0&&Y!==X&&(N[Y].name="!StreamData")):_e.size>=4096?(_e.storage="fat",N[_e.start]===void 0&&(N[_e.start]=v(C,_e.start,N.fat_addrs,N.ssz)),N[_e.start].name=_e.name,_e.content=N[_e.start].data.slice(0,_e.size)):(_e.storage="minifat",_e.size<0?_e.size=0:Y!==X&&_e.start!==X&&N[Y]&&(_e.content=m(_e,N[Y].data,(N[ie]||{}).data))),_e.content&&Ht(_e.content,0),L[ye]=_e,Z.push(_e)}}function S(E,N){return new Date((br(E,N+4)/1e7*Math.pow(2,32)+br(E,N)/1e7-11644473600)*1e3)}function b(E,N){return f(),u(c.readFileSync(E),N)}function T(E,N){var C=N&&N.type;switch(C||He&&Buffer.isBuffer(E)&&(C="buffer"),C||"base64"){case"file":return b(E,N);case"base64":return u(_r(wr(E)),N);case"binary":return u(_r(E),N)}return u(E,N)}function y(E,N){var C=N||{},R=C.root||"Root Entry";if(E.FullPaths||(E.FullPaths=[]),E.FileIndex||(E.FileIndex=[]),E.FullPaths.length!==E.FileIndex.length)throw new Error("inconsistent CFB structure");E.FullPaths.length===0&&(E.FullPaths[0]=R+"/",E.FileIndex[0]={name:R,type:5}),C.CLSID&&(E.FileIndex[0].clsid=C.CLSID),O(E)}function O(E){var N="Sh33tJ5";if(!Ee.find(E,"/"+N)){var C=ne(4);C[0]=55,C[1]=C[3]=50,C[2]=54,E.FileIndex.push({name:N,type:2,content:C,size:4,L:69,R:69,C:69}),E.FullPaths.push(E.FullPaths[0]+N),B(E)}}function B(E,N){y(E);for(var C=!1,R=!1,P=E.FullPaths.length-1;P>=0;--P){var L=E.FileIndex[P];switch(L.type){case 0:R?C=!0:(E.FileIndex.pop(),E.FullPaths.pop());break;case 1:case 2:case 5:R=!0,isNaN(L.R*L.L*L.C)&&(C=!0),L.R>-1&&L.L>-1&&L.R==L.L&&(C=!0);break;default:C=!0;break}}if(!(!C&&!N)){var Z=new Date(1987,1,19),ie=0,Y=Object.create?Object.create(null):{},Q=[];for(P=0;P<E.FullPaths.length;++P)Y[E.FullPaths[P]]=!0,E.FileIndex[P].type!==0&&Q.push([E.FullPaths[P],E.FileIndex[P]]);for(P=0;P<Q.length;++P){var ee=n(Q[P][0]);R=Y[ee],R||(Q.push([ee,{name:a(ee).replace("/",""),type:1,clsid:ae,ct:Z,mt:Z,content:null}]),Y[ee]=!0)}for(Q.sort(function(ye,me){return r(ye[0],me[0])}),E.FullPaths=[],E.FileIndex=[],P=0;P<Q.length;++P)E.FullPaths[P]=Q[P][0],E.FileIndex[P]=Q[P][1];for(P=0;P<Q.length;++P){var he=E.FileIndex[P],ve=E.FullPaths[P];if(he.name=a(ve).replace("/",""),he.L=he.R=he.C=-(he.color=1),he.size=he.content?he.content.length:0,he.start=0,he.clsid=he.clsid||ae,P===0)he.C=Q.length>1?1:-1,he.size=0,he.type=5;else if(ve.slice(-1)=="/"){for(ie=P+1;ie<Q.length&&n(E.FullPaths[ie])!=ve;++ie);for(he.C=ie>=Q.length?-1:ie,ie=P+1;ie<Q.length&&n(E.FullPaths[ie])!=n(ve);++ie);he.R=ie>=Q.length?-1:ie,he.type=1}else n(E.FullPaths[P+1]||"")==n(ve)&&(he.R=P+1),he.type=2}}}function H(E,N){var C=N||{};if(C.fileType=="mad")return k3(E,C);switch(B(E),C.fileType){case"zip":return p3(E,C)}var R=function(ye){for(var me=0,_e=0,Ie=0;Ie<ye.FileIndex.length;++Ie){var dt=ye.FileIndex[Ie];if(dt.content){var mt=dt.content.length;mt>0&&(mt<4096?me+=mt+63>>6:_e+=mt+511>>9)}}for(var rr=ye.FullPaths.length+3>>2,ys=me+7>>3,ks=me+127>>7,Es=ys+_e+rr+ks,Ba=Es+127>>7,Wc=Ba<=109?0:Math.ceil((Ba-109)/127);Es+Ba+Wc+127>>7>Ba;)Wc=++Ba<=109?0:Math.ceil((Ba-109)/127);var Nn=[1,Wc,Ba,ks,rr,_e,me,0];return ye.FileIndex[0].size=me<<6,Nn[7]=(ye.FileIndex[0].start=Nn[0]+Nn[1]+Nn[2]+Nn[3]+Nn[4]+Nn[5])+(Nn[6]+7>>3),Nn}(E),P=ne(R[7]<<9),L=0,Z=0;{for(L=0;L<8;++L)P.write_shift(1,te[L]);for(L=0;L<8;++L)P.write_shift(2,0);for(P.write_shift(2,62),P.write_shift(2,3),P.write_shift(2,65534),P.write_shift(2,9),P.write_shift(2,6),L=0;L<3;++L)P.write_shift(2,0);for(P.write_shift(4,0),P.write_shift(4,R[2]),P.write_shift(4,R[0]+R[1]+R[2]+R[3]-1),P.write_shift(4,0),P.write_shift(4,4096),P.write_shift(4,R[3]?R[0]+R[1]+R[2]-1:X),P.write_shift(4,R[3]),P.write_shift(-4,R[1]?R[0]-1:X),P.write_shift(4,R[1]),L=0;L<109;++L)P.write_shift(-4,L<R[2]?R[1]+L:-1)}if(R[1])for(Z=0;Z<R[1];++Z){for(;L<236+Z*127;++L)P.write_shift(-4,L<R[2]?R[1]+L:-1);P.write_shift(-4,Z===R[1]-1?X:Z+1)}var ie=function(ye){for(Z+=ye;L<Z-1;++L)P.write_shift(-4,L+1);ye&&(++L,P.write_shift(-4,X))};for(Z=L=0,Z+=R[1];L<Z;++L)P.write_shift(-4,oe.DIFSECT);for(Z+=R[2];L<Z;++L)P.write_shift(-4,oe.FATSECT);ie(R[3]),ie(R[4]);for(var Y=0,Q=0,ee=E.FileIndex[0];Y<E.FileIndex.length;++Y)ee=E.FileIndex[Y],ee.content&&(Q=ee.content.length,!(Q<4096)&&(ee.start=Z,ie(Q+511>>9)));for(ie(R[6]+7>>3);P.l&511;)P.write_shift(-4,oe.ENDOFCHAIN);for(Z=L=0,Y=0;Y<E.FileIndex.length;++Y)ee=E.FileIndex[Y],ee.content&&(Q=ee.content.length,!(!Q||Q>=4096)&&(ee.start=Z,ie(Q+63>>6)));for(;P.l&511;)P.write_shift(-4,oe.ENDOFCHAIN);for(L=0;L<R[4]<<2;++L){var he=E.FullPaths[L];if(!he||he.length===0){for(Y=0;Y<17;++Y)P.write_shift(4,0);for(Y=0;Y<3;++Y)P.write_shift(4,-1);for(Y=0;Y<12;++Y)P.write_shift(4,0);continue}ee=E.FileIndex[L],L===0&&(ee.start=ee.size?ee.start-1:X);var ve=L===0&&C.root||ee.name;if(Q=2*(ve.length+1),P.write_shift(64,ve,"utf16le"),P.write_shift(2,Q),P.write_shift(1,ee.type),P.write_shift(1,ee.color),P.write_shift(-4,ee.L),P.write_shift(-4,ee.R),P.write_shift(-4,ee.C),ee.clsid)P.write_shift(16,ee.clsid,"hex");else for(Y=0;Y<4;++Y)P.write_shift(4,0);P.write_shift(4,ee.state||0),P.write_shift(4,0),P.write_shift(4,0),P.write_shift(4,0),P.write_shift(4,0),P.write_shift(4,ee.start),P.write_shift(4,ee.size),P.write_shift(4,0)}for(L=1;L<E.FileIndex.length;++L)if(ee=E.FileIndex[L],ee.size>=4096)if(P.l=ee.start+1<<9,He&&Buffer.isBuffer(ee.content))ee.content.copy(P,P.l,0,ee.size),P.l+=ee.size+511&-512;else{for(Y=0;Y<ee.size;++Y)P.write_shift(1,ee.content[Y]);for(;Y&511;++Y)P.write_shift(1,0)}for(L=1;L<E.FileIndex.length;++L)if(ee=E.FileIndex[L],ee.size>0&&ee.size<4096)if(He&&Buffer.isBuffer(ee.content))ee.content.copy(P,P.l,0,ee.size),P.l+=ee.size+63&-64;else{for(Y=0;Y<ee.size;++Y)P.write_shift(1,ee.content[Y]);for(;Y&63;++Y)P.write_shift(1,0)}if(He)P.l=P.length;else for(;P.l<P.length;)P.write_shift(1,0);return P}function j(E,N){var C=E.FullPaths.map(function(Y){return Y.toUpperCase()}),R=C.map(function(Y){var Q=Y.split("/");return Q[Q.length-(Y.slice(-1)=="/"?2:1)]}),P=!1;N.charCodeAt(0)===47?(P=!0,N=C[0].slice(0,-1)+N):P=N.indexOf("/")!==-1;var L=N.toUpperCase(),Z=P===!0?C.indexOf(L):R.indexOf(L);if(Z!==-1)return E.FileIndex[Z];var ie=!L.match(Ii);for(L=L.replace(ir,""),ie&&(L=L.replace(Ii,"!")),Z=0;Z<C.length;++Z)if((ie?C[Z].replace(Ii,"!"):C[Z]).replace(ir,"")==L||(ie?R[Z].replace(Ii,"!"):R[Z]).replace(ir,"")==L)return E.FileIndex[Z];return null}var I=64,X=-2,q="d0cf11e0a1b11ae1",te=[208,207,17,224,161,177,26,225],ae="00000000000000000000000000000000",oe={MAXREGSECT:-6,DIFSECT:-4,FATSECT:-3,ENDOFCHAIN:X,FREESECT:-1,HEADER_SIGNATURE:q,HEADER_MINOR_VERSION:"3e00",MAXREGSID:-6,NOSTREAM:-1,HEADER_CLSID:ae,EntryTypes:["unknown","storage","stream","lockbytes","property","root"]};function ue(E,N,C){f();var R=H(E,C);c.writeFileSync(N,R)}function z(E){for(var N=new Array(E.length),C=0;C<E.length;++C)N[C]=String.fromCharCode(E[C]);return N.join("")}function W(E,N){var C=H(E,N);switch(N&&N.type||"buffer"){case"file":return f(),c.writeFileSync(N.filename,C),C;case"binary":return typeof C=="string"?C:z(C);case"base64":return Pi(typeof C=="string"?C:z(C));case"buffer":if(He)return Buffer.isBuffer(C)?C:kn(C);case"array":return typeof C=="string"?_r(C):C}return C}var A;function _(E){try{var N=E.InflateRaw,C=new N;if(C._processChunk(new Uint8Array([3,0]),C._finishFlushFlag),C.bytesRead)A=E;else throw new Error("zlib does not expose bytesRead")}catch(R){console.error("cannot use native zlib: "+(R.message||R))}}function F(E,N){if(!A)return Wm(E,N);var C=A.InflateRaw,R=new C,P=R._processChunk(E.slice(E.l),R._finishFlushFlag);return E.l+=R.bytesRead,P}function D(E){return A?A.deflateRawSync(E):ze(E)}var M=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],K=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258],J=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];function re(E){var N=(E<<1|E<<11)&139536|(E<<5|E<<15)&558144;return(N>>16|N>>8|N)&255}for(var le=typeof Uint8Array<"u",ce=le?new Uint8Array(256):[],Be=0;Be<256;++Be)ce[Be]=re(Be);function V(E,N){var C=ce[E&255];return N<=8?C>>>8-N:(C=C<<8|ce[E>>8&255],N<=16?C>>>16-N:(C=C<<8|ce[E>>16&255],C>>>24-N))}function We(E,N){var C=N&7,R=N>>>3;return(E[R]|(C<=6?0:E[R+1]<<8))>>>C&3}function Oe(E,N){var C=N&7,R=N>>>3;return(E[R]|(C<=5?0:E[R+1]<<8))>>>C&7}function Ue(E,N){var C=N&7,R=N>>>3;return(E[R]|(C<=4?0:E[R+1]<<8))>>>C&15}function Pe(E,N){var C=N&7,R=N>>>3;return(E[R]|(C<=3?0:E[R+1]<<8))>>>C&31}function we(E,N){var C=N&7,R=N>>>3;return(E[R]|(C<=1?0:E[R+1]<<8))>>>C&127}function Et(E,N,C){var R=N&7,P=N>>>3,L=(1<<C)-1,Z=E[P]>>>R;return C<8-R||(Z|=E[P+1]<<8-R,C<16-R)||(Z|=E[P+2]<<16-R,C<24-R)||(Z|=E[P+3]<<24-R),Z&L}function Mr(E,N,C){var R=N&7,P=N>>>3;return R<=5?E[P]|=(C&7)<<R:(E[P]|=C<<R&255,E[P+1]=(C&7)>>8-R),N+3}function mn(E,N,C){var R=N&7,P=N>>>3;return C=(C&1)<<R,E[P]|=C,N+1}function On(E,N,C){var R=N&7,P=N>>>3;return C<<=R,E[P]|=C&255,C>>>=8,E[P+1]=C,N+8}function ws(E,N,C){var R=N&7,P=N>>>3;return C<<=R,E[P]|=C&255,C>>>=8,E[P+1]=C&255,E[P+2]=C>>>8,N+16}function ra(E,N){var C=E.length,R=2*C>N?2*C:N+5,P=0;if(C>=N)return E;if(He){var L=Eu(R);if(E.copy)E.copy(L);else for(;P<E.length;++P)L[P]=E[P];return L}else if(le){var Z=new Uint8Array(R);if(Z.set)Z.set(E);else for(;P<C;++P)Z[P]=E[P];return Z}return E.length=R,E}function Cr(E){for(var N=new Array(E),C=0;C<E;++C)N[C]=0;return N}function Bn(E,N,C){var R=1,P=0,L=0,Z=0,ie=0,Y=E.length,Q=le?new Uint16Array(32):Cr(32);for(L=0;L<32;++L)Q[L]=0;for(L=Y;L<C;++L)E[L]=0;Y=E.length;var ee=le?new Uint16Array(Y):Cr(Y);for(L=0;L<Y;++L)Q[P=E[L]]++,R<P&&(R=P),ee[L]=0;for(Q[0]=0,L=1;L<=R;++L)Q[L+16]=ie=ie+Q[L-1]<<1;for(L=0;L<Y;++L)ie=E[L],ie!=0&&(ee[L]=Q[ie+16]++);var he=0;for(L=0;L<Y;++L)if(he=E[L],he!=0)for(ie=V(ee[L],R)>>R-he,Z=(1<<R+4-he)-1;Z>=0;--Z)N[ie|Z<<he]=he&15|L<<4;return R}var na=le?new Uint16Array(512):Cr(512),_s=le?new Uint16Array(32):Cr(32);if(!le){for(var cr=0;cr<512;++cr)na[cr]=0;for(cr=0;cr<32;++cr)_s[cr]=0}(function(){for(var E=[],N=0;N<32;N++)E.push(5);Bn(E,_s,32);var C=[];for(N=0;N<=143;N++)C.push(8);for(;N<=255;N++)C.push(9);for(;N<=279;N++)C.push(7);for(;N<=287;N++)C.push(8);Bn(C,na,288)})();var pn=function(){for(var N=le?new Uint8Array(32768):[],C=0,R=0;C<J.length-1;++C)for(;R<J[C+1];++R)N[R]=C;for(;R<32768;++R)N[R]=29;var P=le?new Uint8Array(259):[];for(C=0,R=0;C<K.length-1;++C)for(;R<K[C+1];++R)P[R]=C;function L(ie,Y){for(var Q=0;Q<ie.length;){var ee=Math.min(65535,ie.length-Q),he=Q+ee==ie.length;for(Y.write_shift(1,+he),Y.write_shift(2,ee),Y.write_shift(2,~ee&65535);ee-- >0;)Y[Y.l++]=ie[Q++]}return Y.l}function Z(ie,Y){for(var Q=0,ee=0,he=le?new Uint16Array(32768):[];ee<ie.length;){var ve=Math.min(65535,ie.length-ee);if(ve<10){for(Q=Mr(Y,Q,+(ee+ve==ie.length)),Q&7&&(Q+=8-(Q&7)),Y.l=Q/8|0,Y.write_shift(2,ve),Y.write_shift(2,~ve&65535);ve-- >0;)Y[Y.l++]=ie[ee++];Q=Y.l*8;continue}Q=Mr(Y,Q,+(ee+ve==ie.length)+2);for(var ye=0;ve-- >0;){var me=ie[ee];ye=(ye<<5^me)&32767;var _e=-1,Ie=0;if((_e=he[ye])&&(_e|=ee&-32768,_e>ee&&(_e-=32768),_e<ee))for(;ie[_e+Ie]==ie[ee+Ie]&&Ie<250;)++Ie;if(Ie>2){me=P[Ie],me<=22?Q=On(Y,Q,ce[me+1]>>1)-1:(On(Y,Q,3),Q+=5,On(Y,Q,ce[me-23]>>5),Q+=3);var dt=me<8?0:me-4>>2;dt>0&&(ws(Y,Q,Ie-K[me]),Q+=dt),me=N[ee-_e],Q=On(Y,Q,ce[me]>>3),Q-=3;var mt=me<4?0:me-2>>1;mt>0&&(ws(Y,Q,ee-_e-J[me]),Q+=mt);for(var rr=0;rr<Ie;++rr)he[ye]=ee&32767,ye=(ye<<5^ie[ee])&32767,++ee;ve-=Ie-1}else me<=143?me=me+48:Q=mn(Y,Q,1),Q=On(Y,Q,ce[me]),he[ye]=ee&32767,++ee}Q=On(Y,Q,0)-1}return Y.l=(Q+7)/8|0,Y.l}return function(Y,Q){return Y.length<8?L(Y,Q):Z(Y,Q)}}();function ze(E){var N=ne(50+Math.floor(E.length*1.1)),C=pn(E,N);return N.slice(0,C)}var bt=le?new Uint16Array(32768):Cr(32768),Vr=le?new Uint16Array(32768):Cr(32768),It=le?new Uint16Array(128):Cr(128),Oa=1,$m=1;function h3(E,N){var C=Pe(E,N)+257;N+=5;var R=Pe(E,N)+1;N+=5;var P=Ue(E,N)+4;N+=4;for(var L=0,Z=le?new Uint8Array(19):Cr(19),ie=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],Y=1,Q=le?new Uint8Array(8):Cr(8),ee=le?new Uint8Array(8):Cr(8),he=Z.length,ve=0;ve<P;++ve)Z[M[ve]]=L=Oe(E,N),Y<L&&(Y=L),Q[L]++,N+=3;var ye=0;for(Q[0]=0,ve=1;ve<=Y;++ve)ee[ve]=ye=ye+Q[ve-1]<<1;for(ve=0;ve<he;++ve)(ye=Z[ve])!=0&&(ie[ve]=ee[ye]++);var me=0;for(ve=0;ve<he;++ve)if(me=Z[ve],me!=0){ye=ce[ie[ve]]>>8-me;for(var _e=(1<<7-me)-1;_e>=0;--_e)It[ye|_e<<me]=me&7|ve<<3}var Ie=[];for(Y=1;Ie.length<C+R;)switch(ye=It[we(E,N)],N+=ye&7,ye>>>=3){case 16:for(L=3+We(E,N),N+=2,ye=Ie[Ie.length-1];L-- >0;)Ie.push(ye);break;case 17:for(L=3+Oe(E,N),N+=3;L-- >0;)Ie.push(0);break;case 18:for(L=11+we(E,N),N+=7;L-- >0;)Ie.push(0);break;default:Ie.push(ye),Y<ye&&(Y=ye);break}var dt=Ie.slice(0,C),mt=Ie.slice(C);for(ve=C;ve<286;++ve)dt[ve]=0;for(ve=R;ve<30;++ve)mt[ve]=0;return Oa=Bn(dt,bt,286),$m=Bn(mt,Vr,30),N}function d3(E,N){if(E[0]==3&&!(E[1]&3))return[zn(N),2];for(var C=0,R=0,P=Eu(N||1<<18),L=0,Z=P.length>>>0,ie=0,Y=0;!(R&1);){if(R=Oe(E,C),C+=3,R>>>1)R>>1==1?(ie=9,Y=5):(C=h3(E,C),ie=Oa,Y=$m);else{C&7&&(C+=8-(C&7));var Q=E[C>>>3]|E[(C>>>3)+1]<<8;if(C+=32,Q>0)for(!N&&Z<L+Q&&(P=ra(P,L+Q),Z=P.length);Q-- >0;)P[L++]=E[C>>>3],C+=8;continue}for(;;){!N&&Z<L+32767&&(P=ra(P,L+32767),Z=P.length);var ee=Et(E,C,ie),he=R>>>1==1?na[ee]:bt[ee];if(C+=he&15,he>>>=4,!(he>>>8&255))P[L++]=he;else{if(he==256)break;he-=257;var ve=he<8?0:he-4>>2;ve>5&&(ve=0);var ye=L+K[he];ve>0&&(ye+=Et(E,C,ve),C+=ve),ee=Et(E,C,Y),he=R>>>1==1?_s[ee]:Vr[ee],C+=he&15,he>>>=4;var me=he<4?0:he-2>>1,_e=J[he];for(me>0&&(_e+=Et(E,C,me),C+=me),!N&&Z<ye&&(P=ra(P,ye+100),Z=P.length);L<ye;)P[L]=P[L-_e],++L}}}return N?[P,C+7>>>3]:[P.slice(0,L),C+7>>>3]}function Wm(E,N){var C=E.slice(E.l||0),R=d3(C,N);return E.l+=R[1],R[0]}function Hm(E,N){if(E)typeof console<"u"&&console.error(N);else throw new Error(N)}function jm(E,N){var C=E;Ht(C,0);var R=[],P=[],L={FileIndex:R,FullPaths:P};y(L,{root:N.root});for(var Z=C.length-4;(C[Z]!=80||C[Z+1]!=75||C[Z+2]!=5||C[Z+3]!=6)&&Z>=0;)--Z;C.l=Z+4,C.l+=4;var ie=C.read_shift(2);C.l+=6;var Y=C.read_shift(4);for(C.l=Y,Z=0;Z<ie;++Z){C.l+=20;var Q=C.read_shift(4),ee=C.read_shift(4),he=C.read_shift(2),ve=C.read_shift(2),ye=C.read_shift(2);C.l+=8;var me=C.read_shift(4),_e=o(C.slice(C.l+he,C.l+he+ve));C.l+=he+ve+ye;var Ie=C.l;C.l=me+4,m3(C,Q,ee,L,_e),C.l=Ie}return L}function m3(E,N,C,R,P){E.l+=2;var L=E.read_shift(2),Z=E.read_shift(2),ie=s(E);if(L&8257)throw new Error("Unsupported ZIP encryption");for(var Y=E.read_shift(4),Q=E.read_shift(4),ee=E.read_shift(4),he=E.read_shift(2),ve=E.read_shift(2),ye="",me=0;me<he;++me)ye+=String.fromCharCode(E[E.l++]);if(ve){var _e=o(E.slice(E.l,E.l+ve));(_e[21589]||{}).mt&&(ie=_e[21589].mt),((P||{})[21589]||{}).mt&&(ie=P[21589].mt)}E.l+=ve;var Ie=E.slice(E.l,E.l+Q);switch(Z){case 8:Ie=F(E,ee);break;case 0:break;default:throw new Error("Unsupported ZIP Compression method "+Z)}var dt=!1;L&8&&(Y=E.read_shift(4),Y==134695760&&(Y=E.read_shift(4),dt=!0),Q=E.read_shift(4),ee=E.read_shift(4)),Q!=N&&Hm(dt,"Bad compressed size: "+N+" != "+Q),ee!=C&&Hm(dt,"Bad uncompressed size: "+C+" != "+ee),$c(R,ye,Ie,{unsafe:!0,mt:ie})}function p3(E,N){var C=N||{},R=[],P=[],L=ne(1),Z=C.compression?8:0,ie=0,Y=0,Q=0,ee=0,he=0,ve=E.FullPaths[0],ye=ve,me=E.FileIndex[0],_e=[],Ie=0;for(Y=1;Y<E.FullPaths.length;++Y)if(ye=E.FullPaths[Y].slice(ve.length),me=E.FileIndex[Y],!(!me.size||!me.content||ye=="Sh33tJ5")){var dt=ee,mt=ne(ye.length);for(Q=0;Q<ye.length;++Q)mt.write_shift(1,ye.charCodeAt(Q)&127);mt=mt.slice(0,mt.l),_e[he]=L2.buf(me.content,0);var rr=me.content;Z==8&&(rr=D(rr)),L=ne(30),L.write_shift(4,67324752),L.write_shift(2,20),L.write_shift(2,ie),L.write_shift(2,Z),me.mt?i(L,me.mt):L.write_shift(4,0),L.write_shift(-4,_e[he]),L.write_shift(4,rr.length),L.write_shift(4,me.content.length),L.write_shift(2,mt.length),L.write_shift(2,0),ee+=L.length,R.push(L),ee+=mt.length,R.push(mt),ee+=rr.length,R.push(rr),L=ne(46),L.write_shift(4,33639248),L.write_shift(2,0),L.write_shift(2,20),L.write_shift(2,ie),L.write_shift(2,Z),L.write_shift(4,0),L.write_shift(-4,_e[he]),L.write_shift(4,rr.length),L.write_shift(4,me.content.length),L.write_shift(2,mt.length),L.write_shift(2,0),L.write_shift(2,0),L.write_shift(2,0),L.write_shift(2,0),L.write_shift(4,0),L.write_shift(4,dt),Ie+=L.l,P.push(L),Ie+=mt.length,P.push(mt),++he}return L=ne(22),L.write_shift(4,101010256),L.write_shift(2,0),L.write_shift(2,0),L.write_shift(2,he),L.write_shift(2,he),L.write_shift(4,Ie),L.write_shift(4,ee),L.write_shift(2,0),Lt([Lt(R),Lt(P),L])}var Ro={htm:"text/html",xml:"text/xml",gif:"image/gif",jpg:"image/jpeg",png:"image/png",mso:"application/x-mso",thmx:"application/vnd.ms-officetheme",sh33tj5:"application/octet-stream"};function g3(E,N){if(E.ctype)return E.ctype;var C=E.name||"",R=C.match(/\.([^\.]+)$/);return R&&Ro[R[1]]||N&&(R=(C=N).match(/[\.\\]([^\.\\])+$/),R&&Ro[R[1]])?Ro[R[1]]:"application/octet-stream"}function x3(E){for(var N=Pi(E),C=[],R=0;R<N.length;R+=76)C.push(N.slice(R,R+76));return C.join(`\r
`)+`\r
`}function v3(E){var N=E.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g,function(Q){var ee=Q.charCodeAt(0).toString(16).toUpperCase();return"="+(ee.length==1?"0"+ee:ee)});N=N.replace(/ $/mg,"=20").replace(/\t$/mg,"=09"),N.charAt(0)==`
`&&(N="=0D"+N.slice(1)),N=N.replace(/\r(?!\n)/mg,"=0D").replace(/\n\n/mg,`
=0A`).replace(/([^\r\n])\n/mg,"$1=0A");for(var C=[],R=N.split(`\r
`),P=0;P<R.length;++P){var L=R[P];if(L.length==0){C.push("");continue}for(var Z=0;Z<L.length;){var ie=76,Y=L.slice(Z,Z+ie);Y.charAt(ie-1)=="="?ie--:Y.charAt(ie-2)=="="?ie-=2:Y.charAt(ie-3)=="="&&(ie-=3),Y=L.slice(Z,Z+ie),Z+=ie,Z<L.length&&(Y+="="),C.push(Y)}}return C.join(`\r
`)}function w3(E){for(var N=[],C=0;C<E.length;++C){for(var R=E[C];C<=E.length&&R.charAt(R.length-1)=="=";)R=R.slice(0,R.length-1)+E[++C];N.push(R)}for(var P=0;P<N.length;++P)N[P]=N[P].replace(/[=][0-9A-Fa-f]{2}/g,function(L){return String.fromCharCode(parseInt(L.slice(1),16))});return _r(N.join(`\r
`))}function _3(E,N,C){for(var R="",P="",L="",Z,ie=0;ie<10;++ie){var Y=N[ie];if(!Y||Y.match(/^\s*$/))break;var Q=Y.match(/^(.*?):\s*([^\s].*)$/);if(Q)switch(Q[1].toLowerCase()){case"content-location":R=Q[2].trim();break;case"content-type":L=Q[2].trim();break;case"content-transfer-encoding":P=Q[2].trim();break}}switch(++ie,P.toLowerCase()){case"base64":Z=_r(wr(N.slice(ie).join("")));break;case"quoted-printable":Z=w3(N.slice(ie));break;default:throw new Error("Unsupported Content-Transfer-Encoding "+P)}var ee=$c(E,R.slice(C.length),Z,{unsafe:!0});L&&(ee.ctype=L)}function y3(E,N){if(z(E.slice(0,13)).toLowerCase()!="mime-version:")throw new Error("Unsupported MAD header");var C=N&&N.root||"",R=(He&&Buffer.isBuffer(E)?E.toString("binary"):z(E)).split(`\r
`),P=0,L="";for(P=0;P<R.length;++P)if(L=R[P],!!/^Content-Location:/i.test(L)&&(L=L.slice(L.indexOf("file")),C||(C=L.slice(0,L.lastIndexOf("/")+1)),L.slice(0,C.length)!=C))for(;C.length>0&&(C=C.slice(0,C.length-1),C=C.slice(0,C.lastIndexOf("/")+1),L.slice(0,C.length)!=C););var Z=(R[1]||"").match(/boundary="(.*?)"/);if(!Z)throw new Error("MAD cannot find boundary");var ie="--"+(Z[1]||""),Y=[],Q=[],ee={FileIndex:Y,FullPaths:Q};y(ee);var he,ve=0;for(P=0;P<R.length;++P){var ye=R[P];ye!==ie&&ye!==ie+"--"||(ve++&&_3(ee,R.slice(he,P),C),he=P)}return ee}function k3(E,N){var C=N||{},R=C.boundary||"SheetJS";R="------="+R;for(var P=["MIME-Version: 1.0",'Content-Type: multipart/related; boundary="'+R.slice(2)+'"',"","",""],L=E.FullPaths[0],Z=L,ie=E.FileIndex[0],Y=1;Y<E.FullPaths.length;++Y)if(Z=E.FullPaths[Y].slice(L.length),ie=E.FileIndex[Y],!(!ie.size||!ie.content||Z=="Sh33tJ5")){Z=Z.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g,function(Ie){return"_x"+Ie.charCodeAt(0).toString(16)+"_"}).replace(/[\u0080-\uFFFF]/g,function(Ie){return"_u"+Ie.charCodeAt(0).toString(16)+"_"});for(var Q=ie.content,ee=He&&Buffer.isBuffer(Q)?Q.toString("binary"):z(Q),he=0,ve=Math.min(1024,ee.length),ye=0,me=0;me<=ve;++me)(ye=ee.charCodeAt(me))>=32&&ye<128&&++he;var _e=he>=ve*4/5;P.push(R),P.push("Content-Location: "+(C.root||"file:///C:/SheetJS/")+Z),P.push("Content-Transfer-Encoding: "+(_e?"quoted-printable":"base64")),P.push("Content-Type: "+g3(ie,Z)),P.push(""),P.push(_e?v3(ee):x3(ee))}return P.push(R+`--\r
`),P.join(`\r
`)}function E3(E){var N={};return y(N,E),N}function $c(E,N,C,R){var P=R&&R.unsafe;P||y(E);var L=!P&&Ee.find(E,N);if(!L){var Z=E.FullPaths[0];N.slice(0,Z.length)==Z?Z=N:(Z.slice(-1)!="/"&&(Z+="/"),Z=(Z+N).replace("//","/")),L={name:a(N),type:2},E.FileIndex.push(L),E.FullPaths.push(Z),P||Ee.utils.cfb_gc(E)}return L.content=C,L.size=C?C.length:0,R&&(R.CLSID&&(L.clsid=R.CLSID),R.mt&&(L.mt=R.mt),R.ct&&(L.ct=R.ct)),L}function b3(E,N){y(E);var C=Ee.find(E,N);if(C){for(var R=0;R<E.FileIndex.length;++R)if(E.FileIndex[R]==C)return E.FileIndex.splice(R,1),E.FullPaths.splice(R,1),!0}return!1}function S3(E,N,C){y(E);var R=Ee.find(E,N);if(R){for(var P=0;P<E.FileIndex.length;++P)if(E.FileIndex[P]==R)return E.FileIndex[P].name=a(C),E.FullPaths[P]=C,!0}return!1}function T3(E){B(E,!0)}return t.find=j,t.read=T,t.parse=u,t.write=W,t.writeFile=ue,t.utils={cfb_new:E3,cfb_add:$c,cfb_del:b3,cfb_mov:S3,cfb_gc:T3,ReadShift:zi,CheckField:Th,prep_blob:Ht,bconcat:Lt,use_zlib:_,_deflateRaw:ze,_inflateRaw:Wm,consts:oe},t}();function M2(e){return typeof e=="string"?Qs(e):Array.isArray(e)?f2(e):e}function Vi(e,t,r){if(typeof Deno<"u"){if(r&&typeof t=="string")switch(r){case"utf8":t=new TextEncoder(r).encode(t);break;case"binary":t=Qs(t);break;default:throw new Error("Unsupported encoding "+r)}return Deno.writeFileSync(e,t)}var n=r=="utf8"?sn(t):t;if(typeof IE_SaveFile<"u")return IE_SaveFile(n,e);if(typeof Blob<"u"){var a=new Blob([M2(n)],{type:"application/octet-stream"});if(typeof navigator<"u"&&navigator.msSaveBlob)return navigator.msSaveBlob(a,e);if(typeof saveAs<"u")return saveAs(a,e);if(typeof URL<"u"&&typeof document<"u"&&document.createElement&&URL.createObjectURL){var i=URL.createObjectURL(a);if(typeof chrome=="object"&&typeof(chrome.downloads||{}).download=="function")return URL.revokeObjectURL&&typeof setTimeout<"u"&&setTimeout(function(){URL.revokeObjectURL(i)},6e4),chrome.downloads.download({url:i,filename:e,saveAs:!0});var s=document.createElement("a");if(s.download!=null)return s.download=e,s.href=i,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL&&typeof setTimeout<"u"&&setTimeout(function(){URL.revokeObjectURL(i)},6e4),i}}if(typeof $<"u"&&typeof File<"u"&&typeof Folder<"u")try{var o=File(e);return o.open("w"),o.encoding="binary",Array.isArray(t)&&(t=Gn(t)),o.write(t),o.close(),t}catch(c){if(!c.message||!c.message.match(/onstruct/))throw c}throw new Error("cannot save file "+e)}function V2(e){if(typeof Deno<"u")return Deno.readFileSync(e);if(typeof $<"u"&&typeof File<"u"&&typeof Folder<"u")try{var t=File(e);t.open("r"),t.encoding="binary";var r=t.read();return t.close(),r}catch(n){if(!n.message||!n.message.match(/onstruct/))throw n}throw new Error("Cannot access file "+e)}function xt(e){for(var t=Object.keys(e),r=[],n=0;n<t.length;++n)Object.prototype.hasOwnProperty.call(e,t[n])&&r.push(t[n]);return r}function Hu(e,t){for(var r=[],n=xt(e),a=0;a!==n.length;++a)r[e[n[a]][t]]==null&&(r[e[n[a]][t]]=n[a]);return r}function no(e){for(var t=[],r=xt(e),n=0;n!==r.length;++n)t[e[r[n]]]=r[n];return t}function ao(e){for(var t=[],r=xt(e),n=0;n!==r.length;++n)t[e[r[n]]]=parseInt(r[n],10);return t}function U2(e){for(var t=[],r=xt(e),n=0;n!==r.length;++n)t[e[r[n]]]==null&&(t[e[r[n]]]=[]),t[e[r[n]]].push(r[n]);return t}var io=new Date(1899,11,30,0,0,0);function Ot(e,t){var r=e.getTime();t&&(r-=1462*24*60*60*1e3);var n=io.getTime()+(e.getTimezoneOffset()-io.getTimezoneOffset())*6e4;return(r-n)/(24*60*60*1e3)}var ju=new Date,$2=io.getTime()+(ju.getTimezoneOffset()-io.getTimezoneOffset())*6e4,zu=ju.getTimezoneOffset();function so(e){var t=new Date;return t.setTime(e*24*60*60*1e3+$2),t.getTimezoneOffset()!==zu&&t.setTime(t.getTime()+(t.getTimezoneOffset()-zu)*6e4),t}function W2(e){var t=0,r=0,n=!1,a=e.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);if(!a)throw new Error("|"+e+"| is not an ISO8601 Duration");for(var i=1;i!=a.length;++i)if(a[i]){switch(r=1,i>3&&(n=!0),a[i].slice(a[i].length-1)){case"Y":throw new Error("Unsupported ISO Duration Field: "+a[i].slice(a[i].length-1));case"D":r*=24;case"H":r*=60;case"M":if(n)r*=60;else throw new Error("Unsupported ISO Duration Field: M")}t+=r*parseInt(a[i],10)}return t}var Gu=new Date("2017-02-19T19:06:09.000Z"),Xu=isNaN(Gu.getFullYear())?new Date("2/19/17"):Gu,H2=Xu.getFullYear()==2017;function it(e,t){var r=new Date(e);if(H2)return t>0?r.setTime(r.getTime()+r.getTimezoneOffset()*60*1e3):t<0&&r.setTime(r.getTime()-r.getTimezoneOffset()*60*1e3),r;if(e instanceof Date)return e;if(Xu.getFullYear()==1917&&!isNaN(r.getFullYear())){var n=r.getFullYear();return e.indexOf(""+n)>-1||r.setFullYear(r.getFullYear()+100),r}var a=e.match(/\d+/g)||["2017","2","19","0","0","0"],i=new Date(+a[0],+a[1]-1,+a[2],+a[3]||0,+a[4]||0,+a[5]||0);return e.indexOf("Z")>-1&&(i=new Date(i.getTime()-i.getTimezoneOffset()*60*1e3)),i}function ha(e,t){if(He&&Buffer.isBuffer(e)){if(t){if(e[0]==255&&e[1]==254)return sn(e.slice(2).toString("utf16le"));if(e[1]==254&&e[2]==255)return sn(yu(e.slice(2).toString("binary")))}return e.toString("binary")}if(typeof TextDecoder<"u")try{if(t){if(e[0]==255&&e[1]==254)return sn(new TextDecoder("utf-16le").decode(e.slice(2)));if(e[0]==254&&e[1]==255)return sn(new TextDecoder("utf-16be").decode(e.slice(2)))}var r={"€":"","‚":"",ƒ:"","„":"","…":"","†":"","‡":"","ˆ":"","‰":"",Š:"","‹":"",Œ:"",Ž:"","‘":"","’":"","“":"","”":"","•":"","–":"","—":"","˜":"","™":"",š:"","›":"",œ:"",ž:"",Ÿ:""};return Array.isArray(e)&&(e=new Uint8Array(e)),new TextDecoder("latin1").decode(e).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g,function(i){return r[i]||i})}catch{}for(var n=[],a=0;a!=e.length;++a)n.push(String.fromCharCode(e[a]));return n.join("")}function st(e){if(typeof JSON<"u"&&!Array.isArray(e))return JSON.parse(JSON.stringify(e));if(typeof e!="object"||e==null)return e;if(e instanceof Date)return new Date(e.getTime());var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=st(e[r]));return t}function vt(e,t){for(var r="";r.length<t;)r+=e;return r}function jr(e){var t=Number(e);if(!isNaN(t))return isFinite(t)?t:NaN;if(!/\d/.test(e))return t;var r=1,n=e.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g,function(){return r*=100,""});return!isNaN(t=Number(n))||(n=n.replace(/[(](.*)[)]/,function(a,i){return r=-r,i}),!isNaN(t=Number(n)))?t/r:t}var j2=["january","february","march","april","may","june","july","august","september","october","november","december"];function Ga(e){var t=new Date(e),r=new Date(NaN),n=t.getYear(),a=t.getMonth(),i=t.getDate();if(isNaN(i))return r;var s=e.toLowerCase();if(s.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)){if(s=s.replace(/[^a-z]/g,"").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/,""),s.length>3&&j2.indexOf(s)==-1)return r}else if(s.match(/[a-z]/))return r;return n<0||n>8099?r:(a>0||i>1)&&n!=101?t:e.match(/[^-0-9:,\/\\]/)?r:t}var z2=function(){var e="abacaba".split(/(:?b)/i).length==5;return function(r,n,a){if(e||typeof n=="string")return r.split(n);for(var i=r.split(n),s=[i[0]],o=1;o<i.length;++o)s.push(a),s.push(i[o]);return s}}();function Ku(e){return e?e.content&&e.type?ha(e.content,!0):e.data?Ni(e.data):e.asNodeBuffer&&He?Ni(e.asNodeBuffer().toString("binary")):e.asBinary?Ni(e.asBinary()):e._data&&e._data.getContent?Ni(ha(Array.prototype.slice.call(e._data.getContent(),0))):null:null}function Yu(e){if(!e)return null;if(e.data)return _u(e.data);if(e.asNodeBuffer&&He)return e.asNodeBuffer();if(e._data&&e._data.getContent){var t=e._data.getContent();return typeof t=="string"?_u(t):Array.prototype.slice.call(t)}return e.content&&e.type?e.content:null}function G2(e){return e&&e.name.slice(-4)===".bin"?Yu(e):Ku(e)}function Rr(e,t){for(var r=e.FullPaths||xt(e.files),n=t.toLowerCase().replace(/[\/]/g,"\\"),a=n.replace(/\\/g,"/"),i=0;i<r.length;++i){var s=r[i].replace(/^Root Entry[\/]/,"").toLowerCase();if(n==s||a==s)return e.files?e.files[r[i]]:e.FileIndex[i]}return null}function Ol(e,t){var r=Rr(e,t);if(r==null)throw new Error("Cannot find file "+t+" in zip");return r}function Tt(e,t,r){if(!r)return G2(Ol(e,t));if(!t)return null;try{return Tt(e,t)}catch{return null}}function kr(e,t,r){if(!r)return Ku(Ol(e,t));if(!t)return null;try{return kr(e,t)}catch{return null}}function qu(e,t,r){if(!r)return Yu(Ol(e,t));if(!t)return null;try{return qu(e,t)}catch{return null}}function Ju(e){for(var t=e.FullPaths||xt(e.files),r=[],n=0;n<t.length;++n)t[n].slice(-1)!="/"&&r.push(t[n].replace(/^Root Entry[\/]/,""));return r.sort()}function Ve(e,t,r){if(e.FullPaths){if(typeof r=="string"){var n;return He?n=kn(r):n=u2(r),Ee.utils.cfb_add(e,t,n)}Ee.utils.cfb_add(e,t,r)}else e.file(t,r)}function Bl(){return Ee.utils.cfb_new()}function Zu(e,t){switch(t.type){case"base64":return Ee.read(e,{type:"base64"});case"binary":return Ee.read(e,{type:"binary"});case"buffer":case"array":return Ee.read(e,{type:"buffer"})}throw new Error("Unrecognized type "+t.type)}function Ui(e,t){if(e.charAt(0)=="/")return e.slice(1);var r=t.split("/");t.slice(-1)!="/"&&r.pop();for(var n=e.split("/");n.length!==0;){var a=n.shift();a===".."?r.pop():a!=="."&&r.push(a)}return r.join("/")}var _t=`<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r
`,X2=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g,Qu=/<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg,K2=/<[^>]*>/g,Xt=_t.match(Qu)?Qu:K2,Y2=/<\w*:/,q2=/<(\/?)\w+:/;function Re(e,t,r){for(var n={},a=0,i=0;a!==e.length&&!((i=e.charCodeAt(a))===32||i===10||i===13);++a);if(t||(n[0]=e.slice(0,a)),a===e.length)return n;var s=e.match(X2),o=0,c="",f=0,u="",h="",d=1;if(s)for(f=0;f!=s.length;++f){for(h=s[f],i=0;i!=h.length&&h.charCodeAt(i)!==61;++i);for(u=h.slice(0,i).trim();h.charCodeAt(i+1)==32;)++i;for(d=(a=h.charCodeAt(i+1))==34||a==39?1:0,c=h.slice(i+1+d,h.length-d),o=0;o!=u.length&&u.charCodeAt(o)!==58;++o);if(o===u.length)u.indexOf("_")>0&&(u=u.slice(0,u.indexOf("_"))),n[u]=c,r||(n[u.toLowerCase()]=c);else{var p=(o===5&&u.slice(0,5)==="xmlns"?"xmlns":"")+u.slice(o+1);if(n[p]&&u.slice(o-3,o)=="ext")continue;n[p]=c,r||(n[p.toLowerCase()]=c)}}return n}function an(e){return e.replace(q2,"<$1")}var eh={"&quot;":'"',"&apos;":"'","&gt;":">","&lt;":"<","&amp;":"&"},Nl=no(eh),Ke=function(){var e=/&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig,t=/_x([\da-fA-F]{4})_/ig;return function r(n){var a=n+"",i=a.indexOf("<![CDATA[");if(i==-1)return a.replace(e,function(o,c){return eh[o]||String.fromCharCode(parseInt(c,o.indexOf("x")>-1?16:10))||o}).replace(t,function(o,c){return String.fromCharCode(parseInt(c,16))});var s=a.indexOf("]]>");return r(a.slice(0,i))+a.slice(i+9,s)+r(a.slice(s+3))}}(),Pl=/[&<>'"]/g,J2=/[\u0000-\u0008\u000b-\u001f]/g;function Qe(e){var t=e+"";return t.replace(Pl,function(r){return Nl[r]}).replace(J2,function(r){return"_x"+("000"+r.charCodeAt(0).toString(16)).slice(-4)+"_"})}function th(e){return Qe(e).replace(/ /g,"_x0020_")}var rh=/[\u0000-\u001f]/g;function Il(e){var t=e+"";return t.replace(Pl,function(r){return Nl[r]}).replace(/\n/g,"<br/>").replace(rh,function(r){return"&#x"+("000"+r.charCodeAt(0).toString(16)).slice(-4)+";"})}function Z2(e){var t=e+"";return t.replace(Pl,function(r){return Nl[r]}).replace(rh,function(r){return"&#x"+r.charCodeAt(0).toString(16).toUpperCase()+";"})}var nh=function(){var e=/&#(\d+);/g;function t(r,n){return String.fromCharCode(parseInt(n,10))}return function(n){return n.replace(e,t)}}();function Q2(e){return e.replace(/(\r\n|[\r\n])/g,"&#10;")}function ot(e){switch(e){case 1:case!0:case"1":case"true":case"TRUE":return!0;default:return!1}}function Ll(e){for(var t="",r=0,n=0,a=0,i=0,s=0,o=0;r<e.length;){if(n=e.charCodeAt(r++),n<128){t+=String.fromCharCode(n);continue}if(a=e.charCodeAt(r++),n>191&&n<224){s=(n&31)<<6,s|=a&63,t+=String.fromCharCode(s);continue}if(i=e.charCodeAt(r++),n<240){t+=String.fromCharCode((n&15)<<12|(a&63)<<6|i&63);continue}s=e.charCodeAt(r++),o=((n&7)<<18|(a&63)<<12|(i&63)<<6|s&63)-65536,t+=String.fromCharCode(55296+(o>>>10&1023)),t+=String.fromCharCode(56320+(o&1023))}return t}function ah(e){var t=zn(2*e.length),r,n,a=1,i=0,s=0,o;for(n=0;n<e.length;n+=a)a=1,(o=e.charCodeAt(n))<128?r=o:o<224?(r=(o&31)*64+(e.charCodeAt(n+1)&63),a=2):o<240?(r=(o&15)*4096+(e.charCodeAt(n+1)&63)*64+(e.charCodeAt(n+2)&63),a=3):(a=4,r=(o&7)*262144+(e.charCodeAt(n+1)&63)*4096+(e.charCodeAt(n+2)&63)*64+(e.charCodeAt(n+3)&63),r-=65536,s=55296+(r>>>10&1023),r=56320+(r&1023)),s!==0&&(t[i++]=s&255,t[i++]=s>>>8,s=0),t[i++]=r%256,t[i++]=r>>>8;return t.slice(0,i).toString("ucs2")}function ih(e){return kn(e,"binary").toString("utf8")}var oo="foo bar bazâð£",nt=He&&(ih(oo)==Ll(oo)&&ih||ah(oo)==Ll(oo)&&ah)||Ll,sn=He?function(e){return kn(e,"utf8").toString("binary")}:function(e){for(var t=[],r=0,n=0,a=0;r<e.length;)switch(n=e.charCodeAt(r++),!0){case n<128:t.push(String.fromCharCode(n));break;case n<2048:t.push(String.fromCharCode(192+(n>>6))),t.push(String.fromCharCode(128+(n&63)));break;case(n>=55296&&n<57344):n-=55296,a=e.charCodeAt(r++)-56320+(n<<10),t.push(String.fromCharCode(240+(a>>18&7))),t.push(String.fromCharCode(144+(a>>12&63))),t.push(String.fromCharCode(128+(a>>6&63))),t.push(String.fromCharCode(128+(a&63)));break;default:t.push(String.fromCharCode(224+(n>>12))),t.push(String.fromCharCode(128+(n>>6&63))),t.push(String.fromCharCode(128+(n&63)))}return t.join("")},$i=function(){var e={};return function(r,n){var a=r+"|"+(n||"");return e[a]?e[a]:e[a]=new RegExp("<(?:\\w+:)?"+r+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+r+">",n||"")}}(),sh=function(){var e=[["nbsp"," "],["middot","·"],["quot",'"'],["apos","'"],["gt",">"],["lt","<"],["amp","&"]].map(function(t){return[new RegExp("&"+t[0]+";","ig"),t[1]]});return function(r){for(var n=r.replace(/^[\t\n\r ]+/,"").replace(/[\t\n\r ]+$/,"").replace(/>\s+/g,">").replace(/\s+</g,"<").replace(/[\t\n\r ]+/g," ").replace(/<\s*[bB][rR]\s*\/?>/g,`
`).replace(/<[^>]*>/g,""),a=0;a<e.length;++a)n=n.replace(e[a][0],e[a][1]);return n}}(),e_=function(){var e={};return function(r){return e[r]!==void 0?e[r]:e[r]=new RegExp("<(?:vt:)?"+r+">([\\s\\S]*?)</(?:vt:)?"+r+">","g")}}(),t_=/<\/?(?:vt:)?variant>/g,r_=/<(?:vt:)([^>]*)>([\s\S]*)</;function oh(e,t){var r=Re(e),n=e.match(e_(r.baseType))||[],a=[];if(n.length!=r.size){if(t.WTF)throw new Error("unexpected vector length "+n.length+" != "+r.size);return a}return n.forEach(function(i){var s=i.replace(t_,"").match(r_);s&&a.push({v:nt(s[2]),t:s[1]})}),a}var lh=/(^\s|\s$|\n)/;function Wt(e,t){return"<"+e+(t.match(lh)?' xml:space="preserve"':"")+">"+t+"</"+e+">"}function Wi(e){return xt(e).map(function(t){return" "+t+'="'+e[t]+'"'}).join("")}function pe(e,t,r){return"<"+e+(r!=null?Wi(r):"")+(t!=null?(t.match(lh)?' xml:space="preserve"':"")+">"+t+"</"+e:"/")+">"}function Ml(e,t){try{return e.toISOString().replace(/\.\d*/,"")}catch(r){if(t)throw r}return""}function n_(e,t){switch(typeof e){case"string":var r=pe("vt:lpwstr",Qe(e));return t&&(r=r.replace(/&quot;/g,"_x0022_")),r;case"number":return pe((e|0)==e?"vt:i4":"vt:r8",Qe(String(e)));case"boolean":return pe("vt:bool",e?"true":"false")}if(e instanceof Date)return pe("vt:filetime",Ml(e));throw new Error("Unable to serialize "+e)}function Vl(e){if(He&&Buffer.isBuffer(e))return e.toString("utf8");if(typeof e=="string")return e;if(typeof Uint8Array<"u"&&e instanceof Uint8Array)return nt(Gn(Cl(e)));throw new Error("Bad input format: expected Buffer or string")}var Hi=/<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg,Bt={CORE_PROPS:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",CUST_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",EXT_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",CT:"http://schemas.openxmlformats.org/package/2006/content-types",RELS:"http://schemas.openxmlformats.org/package/2006/relationships",TCMNT:"http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",mx:"http://schemas.microsoft.com/office/mac/excel/2008/main",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",sjs:"http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",xsi:"http://www.w3.org/2001/XMLSchema-instance",xsd:"http://www.w3.org/2001/XMLSchema"},da=["http://schemas.openxmlformats.org/spreadsheetml/2006/main","http://purl.oclc.org/ooxml/spreadsheetml/main","http://schemas.microsoft.com/office/excel/2006/main","http://schemas.microsoft.com/office/excel/2006/2"],Er={o:"urn:schemas-microsoft-com:office:office",x:"urn:schemas-microsoft-com:office:excel",ss:"urn:schemas-microsoft-com:office:spreadsheet",dt:"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",mv:"http://macVmlSchemaUri",v:"urn:schemas-microsoft-com:vml",html:"http://www.w3.org/TR/REC-html40"};function a_(e,t){for(var r=1-2*(e[t+7]>>>7),n=((e[t+7]&127)<<4)+(e[t+6]>>>4&15),a=e[t+6]&15,i=5;i>=0;--i)a=a*256+e[t+i];return n==2047?a==0?r*(1/0):NaN:(n==0?n=-1022:(n-=1023,a+=Math.pow(2,52)),r*Math.pow(2,n-52)*a)}function i_(e,t,r){var n=(t<0||1/t==-1/0?1:0)<<7,a=0,i=0,s=n?-t:t;isFinite(s)?s==0?a=i=0:(a=Math.floor(Math.log(s)/Math.LN2),i=s*Math.pow(2,52-a),a<=-1023&&(!isFinite(i)||i<Math.pow(2,52))?a=-1022:(i-=Math.pow(2,52),a+=1023)):(a=2047,i=isNaN(t)?26985:0);for(var o=0;o<=5;++o,i/=256)e[r+o]=i&255;e[r+6]=(a&15)<<4|i&15,e[r+7]=a>>4|n}var ch=function(e){for(var t=[],r=10240,n=0;n<e[0].length;++n)if(e[0][n])for(var a=0,i=e[0][n].length;a<i;a+=r)t.push.apply(t,e[0][n].slice(a,a+r));return t},fh=He?function(e){return e[0].length>0&&Buffer.isBuffer(e[0][0])?Buffer.concat(e[0].map(function(t){return Buffer.isBuffer(t)?t:kn(t)})):ch(e)}:ch,uh=function(e,t,r){for(var n=[],a=t;a<r;a+=2)n.push(String.fromCharCode(bn(e,a)));return n.join("").replace(ir,"")},Ul=He?function(e,t,r){return Buffer.isBuffer(e)?e.toString("utf16le",t,r).replace(ir,""):uh(e,t,r)}:uh,hh=function(e,t,r){for(var n=[],a=t;a<t+r;++a)n.push(("0"+e[a].toString(16)).slice(-2));return n.join("")},dh=He?function(e,t,r){return Buffer.isBuffer(e)?e.toString("hex",t,t+r):hh(e,t,r)}:hh,mh=function(e,t,r){for(var n=[],a=t;a<r;a++)n.push(String.fromCharCode(Xa(e,a)));return n.join("")},ji=He?function(t,r,n){return Buffer.isBuffer(t)?t.toString("utf8",r,n):mh(t,r,n)}:mh,ph=function(e,t){var r=br(e,t);return r>0?ji(e,t+4,t+4+r-1):""},gh=ph,xh=function(e,t){var r=br(e,t);return r>0?ji(e,t+4,t+4+r-1):""},vh=xh,wh=function(e,t){var r=2*br(e,t);return r>0?ji(e,t+4,t+4+r-1):""},_h=wh,yh=function(t,r){var n=br(t,r);return n>0?Ul(t,r+4,r+4+n):""},kh=yh,Eh=function(e,t){var r=br(e,t);return r>0?ji(e,t+4,t+4+r):""},bh=Eh,Sh=function(e,t){return a_(e,t)},lo=Sh,$l=function(t){return Array.isArray(t)||typeof Uint8Array<"u"&&t instanceof Uint8Array};He&&(gh=function(t,r){if(!Buffer.isBuffer(t))return ph(t,r);var n=t.readUInt32LE(r);return n>0?t.toString("utf8",r+4,r+4+n-1):""},vh=function(t,r){if(!Buffer.isBuffer(t))return xh(t,r);var n=t.readUInt32LE(r);return n>0?t.toString("utf8",r+4,r+4+n-1):""},_h=function(t,r){if(!Buffer.isBuffer(t))return wh(t,r);var n=2*t.readUInt32LE(r);return t.toString("utf16le",r+4,r+4+n-1)},kh=function(t,r){if(!Buffer.isBuffer(t))return yh(t,r);var n=t.readUInt32LE(r);return t.toString("utf16le",r+4,r+4+n)},bh=function(t,r){if(!Buffer.isBuffer(t))return Eh(t,r);var n=t.readUInt32LE(r);return t.toString("utf8",r+4,r+4+n)},lo=function(t,r){return Buffer.isBuffer(t)?t.readDoubleLE(r):Sh(t,r)},$l=function(t){return Buffer.isBuffer(t)||Array.isArray(t)||typeof Uint8Array<"u"&&t instanceof Uint8Array});var Xa=function(e,t){return e[t]},bn=function(e,t){return e[t+1]*256+e[t]},s_=function(e,t){var r=e[t+1]*256+e[t];return r<32768?r:(65535-r+1)*-1},br=function(e,t){return e[t+3]*(1<<24)+(e[t+2]<<16)+(e[t+1]<<8)+e[t]},ma=function(e,t){return e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]},o_=function(e,t){return e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3]};function zi(e,t){var r="",n,a,i=[],s,o,c,f;switch(t){case"dbcs":if(f=this.l,He&&Buffer.isBuffer(this))r=this.slice(this.l,this.l+2*e).toString("utf16le");else for(c=0;c<e;++c)r+=String.fromCharCode(bn(this,f)),f+=2;e*=2;break;case"utf8":r=ji(this,this.l,this.l+e);break;case"utf16le":e*=2,r=Ul(this,this.l,this.l+e);break;case"wstr":return zi.call(this,e,"dbcs");case"lpstr-ansi":r=gh(this,this.l),e=4+br(this,this.l);break;case"lpstr-cp":r=vh(this,this.l),e=4+br(this,this.l);break;case"lpwstr":r=_h(this,this.l),e=4+2*br(this,this.l);break;case"lpp4":e=4+br(this,this.l),r=kh(this,this.l),e&2&&(e+=2);break;case"8lpp4":e=4+br(this,this.l),r=bh(this,this.l),e&3&&(e+=4-(e&3));break;case"cstr":for(e=0,r="";(s=Xa(this,this.l+e++))!==0;)i.push(Zs(s));r=i.join("");break;case"_wstr":for(e=0,r="";(s=bn(this,this.l+e))!==0;)i.push(Zs(s)),e+=2;e+=2,r=i.join("");break;case"dbcs-cont":for(r="",f=this.l,c=0;c<e;++c){if(this.lens&&this.lens.indexOf(f)!==-1)return s=Xa(this,f),this.l=f+1,o=zi.call(this,e-c,s?"dbcs-cont":"sbcs-cont"),i.join("")+o;i.push(Zs(bn(this,f))),f+=2}r=i.join(""),e*=2;break;case"cpstr":case"sbcs-cont":for(r="",f=this.l,c=0;c!=e;++c){if(this.lens&&this.lens.indexOf(f)!==-1)return s=Xa(this,f),this.l=f+1,o=zi.call(this,e-c,s?"dbcs-cont":"sbcs-cont"),i.join("")+o;i.push(Zs(Xa(this,f))),f+=1}r=i.join("");break;default:switch(e){case 1:return n=Xa(this,this.l),this.l++,n;case 2:return n=(t==="i"?s_:bn)(this,this.l),this.l+=2,n;case 4:case-4:return t==="i"||!(this[this.l+3]&128)?(n=(e>0?ma:o_)(this,this.l),this.l+=4,n):(a=br(this,this.l),this.l+=4,a);case 8:case-8:if(t==="f")return e==8?a=lo(this,this.l):a=lo([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]],0),this.l+=8,a;e=8;case 16:r=dh(this,this.l,e);break}}return this.l+=e,r}var l_=function(e,t,r){e[r]=t&255,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24&255},c_=function(e,t,r){e[r]=t&255,e[r+1]=t>>8&255,e[r+2]=t>>16&255,e[r+3]=t>>24&255},f_=function(e,t,r){e[r]=t&255,e[r+1]=t>>>8&255};function u_(e,t,r){var n=0,a=0;if(r==="dbcs"){for(a=0;a!=t.length;++a)f_(this,t.charCodeAt(a),this.l+2*a);n=2*t.length}else if(r==="sbcs"){for(t=t.replace(/[^\x00-\x7F]/g,"_"),a=0;a!=t.length;++a)this[this.l+a]=t.charCodeAt(a)&255;n=t.length}else if(r==="hex"){for(;a<e;++a)this[this.l++]=parseInt(t.slice(2*a,2*a+2),16)||0;return this}else if(r==="utf16le"){var i=Math.min(this.l+e,this.length);for(a=0;a<Math.min(t.length,e);++a){var s=t.charCodeAt(a);this[this.l++]=s&255,this[this.l++]=s>>8}for(;this.l<i;)this[this.l++]=0;return this}else switch(e){case 1:n=1,this[this.l]=t&255;break;case 2:n=2,this[this.l]=t&255,t>>>=8,this[this.l+1]=t&255;break;case 3:n=3,this[this.l]=t&255,t>>>=8,this[this.l+1]=t&255,t>>>=8,this[this.l+2]=t&255;break;case 4:n=4,l_(this,t,this.l);break;case 8:if(n=8,r==="f"){i_(this,t,this.l);break}case 16:break;case-4:n=4,c_(this,t,this.l);break}return this.l+=n,this}function Th(e,t){var r=dh(this,this.l,e.length>>1);if(r!==e)throw new Error(t+"Expected "+e+" saw "+r);this.l+=e.length>>1}function Ht(e,t){e.l=t,e.read_shift=zi,e.chk=Th,e.write_shift=u_}function Kt(e,t){e.l+=t}function ne(e){var t=zn(e);return Ht(t,0),t}function Sn(e,t,r){if(e){var n,a,i;Ht(e,e.l||0);for(var s=e.length,o=0,c=0;e.l<s;){o=e.read_shift(1),o&128&&(o=(o&127)+((e.read_shift(1)&127)<<7));var f=fs[o]||fs[65535];for(n=e.read_shift(1),i=n&127,a=1;a<4&&n&128;++a)i+=((n=e.read_shift(1))&127)<<7*a;c=e.l+i;var u=f.f&&f.f(e,i,r);if(e.l=c,t(u,f,o))return}}}function ur(){var e=[],t=He?256:2048,r=function(f){var u=ne(f);return Ht(u,0),u},n=r(t),a=function(){n&&(n.length>n.l&&(n=n.slice(0,n.l),n.l=n.length),n.length>0&&e.push(n),n=null)},i=function(f){return n&&f<n.length-n.l?n:(a(),n=r(Math.max(f+1,t)))},s=function(){return a(),Lt(e)},o=function(f){a(),n=f,n.l==null&&(n.l=n.length),i(t)};return{next:i,push:o,end:s,_bufs:e}}function fe(e,t,r,n){var a=+t,i;if(!isNaN(a)){n||(n=fs[a].p||(r||[]).length||0),i=1+(a>=128?1:0)+1,n>=128&&++i,n>=16384&&++i,n>=2097152&&++i;var s=e.next(i);a<=127?s.write_shift(1,a):(s.write_shift(1,(a&127)+128),s.write_shift(1,a>>7));for(var o=0;o!=4;++o)if(n>=128)s.write_shift(1,(n&127)+128),n>>=7;else{s.write_shift(1,n);break}n>0&&$l(r)&&e.push(r)}}function Gi(e,t,r){var n=st(e);if(t.s?(n.cRel&&(n.c+=t.s.c),n.rRel&&(n.r+=t.s.r)):(n.cRel&&(n.c+=t.c),n.rRel&&(n.r+=t.r)),!r||r.biff<12){for(;n.c>=256;)n.c-=256;for(;n.r>=65536;)n.r-=65536}return n}function Fh(e,t,r){var n=st(e);return n.s=Gi(n.s,t.s,r),n.e=Gi(n.e,t.s,r),n}function Xi(e,t){if(e.cRel&&e.c<0)for(e=st(e);e.c<0;)e.c+=t>8?16384:256;if(e.rRel&&e.r<0)for(e=st(e);e.r<0;)e.r+=t>8?1048576:t>5?65536:16384;var r=Ce(e);return!e.cRel&&e.cRel!=null&&(r=m_(r)),!e.rRel&&e.rRel!=null&&(r=h_(r)),r}function Wl(e,t){return e.s.r==0&&!e.s.rRel&&e.e.r==(t.biff>=12?1048575:t.biff>=8?65536:16384)&&!e.e.rRel?(e.s.cRel?"":"$")+ut(e.s.c)+":"+(e.e.cRel?"":"$")+ut(e.e.c):e.s.c==0&&!e.s.cRel&&e.e.c==(t.biff>=12?16383:255)&&!e.e.cRel?(e.s.rRel?"":"$")+yt(e.s.r)+":"+(e.e.rRel?"":"$")+yt(e.e.r):Xi(e.s,t.biff)+":"+Xi(e.e,t.biff)}function Hl(e){return parseInt(d_(e),10)-1}function yt(e){return""+(e+1)}function h_(e){return e.replace(/([A-Z]|^)(\d+)$/,"$1$$$2")}function d_(e){return e.replace(/\$(\d+)$/,"$1")}function jl(e){for(var t=p_(e),r=0,n=0;n!==t.length;++n)r=26*r+t.charCodeAt(n)-64;return r-1}function ut(e){if(e<0)throw new Error("invalid column "+e);var t="";for(++e;e;e=Math.floor((e-1)/26))t=String.fromCharCode((e-1)%26+65)+t;return t}function m_(e){return e.replace(/^([A-Z])/,"$$$1")}function p_(e){return e.replace(/^\$([A-Z])/,"$1")}function g_(e){return e.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(",")}function ht(e){for(var t=0,r=0,n=0;n<e.length;++n){var a=e.charCodeAt(n);a>=48&&a<=57?t=10*t+(a-48):a>=65&&a<=90&&(r=26*r+(a-64))}return{c:r-1,r:t-1}}function Ce(e){for(var t=e.c+1,r="";t;t=(t-1)/26|0)r=String.fromCharCode((t-1)%26+65)+r;return r+(e.r+1)}function hr(e){var t=e.indexOf(":");return t==-1?{s:ht(e),e:ht(e)}:{s:ht(e.slice(0,t)),e:ht(e.slice(t+1))}}function Me(e,t){return typeof t>"u"||typeof t=="number"?Me(e.s,e.e):(typeof e!="string"&&(e=Ce(e)),typeof t!="string"&&(t=Ce(t)),e==t?e:e+":"+t)}function Ye(e){var t={s:{c:0,r:0},e:{c:0,r:0}},r=0,n=0,a=0,i=e.length;for(r=0;n<i&&!((a=e.charCodeAt(n)-64)<1||a>26);++n)r=26*r+a;for(t.s.c=--r,r=0;n<i&&!((a=e.charCodeAt(n)-48)<0||a>9);++n)r=10*r+a;if(t.s.r=--r,n===i||a!=10)return t.e.c=t.s.c,t.e.r=t.s.r,t;for(++n,r=0;n!=i&&!((a=e.charCodeAt(n)-64)<1||a>26);++n)r=26*r+a;for(t.e.c=--r,r=0;n!=i&&!((a=e.charCodeAt(n)-48)<0||a>9);++n)r=10*r+a;return t.e.r=--r,t}function Ch(e,t){var r=e.t=="d"&&t instanceof Date;if(e.z!=null)try{return e.w=yr(e.z,r?Ot(t):t)}catch{}try{return e.w=yr((e.XF||{}).numFmtId||(r?14:0),r?Ot(t):t)}catch{return""+t}}function Tn(e,t,r){return e==null||e.t==null||e.t=="z"?"":e.w!==void 0?e.w:(e.t=="d"&&!e.z&&r&&r.dateNF&&(e.z=r.dateNF),e.t=="e"?Fn[e.v]||e.v:t==null?Ch(e,e.v):Ch(e,t))}function Yn(e,t){var r=t&&t.sheet?t.sheet:"Sheet1",n={};return n[r]=e,{SheetNames:[r],Sheets:n}}function Ah(e,t,r){var n=r||{},a=e?Array.isArray(e):n.dense,i=e||(a?[]:{}),s=0,o=0;if(i&&n.origin!=null){if(typeof n.origin=="number")s=n.origin;else{var c=typeof n.origin=="string"?ht(n.origin):n.origin;s=c.r,o=c.c}i["!ref"]||(i["!ref"]="A1:A1")}var f={s:{c:1e7,r:1e7},e:{c:0,r:0}};if(i["!ref"]){var u=Ye(i["!ref"]);f.s.c=u.s.c,f.s.r=u.s.r,f.e.c=Math.max(f.e.c,u.e.c),f.e.r=Math.max(f.e.r,u.e.r),s==-1&&(f.e.r=s=u.e.r+1)}for(var h=0;h!=t.length;++h)if(t[h]){if(!Array.isArray(t[h]))throw new Error("aoa_to_sheet expects an array of arrays");for(var d=0;d!=t[h].length;++d)if(!(typeof t[h][d]>"u")){var p={v:t[h][d]},g=s+h,m=o+d;if(f.s.r>g&&(f.s.r=g),f.s.c>m&&(f.s.c=m),f.e.r<g&&(f.e.r=g),f.e.c<m&&(f.e.c=m),t[h][d]&&typeof t[h][d]=="object"&&!Array.isArray(t[h][d])&&!(t[h][d]instanceof Date))p=t[h][d];else if(Array.isArray(p.v)&&(p.f=t[h][d][1],p.v=p.v[0]),p.v===null)if(p.f)p.t="n";else if(n.nullError)p.t="e",p.v=0;else if(n.sheetStubs)p.t="z";else continue;else typeof p.v=="number"?p.t="n":typeof p.v=="boolean"?p.t="b":p.v instanceof Date?(p.z=n.dateNF||Se[14],n.cellDates?(p.t="d",p.w=yr(p.z,Ot(p.v))):(p.t="n",p.v=Ot(p.v),p.w=yr(p.z,p.v))):p.t="s";if(a)i[g]||(i[g]=[]),i[g][m]&&i[g][m].z&&(p.z=i[g][m].z),i[g][m]=p;else{var x=Ce({c:m,r:g});i[x]&&i[x].z&&(p.z=i[x].z),i[x]=p}}}return f.s.c<1e7&&(i["!ref"]=Me(f)),i}function Ka(e,t){return Ah(null,e,t)}function x_(e){return e.read_shift(4,"i")}function zr(e,t){return t||(t=ne(4)),t.write_shift(4,e),t}function Yt(e){var t=e.read_shift(4);return t===0?"":e.read_shift(t,"dbcs")}function Mt(e,t){var r=!1;return t==null&&(r=!0,t=ne(4+2*e.length)),t.write_shift(4,e.length),e.length>0&&t.write_shift(0,e,"dbcs"),r?t.slice(0,t.l):t}function v_(e){return{ich:e.read_shift(2),ifnt:e.read_shift(2)}}function w_(e,t){return t||(t=ne(4)),t.write_shift(2,e.ich||0),t.write_shift(2,e.ifnt||0),t}function zl(e,t){var r=e.l,n=e.read_shift(1),a=Yt(e),i=[],s={t:a,h:a};if(n&1){for(var o=e.read_shift(4),c=0;c!=o;++c)i.push(v_(e));s.r=i}else s.r=[{ich:0,ifnt:0}];return e.l=r+t,s}function __(e,t){var r=!1;return t==null&&(r=!0,t=ne(15+4*e.t.length)),t.write_shift(1,0),Mt(e.t,t),r?t.slice(0,t.l):t}var y_=zl;function k_(e,t){var r=!1;return t==null&&(r=!0,t=ne(23+4*e.t.length)),t.write_shift(1,1),Mt(e.t,t),t.write_shift(4,1),w_({ich:0,ifnt:0},t),r?t.slice(0,t.l):t}function Or(e){var t=e.read_shift(4),r=e.read_shift(2);return r+=e.read_shift(1)<<16,e.l++,{c:t,iStyleRef:r}}function pa(e,t){return t==null&&(t=ne(8)),t.write_shift(-4,e.c),t.write_shift(3,e.iStyleRef||e.s),t.write_shift(1,0),t}function ga(e){var t=e.read_shift(2);return t+=e.read_shift(1)<<16,e.l++,{c:-1,iStyleRef:t}}function xa(e,t){return t==null&&(t=ne(4)),t.write_shift(3,e.iStyleRef||e.s),t.write_shift(1,0),t}var E_=Yt,Dh=Mt;function Gl(e){var t=e.read_shift(4);return t===0||t===4294967295?"":e.read_shift(t,"dbcs")}function co(e,t){var r=!1;return t==null&&(r=!0,t=ne(127)),t.write_shift(4,e.length>0?e.length:4294967295),e.length>0&&t.write_shift(0,e,"dbcs"),r?t.slice(0,t.l):t}var b_=Yt,Xl=Gl,Kl=co;function Yl(e){var t=e.slice(e.l,e.l+4),r=t[0]&1,n=t[0]&2;e.l+=4;var a=n===0?lo([0,0,0,0,t[0]&252,t[1],t[2],t[3]],0):ma(t,0)>>2;return r?a/100:a}function Rh(e,t){t==null&&(t=ne(4));var r=0,n=0,a=e*100;if(e==(e|0)&&e>=-(1<<29)&&e<1<<29?n=1:a==(a|0)&&a>=-(1<<29)&&a<1<<29&&(n=1,r=1),n)t.write_shift(-4,((r?a:e)<<2)+(r+2));else throw new Error("unsupported RkNumber "+e)}function Oh(e){var t={s:{},e:{}};return t.s.r=e.read_shift(4),t.e.r=e.read_shift(4),t.s.c=e.read_shift(4),t.e.c=e.read_shift(4),t}function S_(e,t){return t||(t=ne(16)),t.write_shift(4,e.s.r),t.write_shift(4,e.e.r),t.write_shift(4,e.s.c),t.write_shift(4,e.e.c),t}var va=Oh,Ya=S_;function qt(e){if(e.length-e.l<8)throw"XLS Xnum Buffer underflow";return e.read_shift(8,"f")}function wa(e,t){return(t||ne(8)).write_shift(8,e,"f")}function T_(e){var t={},r=e.read_shift(1),n=r>>>1,a=e.read_shift(1),i=e.read_shift(2,"i"),s=e.read_shift(1),o=e.read_shift(1),c=e.read_shift(1);switch(e.l++,n){case 0:t.auto=1;break;case 1:t.index=a;var f=_a[a];f&&(t.rgb=Zi(f));break;case 2:t.rgb=Zi([s,o,c]);break;case 3:t.theme=a;break}return i!=0&&(t.tint=i>0?i/32767:i/32768),t}function fo(e,t){if(t||(t=ne(8)),!e||e.auto)return t.write_shift(4,0),t.write_shift(4,0),t;e.index!=null?(t.write_shift(1,2),t.write_shift(1,e.index)):e.theme!=null?(t.write_shift(1,6),t.write_shift(1,e.theme)):(t.write_shift(1,5),t.write_shift(1,0));var r=e.tint||0;if(r>0?r*=32767:r<0&&(r*=32768),t.write_shift(2,r),!e.rgb||e.theme!=null)t.write_shift(2,0),t.write_shift(1,0),t.write_shift(1,0);else{var n=e.rgb||"FFFFFF";typeof n=="number"&&(n=("000000"+n.toString(16)).slice(-6)),t.write_shift(1,parseInt(n.slice(0,2),16)),t.write_shift(1,parseInt(n.slice(2,4),16)),t.write_shift(1,parseInt(n.slice(4,6),16)),t.write_shift(1,255)}return t}function F_(e){var t=e.read_shift(1);e.l++;var r={fBold:t&1,fItalic:t&2,fUnderline:t&4,fStrikeout:t&8,fOutline:t&16,fShadow:t&32,fCondense:t&64,fExtend:t&128};return r}function C_(e,t){t||(t=ne(2));var r=(e.italic?2:0)|(e.strike?8:0)|(e.outline?16:0)|(e.shadow?32:0)|(e.condense?64:0)|(e.extend?128:0);return t.write_shift(1,r),t.write_shift(1,0),t}function Bh(e,t){var r={2:"BITMAP",3:"METAFILEPICT",8:"DIB",14:"ENHMETAFILE"},n=e.read_shift(4);switch(n){case 0:return"";case 4294967295:case 4294967294:return r[e.read_shift(4)]||""}if(n>400)throw new Error("Unsupported Clipboard: "+n.toString(16));return e.l-=4,e.read_shift(0,t==1?"lpstr":"lpwstr")}function A_(e){return Bh(e,1)}function D_(e){return Bh(e,2)}var ql=2,dr=3,uo=11,Nh=12,ho=19,mo=64,R_=65,O_=71,B_=4108,N_=4126,Vt=80,Ph=81,P_=[Vt,Ph],Jl={1:{n:"CodePage",t:ql},2:{n:"Category",t:Vt},3:{n:"PresentationFormat",t:Vt},4:{n:"ByteCount",t:dr},5:{n:"LineCount",t:dr},6:{n:"ParagraphCount",t:dr},7:{n:"SlideCount",t:dr},8:{n:"NoteCount",t:dr},9:{n:"HiddenCount",t:dr},10:{n:"MultimediaClipCount",t:dr},11:{n:"ScaleCrop",t:uo},12:{n:"HeadingPairs",t:B_},13:{n:"TitlesOfParts",t:N_},14:{n:"Manager",t:Vt},15:{n:"Company",t:Vt},16:{n:"LinksUpToDate",t:uo},17:{n:"CharacterCount",t:dr},19:{n:"SharedDoc",t:uo},22:{n:"HyperlinksChanged",t:uo},23:{n:"AppVersion",t:dr,p:"version"},24:{n:"DigSig",t:R_},26:{n:"ContentType",t:Vt},27:{n:"ContentStatus",t:Vt},28:{n:"Language",t:Vt},29:{n:"Version",t:Vt},255:{},2147483648:{n:"Locale",t:ho},2147483651:{n:"Behavior",t:ho},1919054434:{}},Zl={1:{n:"CodePage",t:ql},2:{n:"Title",t:Vt},3:{n:"Subject",t:Vt},4:{n:"Author",t:Vt},5:{n:"Keywords",t:Vt},6:{n:"Comments",t:Vt},7:{n:"Template",t:Vt},8:{n:"LastAuthor",t:Vt},9:{n:"RevNumber",t:Vt},10:{n:"EditTime",t:mo},11:{n:"LastPrinted",t:mo},12:{n:"CreatedDate",t:mo},13:{n:"ModifiedDate",t:mo},14:{n:"PageCount",t:dr},15:{n:"WordCount",t:dr},16:{n:"CharCount",t:dr},17:{n:"Thumbnail",t:O_},18:{n:"Application",t:Vt},19:{n:"DocSecurity",t:dr},255:{},2147483648:{n:"Locale",t:ho},2147483651:{n:"Behavior",t:ho},1919054434:{}},Ih={1:"US",2:"CA",3:"",7:"RU",20:"EG",30:"GR",31:"NL",32:"BE",33:"FR",34:"ES",36:"HU",39:"IT",41:"CH",43:"AT",44:"GB",45:"DK",46:"SE",47:"NO",48:"PL",49:"DE",52:"MX",55:"BR",61:"AU",64:"NZ",66:"TH",81:"JP",82:"KR",84:"VN",86:"CN",90:"TR",105:"JS",213:"DZ",216:"MA",218:"LY",351:"PT",354:"IS",358:"FI",420:"CZ",886:"TW",961:"LB",962:"JO",963:"SY",964:"IQ",965:"KW",966:"SA",971:"AE",972:"IL",974:"QA",981:"IR",65535:"US"},I_=[null,"solid","mediumGray","darkGray","lightGray","darkHorizontal","darkVertical","darkDown","darkUp","darkGrid","darkTrellis","lightHorizontal","lightVertical","lightDown","lightUp","lightGrid","lightTrellis","gray125","gray0625"];function L_(e){return e.map(function(t){return[t>>16&255,t>>8&255,t&255]})}var M_=L_([0,16777215,16711680,65280,255,16776960,16711935,65535,0,16777215,16711680,65280,255,16776960,16711935,65535,8388608,32768,128,8421376,8388736,32896,12632256,8421504,10066431,10040166,16777164,13434879,6684774,16744576,26316,13421823,128,16711935,16776960,65535,8388736,8388608,32896,255,52479,13434879,13434828,16777113,10079487,16751052,13408767,16764057,3368703,3394764,10079232,16763904,16750848,16737792,6710937,9868950,13158,3381606,13056,3355392,10040064,10040166,3355545,3355443,16777215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_a=st(M_),Fn={0:"#NULL!",7:"#DIV/0!",15:"#VALUE!",23:"#REF!",29:"#NAME?",36:"#NUM!",42:"#N/A",43:"#GETTING_DATA",255:"#WTF?"},Lh={"#NULL!":0,"#DIV/0!":7,"#VALUE!":15,"#REF!":23,"#NAME?":29,"#NUM!":36,"#N/A":42,"#GETTING_DATA":43,"#WTF?":255},Ql={"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":"workbooks","application/vnd.ms-excel.sheet.macroEnabled.main+xml":"workbooks","application/vnd.ms-excel.sheet.binary.macroEnabled.main":"workbooks","application/vnd.ms-excel.addin.macroEnabled.main+xml":"workbooks","application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":"workbooks","application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":"sheets","application/vnd.ms-excel.worksheet":"sheets","application/vnd.ms-excel.binIndexWs":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":"charts","application/vnd.ms-excel.chartsheet":"charts","application/vnd.ms-excel.macrosheet+xml":"macros","application/vnd.ms-excel.macrosheet":"macros","application/vnd.ms-excel.intlmacrosheet":"TODO","application/vnd.ms-excel.binIndexMs":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":"dialogs","application/vnd.ms-excel.dialogsheet":"dialogs","application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml":"strs","application/vnd.ms-excel.sharedStrings":"strs","application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":"styles","application/vnd.ms-excel.styles":"styles","application/vnd.openxmlformats-package.core-properties+xml":"coreprops","application/vnd.openxmlformats-officedocument.custom-properties+xml":"custprops","application/vnd.openxmlformats-officedocument.extended-properties+xml":"extprops","application/vnd.openxmlformats-officedocument.customXmlProperties+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":"comments","application/vnd.ms-excel.comments":"comments","application/vnd.ms-excel.threadedcomments+xml":"threadedcomments","application/vnd.ms-excel.person+xml":"people","application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml":"metadata","application/vnd.ms-excel.sheetMetadata":"metadata","application/vnd.ms-excel.pivotTable":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.chart+xml":"TODO","application/vnd.ms-office.chartcolorstyle+xml":"TODO","application/vnd.ms-office.chartstyle+xml":"TODO","application/vnd.ms-office.chartex+xml":"TODO","application/vnd.ms-excel.calcChain":"calcchains","application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml":"calcchains","application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings":"TODO","application/vnd.ms-office.activeX":"TODO","application/vnd.ms-office.activeX+xml":"TODO","application/vnd.ms-excel.attachedToolbars":"TODO","application/vnd.ms-excel.connections":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":"TODO","application/vnd.ms-excel.externalLink":"links","application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml":"links","application/vnd.ms-excel.pivotCacheDefinition":"TODO","application/vnd.ms-excel.pivotCacheRecords":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml":"TODO","application/vnd.ms-excel.queryTable":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml":"TODO","application/vnd.ms-excel.userNames":"TODO","application/vnd.ms-excel.revisionHeaders":"TODO","application/vnd.ms-excel.revisionLog":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml":"TODO","application/vnd.ms-excel.tableSingleCells":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml":"TODO","application/vnd.ms-excel.slicer":"TODO","application/vnd.ms-excel.slicerCache":"TODO","application/vnd.ms-excel.slicer+xml":"TODO","application/vnd.ms-excel.slicerCache+xml":"TODO","application/vnd.ms-excel.wsSortMap":"TODO","application/vnd.ms-excel.table":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":"TODO","application/vnd.openxmlformats-officedocument.theme+xml":"themes","application/vnd.openxmlformats-officedocument.themeOverride+xml":"TODO","application/vnd.ms-excel.Timeline+xml":"TODO","application/vnd.ms-excel.TimelineCache+xml":"TODO","application/vnd.ms-office.vbaProject":"vba","application/vnd.ms-office.vbaProjectSignature":"TODO","application/vnd.ms-office.volatileDependencies":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml":"TODO","application/vnd.ms-excel.controlproperties+xml":"TODO","application/vnd.openxmlformats-officedocument.model+data":"TODO","application/vnd.ms-excel.Survey+xml":"TODO","application/vnd.openxmlformats-officedocument.drawing+xml":"drawings","application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml":"TODO","application/vnd.openxmlformats-officedocument.vmlDrawing":"TODO","application/vnd.openxmlformats-package.relationships+xml":"rels","application/vnd.openxmlformats-officedocument.oleObject":"TODO","image/png":"TODO",sheet:"js"},po={workbooks:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",xlsm:"application/vnd.ms-excel.sheet.macroEnabled.main+xml",xlsb:"application/vnd.ms-excel.sheet.binary.macroEnabled.main",xlam:"application/vnd.ms-excel.addin.macroEnabled.main+xml",xltx:"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"},strs:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",xlsb:"application/vnd.ms-excel.sharedStrings"},comments:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",xlsb:"application/vnd.ms-excel.comments"},sheets:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",xlsb:"application/vnd.ms-excel.worksheet"},charts:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",xlsb:"application/vnd.ms-excel.chartsheet"},dialogs:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",xlsb:"application/vnd.ms-excel.dialogsheet"},macros:{xlsx:"application/vnd.ms-excel.macrosheet+xml",xlsb:"application/vnd.ms-excel.macrosheet"},metadata:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",xlsb:"application/vnd.ms-excel.sheetMetadata"},styles:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",xlsb:"application/vnd.ms-excel.styles"}};function ec(){return{workbooks:[],sheets:[],charts:[],dialogs:[],macros:[],rels:[],strs:[],comments:[],threadedcomments:[],links:[],coreprops:[],extprops:[],custprops:[],themes:[],styles:[],calcchains:[],vba:[],drawings:[],metadata:[],people:[],TODO:[],xmlns:""}}function V_(e){var t=ec();if(!e||!e.match)return t;var r={};if((e.match(Xt)||[]).forEach(function(n){var a=Re(n);switch(a[0].replace(Y2,"<")){case"<?xml":break;case"<Types":t.xmlns=a["xmlns"+(a[0].match(/<(\w+):/)||["",""])[1]];break;case"<Default":r[a.Extension]=a.ContentType;break;case"<Override":t[Ql[a.ContentType]]!==void 0&&t[Ql[a.ContentType]].push(a.PartName);break}}),t.xmlns!==Bt.CT)throw new Error("Unknown Namespace: "+t.xmlns);return t.calcchain=t.calcchains.length>0?t.calcchains[0]:"",t.sst=t.strs.length>0?t.strs[0]:"",t.style=t.styles.length>0?t.styles[0]:"",t.defaults=r,delete t.calcchains,t}function Mh(e,t){var r=U2(Ql),n=[],a;n[n.length]=_t,n[n.length]=pe("Types",null,{xmlns:Bt.CT,"xmlns:xsd":Bt.xsd,"xmlns:xsi":Bt.xsi}),n=n.concat([["xml","application/xml"],["bin","application/vnd.ms-excel.sheet.binary.macroEnabled.main"],["vml","application/vnd.openxmlformats-officedocument.vmlDrawing"],["data","application/vnd.openxmlformats-officedocument.model+data"],["bmp","image/bmp"],["png","image/png"],["gif","image/gif"],["emf","image/x-emf"],["wmf","image/x-wmf"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["tif","image/tiff"],["tiff","image/tiff"],["pdf","application/pdf"],["rels","application/vnd.openxmlformats-package.relationships+xml"]].map(function(c){return pe("Default",null,{Extension:c[0],ContentType:c[1]})}));var i=function(c){e[c]&&e[c].length>0&&(a=e[c][0],n[n.length]=pe("Override",null,{PartName:(a[0]=="/"?"":"/")+a,ContentType:po[c][t.bookType]||po[c].xlsx}))},s=function(c){(e[c]||[]).forEach(function(f){n[n.length]=pe("Override",null,{PartName:(f[0]=="/"?"":"/")+f,ContentType:po[c][t.bookType]||po[c].xlsx})})},o=function(c){(e[c]||[]).forEach(function(f){n[n.length]=pe("Override",null,{PartName:(f[0]=="/"?"":"/")+f,ContentType:r[c][0]})})};return i("workbooks"),s("sheets"),s("charts"),o("themes"),["strs","styles"].forEach(i),["coreprops","extprops","custprops"].forEach(o),o("vba"),o("comments"),o("threadedcomments"),o("drawings"),s("metadata"),o("people"),n.length>2&&(n[n.length]="</Types>",n[1]=n[1].replace("/>",">")),n.join("")}var je={WB:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",SHEET:"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",HLINK:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",VML:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",XPATH:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",XMISS:"http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",XLINK:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",CXML:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",CXMLP:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",CMNT:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",CORE_PROPS:"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",EXT_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",CUST_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",SST:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",STY:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",THEME:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",CHART:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",CHARTEX:"http://schemas.microsoft.com/office/2014/relationships/chartEx",CS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",WS:["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet","http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"],DS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",MS:"http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",IMG:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",DRAW:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",XLMETA:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",TCMNT:"http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",PEOPLE:"http://schemas.microsoft.com/office/2017/10/relationships/person",VBA:"http://schemas.microsoft.com/office/2006/relationships/vbaProject"};function Ki(e){var t=e.lastIndexOf("/");return e.slice(0,t+1)+"_rels/"+e.slice(t+1)+".rels"}function Yi(e,t){var r={"!id":{}};if(!e)return r;t.charAt(0)!=="/"&&(t="/"+t);var n={};return(e.match(Xt)||[]).forEach(function(a){var i=Re(a);if(i[0]==="<Relationship"){var s={};s.Type=i.Type,s.Target=i.Target,s.Id=i.Id,i.TargetMode&&(s.TargetMode=i.TargetMode);var o=i.TargetMode==="External"?i.Target:Ui(i.Target,t);r[o]=s,n[i.Id]=s}}),r["!id"]=n,r}function qa(e){var t=[_t,pe("Relationships",null,{xmlns:Bt.RELS})];return xt(e["!id"]).forEach(function(r){t[t.length]=pe("Relationship",null,e["!id"][r])}),t.length>2&&(t[t.length]="</Relationships>",t[1]=t[1].replace("/>",">")),t.join("")}function et(e,t,r,n,a,i){if(a||(a={}),e["!id"]||(e["!id"]={}),e["!idx"]||(e["!idx"]=1),t<0)for(t=e["!idx"];e["!id"]["rId"+t];++t);if(e["!idx"]=t+1,a.Id="rId"+t,a.Type=n,a.Target=r,i?a.TargetMode=i:[je.HLINK,je.XPATH,je.XMISS].indexOf(a.Type)>-1&&(a.TargetMode="External"),e["!id"][a.Id])throw new Error("Cannot rewrite rId "+t);return e["!id"][a.Id]=a,e[("/"+a.Target).replace("//","/")]=a,t}var U_="application/vnd.oasis.opendocument.spreadsheet";function $_(e,t){for(var r=Vl(e),n,a;n=Hi.exec(r);)switch(n[3]){case"manifest":break;case"file-entry":if(a=Re(n[0],!1),a.path=="/"&&a.type!==U_)throw new Error("This OpenDocument is not a spreadsheet");break;case"encryption-data":case"algorithm":case"start-key-generation":case"key-derivation":throw new Error("Unsupported ODS Encryption");default:if(t&&t.WTF)throw n}}function W_(e){var t=[_t];t.push(`<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">
`),t.push(`  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>
`);for(var r=0;r<e.length;++r)t.push('  <manifest:file-entry manifest:full-path="'+e[r][0]+'" manifest:media-type="'+e[r][1]+`"/>
`);return t.push("</manifest:manifest>"),t.join("")}function Vh(e,t,r){return['  <rdf:Description rdf:about="'+e+`">
`,'    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/'+(r||"odf")+"#"+t+`"/>
`,`  </rdf:Description>
`].join("")}function H_(e,t){return['  <rdf:Description rdf:about="'+e+`">
`,'    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="'+t+`"/>
`,`  </rdf:Description>
`].join("")}function j_(e){var t=[_t];t.push(`<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
`);for(var r=0;r!=e.length;++r)t.push(Vh(e[r][0],e[r][1])),t.push(H_("",e[r][0]));return t.push(Vh("","Document","pkg")),t.push("</rdf:RDF>"),t.join("")}function Uh(){return'<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS '+Js.version+"</meta:generator></office:meta></office:document-meta>"}var Br=[["cp:category","Category"],["cp:contentStatus","ContentStatus"],["cp:keywords","Keywords"],["cp:lastModifiedBy","LastAuthor"],["cp:lastPrinted","LastPrinted"],["cp:revision","RevNumber"],["cp:version","Version"],["dc:creator","Author"],["dc:description","Comments"],["dc:identifier","Identifier"],["dc:language","Language"],["dc:subject","Subject"],["dc:title","Title"],["dcterms:created","CreatedDate","date"],["dcterms:modified","ModifiedDate","date"]],z_=function(){for(var e=new Array(Br.length),t=0;t<Br.length;++t){var r=Br[t],n="(?:"+r[0].slice(0,r[0].indexOf(":"))+":)"+r[0].slice(r[0].indexOf(":")+1);e[t]=new RegExp("<"+n+"[^>]*>([\\s\\S]*?)</"+n+">")}return e}();function $h(e){var t={};e=nt(e);for(var r=0;r<Br.length;++r){var n=Br[r],a=e.match(z_[r]);a!=null&&a.length>0&&(t[n[1]]=Ke(a[1])),n[2]==="date"&&t[n[1]]&&(t[n[1]]=it(t[n[1]]))}return t}function tc(e,t,r,n,a){a[e]!=null||t==null||t===""||(a[e]=t,t=Qe(t),n[n.length]=r?pe(e,t,r):Wt(e,t))}function Wh(e,t){var r=t||{},n=[_t,pe("cp:coreProperties",null,{"xmlns:cp":Bt.CORE_PROPS,"xmlns:dc":Bt.dc,"xmlns:dcterms":Bt.dcterms,"xmlns:dcmitype":Bt.dcmitype,"xmlns:xsi":Bt.xsi})],a={};if(!e&&!r.Props)return n.join("");e&&(e.CreatedDate!=null&&tc("dcterms:created",typeof e.CreatedDate=="string"?e.CreatedDate:Ml(e.CreatedDate,r.WTF),{"xsi:type":"dcterms:W3CDTF"},n,a),e.ModifiedDate!=null&&tc("dcterms:modified",typeof e.ModifiedDate=="string"?e.ModifiedDate:Ml(e.ModifiedDate,r.WTF),{"xsi:type":"dcterms:W3CDTF"},n,a));for(var i=0;i!=Br.length;++i){var s=Br[i],o=r.Props&&r.Props[s[1]]!=null?r.Props[s[1]]:e?e[s[1]]:null;o===!0?o="1":o===!1?o="0":typeof o=="number"&&(o=String(o)),o!=null&&tc(s[0],o,null,n,a)}return n.length>2&&(n[n.length]="</cp:coreProperties>",n[1]=n[1].replace("/>",">")),n.join("")}var ya=[["Application","Application","string"],["AppVersion","AppVersion","string"],["Company","Company","string"],["DocSecurity","DocSecurity","string"],["Manager","Manager","string"],["HyperlinksChanged","HyperlinksChanged","bool"],["SharedDoc","SharedDoc","bool"],["LinksUpToDate","LinksUpToDate","bool"],["ScaleCrop","ScaleCrop","bool"],["HeadingPairs","HeadingPairs","raw"],["TitlesOfParts","TitlesOfParts","raw"]],Hh=["Worksheets","SheetNames","NamedRanges","DefinedNames","Chartsheets","ChartNames"];function jh(e,t,r,n){var a=[];if(typeof e=="string")a=oh(e,n);else for(var i=0;i<e.length;++i)a=a.concat(e[i].map(function(u){return{v:u}}));var s=typeof t=="string"?oh(t,n).map(function(u){return u.v}):t,o=0,c=0;if(s.length>0)for(var f=0;f!==a.length;f+=2){switch(c=+a[f+1].v,a[f].v){case"Worksheets":case"工作表":case"Листы":case"أوراق العمل":case"ワークシート":case"גליונות עבודה":case"Arbeitsblätter":case"Çalışma Sayfaları":case"Feuilles de calcul":case"Fogli di lavoro":case"Folhas de cálculo":case"Planilhas":case"Regneark":case"Hojas de cálculo":case"Werkbladen":r.Worksheets=c,r.SheetNames=s.slice(o,o+c);break;case"Named Ranges":case"Rangos con nombre":case"名前付き一覧":case"Benannte Bereiche":case"Navngivne områder":r.NamedRanges=c,r.DefinedNames=s.slice(o,o+c);break;case"Charts":case"Diagramme":r.Chartsheets=c,r.ChartNames=s.slice(o,o+c);break}o+=c}}function G_(e,t,r){var n={};return t||(t={}),e=nt(e),ya.forEach(function(a){var i=(e.match($i(a[0]))||[])[1];switch(a[2]){case"string":i&&(t[a[1]]=Ke(i));break;case"bool":t[a[1]]=i==="true";break;case"raw":var s=e.match(new RegExp("<"+a[0]+"[^>]*>([\\s\\S]*?)</"+a[0]+">"));s&&s.length>0&&(n[a[1]]=s[1]);break}}),n.HeadingPairs&&n.TitlesOfParts&&jh(n.HeadingPairs,n.TitlesOfParts,t,r),t}function zh(e){var t=[],r=pe;return e||(e={}),e.Application="SheetJS",t[t.length]=_t,t[t.length]=pe("Properties",null,{xmlns:Bt.EXT_PROPS,"xmlns:vt":Bt.vt}),ya.forEach(function(n){if(e[n[1]]!==void 0){var a;switch(n[2]){case"string":a=Qe(String(e[n[1]]));break;case"bool":a=e[n[1]]?"true":"false";break}a!==void 0&&(t[t.length]=r(n[0],a))}}),t[t.length]=r("HeadingPairs",r("vt:vector",r("vt:variant","<vt:lpstr>Worksheets</vt:lpstr>")+r("vt:variant",r("vt:i4",String(e.Worksheets))),{size:2,baseType:"variant"})),t[t.length]=r("TitlesOfParts",r("vt:vector",e.SheetNames.map(function(n){return"<vt:lpstr>"+Qe(n)+"</vt:lpstr>"}).join(""),{size:e.Worksheets,baseType:"lpstr"})),t.length>2&&(t[t.length]="</Properties>",t[1]=t[1].replace("/>",">")),t.join("")}var X_=/<[^>]+>[^<]*/g;function K_(e,t){var r={},n="",a=e.match(X_);if(a)for(var i=0;i!=a.length;++i){var s=a[i],o=Re(s);switch(o[0]){case"<?xml":break;case"<Properties":break;case"<property":n=Ke(o.name);break;case"</property>":n=null;break;default:if(s.indexOf("<vt:")===0){var c=s.split(">"),f=c[0].slice(4),u=c[1];switch(f){case"lpstr":case"bstr":case"lpwstr":r[n]=Ke(u);break;case"bool":r[n]=ot(u);break;case"i1":case"i2":case"i4":case"i8":case"int":case"uint":r[n]=parseInt(u,10);break;case"r4":case"r8":case"decimal":r[n]=parseFloat(u);break;case"filetime":case"date":r[n]=it(u);break;case"cy":case"error":r[n]=Ke(u);break;default:if(f.slice(-1)=="/")break;t.WTF&&typeof console<"u"&&console.warn("Unexpected",s,f,c)}}else if(s.slice(0,2)!=="</"){if(t.WTF)throw new Error(s)}}}return r}function Gh(e){var t=[_t,pe("Properties",null,{xmlns:Bt.CUST_PROPS,"xmlns:vt":Bt.vt})];if(!e)return t.join("");var r=1;return xt(e).forEach(function(a){++r,t[t.length]=pe("property",n_(e[a],!0),{fmtid:"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",pid:r,name:Qe(a)})}),t.length>2&&(t[t.length]="</Properties>",t[1]=t[1].replace("/>",">")),t.join("")}var rc={Title:"Title",Subject:"Subject",Author:"Author",Keywords:"Keywords",Comments:"Description",LastAuthor:"LastAuthor",RevNumber:"Revision",Application:"AppName",LastPrinted:"LastPrinted",CreatedDate:"Created",ModifiedDate:"LastSaved",Category:"Category",Manager:"Manager",Company:"Company",AppVersion:"Version",ContentStatus:"ContentStatus",Identifier:"Identifier",Language:"Language"},nc;function Y_(e,t,r){nc||(nc=no(rc)),t=nc[t]||t,e[t]=r}function q_(e,t){var r=[];return xt(rc).map(function(n){for(var a=0;a<Br.length;++a)if(Br[a][1]==n)return Br[a];for(a=0;a<ya.length;++a)if(ya[a][1]==n)return ya[a];throw n}).forEach(function(n){if(e[n[1]]!=null){var a=t&&t.Props&&t.Props[n[1]]!=null?t.Props[n[1]]:e[n[1]];switch(n[2]){case"date":a=new Date(a).toISOString().replace(/\.\d*Z/,"Z");break}typeof a=="number"?a=String(a):a===!0||a===!1?a=a?"1":"0":a instanceof Date&&(a=new Date(a).toISOString().replace(/\.\d*Z/,"")),r.push(Wt(rc[n[1]]||n[1],a))}}),pe("DocumentProperties",r.join(""),{xmlns:Er.o})}function J_(e,t){var r=["Worksheets","SheetNames"],n="CustomDocumentProperties",a=[];return e&&xt(e).forEach(function(i){if(Object.prototype.hasOwnProperty.call(e,i)){for(var s=0;s<Br.length;++s)if(i==Br[s][1])return;for(s=0;s<ya.length;++s)if(i==ya[s][1])return;for(s=0;s<r.length;++s)if(i==r[s])return;var o=e[i],c="string";typeof o=="number"?(c="float",o=String(o)):o===!0||o===!1?(c="boolean",o=o?"1":"0"):o=String(o),a.push(pe(th(i),o,{"dt:dt":c}))}}),t&&xt(t).forEach(function(i){if(Object.prototype.hasOwnProperty.call(t,i)&&!(e&&Object.prototype.hasOwnProperty.call(e,i))){var s=t[i],o="string";typeof s=="number"?(o="float",s=String(s)):s===!0||s===!1?(o="boolean",s=s?"1":"0"):s instanceof Date?(o="dateTime.tz",s=s.toISOString()):s=String(s),a.push(pe(th(i),s,{"dt:dt":o}))}}),"<"+n+' xmlns="'+Er.o+'">'+a.join("")+"</"+n+">"}function ac(e){var t=e.read_shift(4),r=e.read_shift(4);return new Date((r/1e7*Math.pow(2,32)+t/1e7-11644473600)*1e3).toISOString().replace(/\.000/,"")}function Z_(e){var t=typeof e=="string"?new Date(Date.parse(e)):e,r=t.getTime()/1e3+11644473600,n=r%Math.pow(2,32),a=(r-n)/Math.pow(2,32);n*=1e7,a*=1e7;var i=n/Math.pow(2,32)|0;i>0&&(n=n%Math.pow(2,32),a+=i);var s=ne(8);return s.write_shift(4,n),s.write_shift(4,a),s}function Xh(e,t,r){var n=e.l,a=e.read_shift(0,"lpstr-cp");if(r)for(;e.l-n&3;)++e.l;return a}function Kh(e,t,r){var n=e.read_shift(0,"lpwstr");return r&&(e.l+=4-(n.length+1&3)&3),n}function Yh(e,t,r){return t===31?Kh(e):Xh(e,t,r)}function ic(e,t,r){return Yh(e,t,r===!1?0:4)}function Q_(e,t){if(!t)throw new Error("VtUnalignedString must have positive length");return Yh(e,t,0)}function ey(e){for(var t=e.read_shift(4),r=[],n=0;n!=t;++n){var a=e.l;r[n]=e.read_shift(0,"lpwstr").replace(ir,""),e.l-a&2&&(e.l+=2)}return r}function ty(e){for(var t=e.read_shift(4),r=[],n=0;n!=t;++n)r[n]=e.read_shift(0,"lpstr-cp").replace(ir,"");return r}function ry(e){var t=e.l,r=go(e,Ph);e[e.l]==0&&e[e.l+1]==0&&e.l-t&2&&(e.l+=2);var n=go(e,dr);return[r,n]}function ny(e){for(var t=e.read_shift(4),r=[],n=0;n<t/2;++n)r.push(ry(e));return r}function qh(e,t){for(var r=e.read_shift(4),n={},a=0;a!=r;++a){var i=e.read_shift(4),s=e.read_shift(4);n[i]=e.read_shift(s,t===1200?"utf16le":"utf8").replace(ir,"").replace(Ii,"!"),t===1200&&s%2&&(e.l+=2)}return e.l&3&&(e.l=e.l>>2+1<<2),n}function Jh(e){var t=e.read_shift(4),r=e.slice(e.l,e.l+t);return e.l+=t,(t&3)>0&&(e.l+=4-(t&3)&3),r}function ay(e){var t={};return t.Size=e.read_shift(4),e.l+=t.Size+3-(t.Size-1)%4,t}function go(e,t,r){var n=e.read_shift(2),a,i=r||{};if(e.l+=2,t!==Nh&&n!==t&&P_.indexOf(t)===-1&&!((t&65534)==4126&&(n&65534)==4126))throw new Error("Expected type "+t+" saw "+n);switch(t===Nh?n:t){case 2:return a=e.read_shift(2,"i"),i.raw||(e.l+=2),a;case 3:return a=e.read_shift(4,"i"),a;case 11:return e.read_shift(4)!==0;case 19:return a=e.read_shift(4),a;case 30:return Xh(e,n,4).replace(ir,"");case 31:return Kh(e);case 64:return ac(e);case 65:return Jh(e);case 71:return ay(e);case 80:return ic(e,n,!i.raw).replace(ir,"");case 81:return Q_(e,n).replace(ir,"");case 4108:return ny(e);case 4126:case 4127:return n==4127?ey(e):ty(e);default:throw new Error("TypedPropertyValue unrecognized type "+t+" "+n)}}function Zh(e,t){var r=ne(4),n=ne(4);switch(r.write_shift(4,e==80?31:e),e){case 3:n.write_shift(-4,t);break;case 5:n=ne(8),n.write_shift(8,t,"f");break;case 11:n.write_shift(4,t?1:0);break;case 64:n=Z_(t);break;case 31:case 80:for(n=ne(4+2*(t.length+1)+(t.length%2?0:2)),n.write_shift(4,t.length+1),n.write_shift(0,t,"dbcs");n.l!=n.length;)n.write_shift(1,0);break;default:throw new Error("TypedPropertyValue unrecognized type "+e+" "+t)}return Lt([r,n])}function Qh(e,t){var r=e.l,n=e.read_shift(4),a=e.read_shift(4),i=[],s=0,o=0,c=-1,f={};for(s=0;s!=a;++s){var u=e.read_shift(4),h=e.read_shift(4);i[s]=[u,h+r]}i.sort(function(k,w){return k[1]-w[1]});var d={};for(s=0;s!=a;++s){if(e.l!==i[s][1]){var p=!0;if(s>0&&t)switch(t[i[s-1][0]].t){case 2:e.l+2===i[s][1]&&(e.l+=2,p=!1);break;case 80:e.l<=i[s][1]&&(e.l=i[s][1],p=!1);break;case 4108:e.l<=i[s][1]&&(e.l=i[s][1],p=!1);break}if((!t||s==0)&&e.l<=i[s][1]&&(p=!1,e.l=i[s][1]),p)throw new Error("Read Error: Expected address "+i[s][1]+" at "+e.l+" :"+s)}if(t){var g=t[i[s][0]];if(d[g.n]=go(e,g.t,{raw:!0}),g.p==="version"&&(d[g.n]=String(d[g.n]>>16)+"."+("0000"+String(d[g.n]&65535)).slice(-4)),g.n=="CodePage")switch(d[g.n]){case 0:d[g.n]=1252;case 874:case 932:case 936:case 949:case 950:case 1250:case 1251:case 1253:case 1254:case 1255:case 1256:case 1257:case 1258:case 1e4:case 1200:case 1201:case 1252:case 65e3:case-536:case 65001:case-535:Wr(o=d[g.n]>>>0&65535);break;default:throw new Error("Unsupported CodePage: "+d[g.n])}}else if(i[s][0]===1){if(o=d.CodePage=go(e,ql),Wr(o),c!==-1){var m=e.l;e.l=i[c][1],f=qh(e,o),e.l=m}}else if(i[s][0]===0){if(o===0){c=s,e.l=i[s+1][1];continue}f=qh(e,o)}else{var x=f[i[s][0]],v;switch(e[e.l]){case 65:e.l+=4,v=Jh(e);break;case 30:e.l+=4,v=ic(e,e[e.l-4]).replace(/\u0000+$/,"");break;case 31:e.l+=4,v=ic(e,e[e.l-4]).replace(/\u0000+$/,"");break;case 3:e.l+=4,v=e.read_shift(4,"i");break;case 19:e.l+=4,v=e.read_shift(4);break;case 5:e.l+=4,v=e.read_shift(8,"f");break;case 11:e.l+=4,v=kt(e,4);break;case 64:e.l+=4,v=it(ac(e));break;default:throw new Error("unparsed value: "+e[e.l])}d[x]=v}}return e.l=r+n,d}var ed=["CodePage","Thumbnail","_PID_LINKBASE","_PID_HLINKS","SystemIdentifier","FMTID"];function iy(e){switch(typeof e){case"boolean":return 11;case"number":return(e|0)==e?3:5;case"string":return 31;case"object":if(e instanceof Date)return 64;break}return-1}function td(e,t,r){var n=ne(8),a=[],i=[],s=8,o=0,c=ne(8),f=ne(8);if(c.write_shift(4,2),c.write_shift(4,1200),f.write_shift(4,1),i.push(c),a.push(f),s+=8+c.length,!t){f=ne(8),f.write_shift(4,0),a.unshift(f);var u=[ne(4)];for(u[0].write_shift(4,e.length),o=0;o<e.length;++o){var h=e[o][0];for(c=ne(4+4+2*(h.length+1)+(h.length%2?0:2)),c.write_shift(4,o+2),c.write_shift(4,h.length+1),c.write_shift(0,h,"dbcs");c.l!=c.length;)c.write_shift(1,0);u.push(c)}c=Lt(u),i.unshift(c),s+=8+c.length}for(o=0;o<e.length;++o)if(!(t&&!t[e[o][0]])&&!(ed.indexOf(e[o][0])>-1||Hh.indexOf(e[o][0])>-1)&&e[o][1]!=null){var d=e[o][1],p=0;if(t){p=+t[e[o][0]];var g=r[p];if(g.p=="version"&&typeof d=="string"){var m=d.split(".");d=(+m[0]<<16)+(+m[1]||0)}c=Zh(g.t,d)}else{var x=iy(d);x==-1&&(x=31,d=String(d)),c=Zh(x,d)}i.push(c),f=ne(8),f.write_shift(4,t?p:2+o),a.push(f),s+=8+c.length}var v=8*(i.length+1);for(o=0;o<i.length;++o)a[o].write_shift(4,v),v+=i[o].length;return n.write_shift(4,s),n.write_shift(4,i.length),Lt([n].concat(a).concat(i))}function rd(e,t,r){var n=e.content;if(!n)return{};Ht(n,0);var a,i,s,o,c=0;n.chk("feff","Byte Order: "),n.read_shift(2);var f=n.read_shift(4),u=n.read_shift(16);if(u!==Ee.utils.consts.HEADER_CLSID&&u!==r)throw new Error("Bad PropertySet CLSID "+u);if(a=n.read_shift(4),a!==1&&a!==2)throw new Error("Unrecognized #Sets: "+a);if(i=n.read_shift(16),o=n.read_shift(4),a===1&&o!==n.l)throw new Error("Length mismatch: "+o+" !== "+n.l);a===2&&(s=n.read_shift(16),c=n.read_shift(4));var h=Qh(n,t),d={SystemIdentifier:f};for(var p in h)d[p]=h[p];if(d.FMTID=i,a===1)return d;if(c-n.l==2&&(n.l+=2),n.l!==c)throw new Error("Length mismatch 2: "+n.l+" !== "+c);var g;try{g=Qh(n,null)}catch{}for(p in g)d[p]=g[p];return d.FMTID=[i,s],d}function nd(e,t,r,n,a,i){var s=ne(a?68:48),o=[s];s.write_shift(2,65534),s.write_shift(2,0),s.write_shift(4,842412599),s.write_shift(16,Ee.utils.consts.HEADER_CLSID,"hex"),s.write_shift(4,a?2:1),s.write_shift(16,t,"hex"),s.write_shift(4,a?68:48);var c=td(e,r,n);if(o.push(c),a){var f=td(a,null,null);s.write_shift(16,i,"hex"),s.write_shift(4,68+c.length),o.push(f)}return Lt(o)}function qn(e,t){return e.read_shift(t),null}function sy(e,t){t||(t=ne(e));for(var r=0;r<e;++r)t.write_shift(1,0);return t}function oy(e,t,r){for(var n=[],a=e.l+t;e.l<a;)n.push(r(e,a-e.l));if(a!==e.l)throw new Error("Slurp error");return n}function kt(e,t){return e.read_shift(t)===1}function or(e,t){return t||(t=ne(2)),t.write_shift(2,+!!e),t}function Ft(e){return e.read_shift(2,"u")}function Nr(e,t){return t||(t=ne(2)),t.write_shift(2,e),t}function ad(e,t){return oy(e,t,Ft)}function ly(e){var t=e.read_shift(1),r=e.read_shift(1);return r===1?t:t===1}function id(e,t,r){return r||(r=ne(2)),r.write_shift(1,t=="e"?+e:+!!e),r.write_shift(1,t=="e"?1:0),r}function qi(e,t,r){var n=e.read_shift(r&&r.biff>=12?2:1),a="sbcs-cont";if(r&&r.biff>=8,!r||r.biff==8){var i=e.read_shift(1);i&&(a="dbcs-cont")}else r.biff==12&&(a="wstr");r.biff>=2&&r.biff<=5&&(a="cpstr");var s=n?e.read_shift(n,a):"";return s}function cy(e){var t=e.read_shift(2),r=e.read_shift(1),n=r&4,a=r&8,i=1+(r&1),s=0,o,c={};a&&(s=e.read_shift(2)),n&&(o=e.read_shift(4));var f=i==2?"dbcs-cont":"sbcs-cont",u=t===0?"":e.read_shift(t,f);return a&&(e.l+=4*s),n&&(e.l+=o),c.t=u,a||(c.raw="<t>"+c.t+"</t>",c.r=c.t),c}function fy(e){var t=e.t||"",r=ne(3+0);r.write_shift(2,t.length),r.write_shift(1,1);var n=ne(2*t.length);n.write_shift(2*t.length,t,"utf16le");var a=[r,n];return Lt(a)}function ka(e,t,r){var n;if(r){if(r.biff>=2&&r.biff<=5)return e.read_shift(t,"cpstr");if(r.biff>=12)return e.read_shift(t,"dbcs-cont")}var a=e.read_shift(1);return a===0?n=e.read_shift(t,"sbcs-cont"):n=e.read_shift(t,"dbcs-cont"),n}function Ji(e,t,r){var n=e.read_shift(r&&r.biff==2?1:2);return n===0?(e.l++,""):ka(e,n,r)}function Ea(e,t,r){if(r.biff>5)return Ji(e,t,r);var n=e.read_shift(1);return n===0?(e.l++,""):e.read_shift(n,r.biff<=4||!e.lens?"cpstr":"sbcs-cont")}function sd(e,t,r){return r||(r=ne(3+2*e.length)),r.write_shift(2,e.length),r.write_shift(1,1),r.write_shift(31,e,"utf16le"),r}function uy(e){var t=e.read_shift(1);e.l++;var r=e.read_shift(2);return e.l+=2,[t,r]}function hy(e){var t=e.read_shift(4),r=e.l,n=!1;t>24&&(e.l+=t-24,e.read_shift(16)==="795881f43b1d7f48af2c825dc4852763"&&(n=!0),e.l=r);var a=e.read_shift((n?t-24:t)>>1,"utf16le").replace(ir,"");return n&&(e.l+=24),a}function dy(e){for(var t=e.read_shift(2),r="";t-- >0;)r+="../";var n=e.read_shift(0,"lpstr-ansi");if(e.l+=2,e.read_shift(2)!=57005)throw new Error("Bad FileMoniker");var a=e.read_shift(4);if(a===0)return r+n.replace(/\\/g,"/");var i=e.read_shift(4);if(e.read_shift(2)!=3)throw new Error("Bad FileMoniker");var s=e.read_shift(i>>1,"utf16le").replace(ir,"");return r+s}function my(e,t){var r=e.read_shift(16);switch(r){case"e0c9ea79f9bace118c8200aa004ba90b":return hy(e);case"0303000000000000c000000000000046":return dy(e);default:throw new Error("Unsupported Moniker "+r)}}function xo(e){var t=e.read_shift(4),r=t>0?e.read_shift(t,"utf16le").replace(ir,""):"";return r}function od(e,t){t||(t=ne(6+e.length*2)),t.write_shift(4,1+e.length);for(var r=0;r<e.length;++r)t.write_shift(2,e.charCodeAt(r));return t.write_shift(2,0),t}function py(e,t){var r=e.l+t,n=e.read_shift(4);if(n!==2)throw new Error("Unrecognized streamVersion: "+n);var a=e.read_shift(2);e.l+=2;var i,s,o,c,f="",u,h;a&16&&(i=xo(e,r-e.l)),a&128&&(s=xo(e,r-e.l)),(a&257)===257&&(o=xo(e,r-e.l)),(a&257)===1&&(c=my(e,r-e.l)),a&8&&(f=xo(e,r-e.l)),a&32&&(u=e.read_shift(16)),a&64&&(h=ac(e)),e.l=r;var d=s||o||c||"";d&&f&&(d+="#"+f),d||(d="#"+f),a&2&&d.charAt(0)=="/"&&d.charAt(1)!="/"&&(d="file://"+d);var p={Target:d};return u&&(p.guid=u),h&&(p.time=h),i&&(p.Tooltip=i),p}function gy(e){var t=ne(512),r=0,n=e.Target;n.slice(0,7)=="file://"&&(n=n.slice(7));var a=n.indexOf("#"),i=a>-1?31:23;switch(n.charAt(0)){case"#":i=28;break;case".":i&=-3;break}t.write_shift(4,2),t.write_shift(4,i);var s=[8,6815827,6619237,4849780,83];for(r=0;r<s.length;++r)t.write_shift(4,s[r]);if(i==28)n=n.slice(1),od(n,t);else if(i&2){for(s="e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" "),r=0;r<s.length;++r)t.write_shift(1,parseInt(s[r],16));var o=a>-1?n.slice(0,a):n;for(t.write_shift(4,2*(o.length+1)),r=0;r<o.length;++r)t.write_shift(2,o.charCodeAt(r));t.write_shift(2,0),i&8&&od(a>-1?n.slice(a+1):"",t)}else{for(s="03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" "),r=0;r<s.length;++r)t.write_shift(1,parseInt(s[r],16));for(var c=0;n.slice(c*3,c*3+3)=="../"||n.slice(c*3,c*3+3)=="..\\";)++c;for(t.write_shift(2,c),t.write_shift(4,n.length-3*c+1),r=0;r<n.length-3*c;++r)t.write_shift(1,n.charCodeAt(r+3*c)&255);for(t.write_shift(1,0),t.write_shift(2,65535),t.write_shift(2,57005),r=0;r<6;++r)t.write_shift(4,0)}return t.slice(0,t.l)}function ld(e){var t=e.read_shift(1),r=e.read_shift(1),n=e.read_shift(1),a=e.read_shift(1);return[t,r,n,a]}function cd(e,t){var r=ld(e);return r[3]=0,r}function on(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2);return{r:t,c:r,ixfe:n}}function ba(e,t,r,n){return n||(n=ne(6)),n.write_shift(2,e),n.write_shift(2,t),n.write_shift(2,r||0),n}function xy(e){var t=e.read_shift(2),r=e.read_shift(2);return e.l+=8,{type:t,flags:r}}function vy(e,t,r){return t===0?"":Ea(e,t,r)}function wy(e,t,r){var n=r.biff>8?4:2,a=e.read_shift(n),i=e.read_shift(n,"i"),s=e.read_shift(n,"i");return[a,i,s]}function fd(e){var t=e.read_shift(2),r=Yl(e);return[t,r]}function _y(e,t,r){e.l+=4,t-=4;var n=e.l+t,a=qi(e,t,r),i=e.read_shift(2);if(n-=e.l,i!==n)throw new Error("Malformed AddinUdf: padding = "+n+" != "+i);return e.l+=i,a}function vo(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2),a=e.read_shift(2);return{s:{c:n,r:t},e:{c:a,r}}}function ud(e,t){return t||(t=ne(8)),t.write_shift(2,e.s.r),t.write_shift(2,e.e.r),t.write_shift(2,e.s.c),t.write_shift(2,e.e.c),t}function hd(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(1),a=e.read_shift(1);return{s:{c:n,r:t},e:{c:a,r}}}var yy=hd;function dd(e){e.l+=4;var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2);return e.l+=12,[r,t,n]}function ky(e){var t={};return e.l+=4,e.l+=16,t.fSharedNote=e.read_shift(2),e.l+=4,t}function Ey(e){var t={};return e.l+=4,e.cf=e.read_shift(2),t}function Jt(e){e.l+=2,e.l+=e.read_shift(2)}var by={0:Jt,4:Jt,5:Jt,6:Jt,7:Ey,8:Jt,9:Jt,10:Jt,11:Jt,12:Jt,13:ky,14:Jt,15:Jt,16:Jt,17:Jt,18:Jt,19:Jt,20:Jt,21:dd};function Sy(e,t){for(var r=e.l+t,n=[];e.l<r;){var a=e.read_shift(2);e.l-=2;try{n.push(by[a](e,r-e.l))}catch{return e.l=r,n}}return e.l!=r&&(e.l=r),n}function wo(e,t){var r={BIFFVer:0,dt:0};switch(r.BIFFVer=e.read_shift(2),t-=2,t>=2&&(r.dt=e.read_shift(2),e.l-=2),r.BIFFVer){case 1536:case 1280:case 1024:case 768:case 512:case 2:case 7:break;default:if(t>6)throw new Error("Unexpected BIFF Ver "+r.BIFFVer)}return e.read_shift(t),r}function sc(e,t,r){var n=1536,a=16;switch(r.bookType){case"biff8":break;case"biff5":n=1280,a=8;break;case"biff4":n=4,a=6;break;case"biff3":n=3,a=6;break;case"biff2":n=2,a=4;break;case"xla":break;default:throw new Error("unsupported BIFF version")}var i=ne(a);return i.write_shift(2,n),i.write_shift(2,t),a>4&&i.write_shift(2,29282),a>6&&i.write_shift(2,1997),a>8&&(i.write_shift(2,49161),i.write_shift(2,1),i.write_shift(2,1798),i.write_shift(2,0)),i}function Ty(e,t){return t===0||e.read_shift(2),1200}function Fy(e,t,r){if(r.enc)return e.l+=t,"";var n=e.l,a=Ea(e,0,r);return e.read_shift(t+n-e.l),a}function Cy(e,t){var r=!t||t.biff==8,n=ne(r?112:54);for(n.write_shift(t.biff==8?2:1,7),r&&n.write_shift(1,0),n.write_shift(4,859007059),n.write_shift(4,5458548|(r?0:536870912));n.l<n.length;)n.write_shift(1,r?0:32);return n}function Ay(e,t,r){var n=r&&r.biff==8||t==2?e.read_shift(2):(e.l+=t,0);return{fDialog:n&16,fBelow:n&64,fRight:n&128}}function Dy(e,t,r){var n=e.read_shift(4),a=e.read_shift(1)&3,i=e.read_shift(1);switch(i){case 0:i="Worksheet";break;case 1:i="Macrosheet";break;case 2:i="Chartsheet";break;case 6:i="VBAModule";break}var s=qi(e,0,r);return s.length===0&&(s="Sheet1"),{pos:n,hs:a,dt:i,name:s}}function Ry(e,t){var r=!t||t.biff>=8?2:1,n=ne(8+r*e.name.length);n.write_shift(4,e.pos),n.write_shift(1,e.hs||0),n.write_shift(1,e.dt),n.write_shift(1,e.name.length),t.biff>=8&&n.write_shift(1,1),n.write_shift(r*e.name.length,e.name,t.biff<8?"sbcs":"utf16le");var a=n.slice(0,n.l);return a.l=n.l,a}function Oy(e,t){for(var r=e.l+t,n=e.read_shift(4),a=e.read_shift(4),i=[],s=0;s!=a&&e.l<r;++s)i.push(cy(e));return i.Count=n,i.Unique=a,i}function By(e,t){var r=ne(8);r.write_shift(4,e.Count),r.write_shift(4,e.Unique);for(var n=[],a=0;a<e.length;++a)n[a]=fy(e[a]);var i=Lt([r].concat(n));return i.parts=[r.length].concat(n.map(function(s){return s.length})),i}function Ny(e,t){var r={};return r.dsst=e.read_shift(2),e.l+=t-2,r}function Py(e){var t={};t.r=e.read_shift(2),t.c=e.read_shift(2),t.cnt=e.read_shift(2)-t.c;var r=e.read_shift(2);e.l+=4;var n=e.read_shift(1);return e.l+=3,n&7&&(t.level=n&7),n&32&&(t.hidden=!0),n&64&&(t.hpt=r/20),t}function Iy(e){var t=xy(e);if(t.type!=2211)throw new Error("Invalid Future Record "+t.type);var r=e.read_shift(4);return r!==0}function Ly(e){return e.read_shift(2),e.read_shift(4)}function md(e,t,r){var n=0;r&&r.biff==2||(n=e.read_shift(2));var a=e.read_shift(2);r&&r.biff==2&&(n=1-(a>>15),a&=32767);var i={Unsynced:n&1,DyZero:(n&2)>>1,ExAsc:(n&4)>>2,ExDsc:(n&8)>>3};return[i,a]}function My(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2),s=e.read_shift(2),o=e.read_shift(2),c=e.read_shift(2),f=e.read_shift(2);return{Pos:[t,r],Dim:[n,a],Flags:i,CurTab:s,FirstTab:o,Selected:c,TabRatio:f}}function Vy(){var e=ne(18);return e.write_shift(2,0),e.write_shift(2,0),e.write_shift(2,29280),e.write_shift(2,17600),e.write_shift(2,56),e.write_shift(2,0),e.write_shift(2,0),e.write_shift(2,1),e.write_shift(2,500),e}function Uy(e,t,r){if(r&&r.biff>=2&&r.biff<5)return{};var n=e.read_shift(2);return{RTL:n&64}}function $y(e){var t=ne(18),r=1718;return e&&e.RTL&&(r|=64),t.write_shift(2,r),t.write_shift(4,0),t.write_shift(4,64),t.write_shift(4,0),t.write_shift(4,0),t}function Wy(){}function Hy(e,t,r){var n={dyHeight:e.read_shift(2),fl:e.read_shift(2)};switch(r&&r.biff||8){case 2:break;case 3:case 4:e.l+=2;break;default:e.l+=10;break}return n.name=qi(e,0,r),n}function jy(e,t){var r=e.name||"Arial",n=t&&t.biff==5,a=n?15+r.length:16+2*r.length,i=ne(a);return i.write_shift(2,(e.sz||12)*20),i.write_shift(4,0),i.write_shift(2,400),i.write_shift(4,0),i.write_shift(2,0),i.write_shift(1,r.length),n||i.write_shift(1,1),i.write_shift((n?1:2)*r.length,r,n?"sbcs":"utf16le"),i}function zy(e){var t=on(e);return t.isst=e.read_shift(4),t}function Gy(e,t,r,n){var a=ne(10);return ba(e,t,n,a),a.write_shift(4,r),a}function Xy(e,t,r){r.biffguess&&r.biff==2&&(r.biff=5);var n=e.l+t,a=on(e);r.biff==2&&e.l++;var i=Ji(e,n-e.l,r);return a.val=i,a}function Ky(e,t,r,n,a){var i=!a||a.biff==8,s=ne(6+2+ +i+(1+i)*r.length);return ba(e,t,n,s),s.write_shift(2,r.length),i&&s.write_shift(1,1),s.write_shift((1+i)*r.length,r,i?"utf16le":"sbcs"),s}function Yy(e,t,r){var n=e.read_shift(2),a=Ea(e,0,r);return[n,a]}function qy(e,t,r,n){var a=r&&r.biff==5;n||(n=ne(a?3+t.length:5+2*t.length)),n.write_shift(2,e),n.write_shift(a?1:2,t.length),a||n.write_shift(1,1),n.write_shift((a?1:2)*t.length,t,a?"sbcs":"utf16le");var i=n.length>n.l?n.slice(0,n.l):n;return i.l==null&&(i.l=i.length),i}var Jy=Ea;function pd(e,t,r){var n=e.l+t,a=r.biff==8||!r.biff?4:2,i=e.read_shift(a),s=e.read_shift(a),o=e.read_shift(2),c=e.read_shift(2);return e.l=n,{s:{r:i,c:o},e:{r:s,c}}}function Zy(e,t){var r=t.biff==8||!t.biff?4:2,n=ne(2*r+6);return n.write_shift(r,e.s.r),n.write_shift(r,e.e.r+1),n.write_shift(2,e.s.c),n.write_shift(2,e.e.c+1),n.write_shift(2,0),n}function Qy(e){var t=e.read_shift(2),r=e.read_shift(2),n=fd(e);return{r:t,c:r,ixfe:n[0],rknum:n[1]}}function ek(e,t){for(var r=e.l+t-2,n=e.read_shift(2),a=e.read_shift(2),i=[];e.l<r;)i.push(fd(e));if(e.l!==r)throw new Error("MulRK read error");var s=e.read_shift(2);if(i.length!=s-a+1)throw new Error("MulRK length mismatch");return{r:n,c:a,C:s,rkrec:i}}function tk(e,t){for(var r=e.l+t-2,n=e.read_shift(2),a=e.read_shift(2),i=[];e.l<r;)i.push(e.read_shift(2));if(e.l!==r)throw new Error("MulBlank read error");var s=e.read_shift(2);if(i.length!=s-a+1)throw new Error("MulBlank length mismatch");return{r:n,c:a,C:s,ixfe:i}}function rk(e,t,r,n){var a={},i=e.read_shift(4),s=e.read_shift(4),o=e.read_shift(4),c=e.read_shift(2);return a.patternType=I_[o>>26],n.cellStyles&&(a.alc=i&7,a.fWrap=i>>3&1,a.alcV=i>>4&7,a.fJustLast=i>>7&1,a.trot=i>>8&255,a.cIndent=i>>16&15,a.fShrinkToFit=i>>20&1,a.iReadOrder=i>>22&2,a.fAtrNum=i>>26&1,a.fAtrFnt=i>>27&1,a.fAtrAlc=i>>28&1,a.fAtrBdr=i>>29&1,a.fAtrPat=i>>30&1,a.fAtrProt=i>>31&1,a.dgLeft=s&15,a.dgRight=s>>4&15,a.dgTop=s>>8&15,a.dgBottom=s>>12&15,a.icvLeft=s>>16&127,a.icvRight=s>>23&127,a.grbitDiag=s>>30&3,a.icvTop=o&127,a.icvBottom=o>>7&127,a.icvDiag=o>>14&127,a.dgDiag=o>>21&15,a.icvFore=c&127,a.icvBack=c>>7&127,a.fsxButton=c>>14&1),a}function nk(e,t,r){var n={};return n.ifnt=e.read_shift(2),n.numFmtId=e.read_shift(2),n.flags=e.read_shift(2),n.fStyle=n.flags>>2&1,t-=6,n.data=rk(e,t,n.fStyle,r),n}function gd(e,t,r,n){var a=r&&r.biff==5;n||(n=ne(a?16:20)),n.write_shift(2,0),e.style?(n.write_shift(2,e.numFmtId||0),n.write_shift(2,65524)):(n.write_shift(2,e.numFmtId||0),n.write_shift(2,t<<4));var i=0;return e.numFmtId>0&&a&&(i|=1024),n.write_shift(4,i),n.write_shift(4,0),a||n.write_shift(4,0),n.write_shift(2,0),n}function ak(e){e.l+=4;var t=[e.read_shift(2),e.read_shift(2)];if(t[0]!==0&&t[0]--,t[1]!==0&&t[1]--,t[0]>7||t[1]>7)throw new Error("Bad Gutters: "+t.join("|"));return t}function ik(e){var t=ne(8);return t.write_shift(4,0),t.write_shift(2,e[0]?e[0]+1:0),t.write_shift(2,e[1]?e[1]+1:0),t}function xd(e,t,r){var n=on(e);(r.biff==2||t==9)&&++e.l;var a=ly(e);return n.val=a,n.t=a===!0||a===!1?"b":"e",n}function sk(e,t,r,n,a,i){var s=ne(8);return ba(e,t,n,s),id(r,i,s),s}function ok(e,t,r){r.biffguess&&r.biff==2&&(r.biff=5);var n=on(e),a=qt(e);return n.val=a,n}function lk(e,t,r,n){var a=ne(14);return ba(e,t,n,a),wa(r,a),a}var vd=vy;function ck(e,t,r){var n=e.l+t,a=e.read_shift(2),i=e.read_shift(2);if(r.sbcch=i,i==1025||i==14849)return[i,a];if(i<1||i>255)throw new Error("Unexpected SupBook type: "+i);for(var s=ka(e,i),o=[];n>e.l;)o.push(Ji(e));return[i,a,s,o]}function wd(e,t,r){var n=e.read_shift(2),a,i={fBuiltIn:n&1,fWantAdvise:n>>>1&1,fWantPict:n>>>2&1,fOle:n>>>3&1,fOleLink:n>>>4&1,cf:n>>>5&1023,fIcon:n>>>15&1};return r.sbcch===14849&&(a=_y(e,t-2,r)),i.body=a||e.read_shift(t-2),typeof a=="string"&&(i.Name=a),i}var fk=["_xlnm.Consolidate_Area","_xlnm.Auto_Open","_xlnm.Auto_Close","_xlnm.Extract","_xlnm.Database","_xlnm.Criteria","_xlnm.Print_Area","_xlnm.Print_Titles","_xlnm.Recorder","_xlnm.Data_Form","_xlnm.Auto_Activate","_xlnm.Auto_Deactivate","_xlnm.Sheet_Title","_xlnm._FilterDatabase"];function _d(e,t,r){var n=e.l+t,a=e.read_shift(2),i=e.read_shift(1),s=e.read_shift(1),o=e.read_shift(r&&r.biff==2?1:2),c=0;(!r||r.biff>=5)&&(r.biff!=5&&(e.l+=2),c=e.read_shift(2),r.biff==5&&(e.l+=2),e.l+=4);var f=ka(e,s,r);a&32&&(f=fk[f.charCodeAt(0)]);var u=n-e.l;r&&r.biff==2&&--u;var h=n==e.l||o===0||!(u>0)?[]:ST(e,u,r,o);return{chKey:i,Name:f,itab:c,rgce:h}}function yd(e,t,r){if(r.biff<8)return uk(e,t,r);for(var n=[],a=e.l+t,i=e.read_shift(r.biff>8?4:2);i--!==0;)n.push(wy(e,r.biff>8?12:6,r));if(e.l!=a)throw new Error("Bad ExternSheet: "+e.l+" != "+a);return n}function uk(e,t,r){e[e.l+1]==3&&e[e.l]++;var n=qi(e,t,r);return n.charCodeAt(0)==3?n.slice(1):n}function hk(e,t,r){if(r.biff<8){e.l+=t;return}var n=e.read_shift(2),a=e.read_shift(2),i=ka(e,n,r),s=ka(e,a,r);return[i,s]}function dk(e,t,r){var n=hd(e);e.l++;var a=e.read_shift(1);return t-=8,[TT(e,t,r),a,n]}function kd(e,t,r){var n=yy(e);switch(r.biff){case 2:e.l++,t-=7;break;case 3:case 4:e.l+=2,t-=8;break;default:e.l+=6,t-=12}return[n,ET(e,t,r)]}function mk(e){var t=e.read_shift(4)!==0,r=e.read_shift(4)!==0,n=e.read_shift(4);return[t,r,n]}function pk(e,t,r){if(!(r.biff<8)){var n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2),s=e.read_shift(2),o=Ea(e,0,r);return r.biff<8&&e.read_shift(1),[{r:n,c:a},o,s,i]}}function gk(e,t,r){return pk(e,t,r)}function xk(e,t){for(var r=[],n=e.read_shift(2);n--;)r.push(vo(e));return r}function vk(e){var t=ne(2+e.length*8);t.write_shift(2,e.length);for(var r=0;r<e.length;++r)ud(e[r],t);return t}function wk(e,t,r){if(r&&r.biff<8)return yk(e,t,r);var n=dd(e),a=Sy(e,t-22,n[1]);return{cmo:n,ft:a}}var _k={8:function(e,t){var r=e.l+t;e.l+=10;var n=e.read_shift(2);e.l+=4,e.l+=2,e.l+=2,e.l+=2,e.l+=4;var a=e.read_shift(1);return e.l+=a,e.l=r,{fmt:n}}};function yk(e,t,r){e.l+=4;var n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2);e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=6,t-=36;var s=[];return s.push((_k[n]||Kt)(e,t,r)),{cmo:[a,n,i],ft:s}}function kk(e,t,r){var n=e.l,a="";try{e.l+=4;var i=(r.lastobj||{cmo:[0,0]}).cmo[1],s;[0,5,7,11,12,14].indexOf(i)==-1?e.l+=6:s=uy(e,6,r);var o=e.read_shift(2);e.read_shift(2),Ft(e,2);var c=e.read_shift(2);e.l+=c;for(var f=1;f<e.lens.length-1;++f){if(e.l-n!=e.lens[f])throw new Error("TxO: bad continue record");var u=e[e.l],h=ka(e,e.lens[f+1]-e.lens[f]-1);if(a+=h,a.length>=(u?o:2*o))break}if(a.length!==o&&a.length!==o*2)throw new Error("cchText: "+o+" != "+a.length);return e.l=n+t,{t:a}}catch{return e.l=n+t,{t:a}}}function Ek(e,t){var r=vo(e);e.l+=16;var n=py(e,t-24);return[r,n]}function bk(e){var t=ne(24),r=ht(e[0]);t.write_shift(2,r.r),t.write_shift(2,r.r),t.write_shift(2,r.c),t.write_shift(2,r.c);for(var n="d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" "),a=0;a<16;++a)t.write_shift(1,parseInt(n[a],16));return Lt([t,gy(e[1])])}function Sk(e,t){e.read_shift(2);var r=vo(e),n=e.read_shift((t-10)/2,"dbcs-cont");return n=n.replace(ir,""),[r,n]}function Tk(e){var t=e[1].Tooltip,r=ne(10+2*(t.length+1));r.write_shift(2,2048);var n=ht(e[0]);r.write_shift(2,n.r),r.write_shift(2,n.r),r.write_shift(2,n.c),r.write_shift(2,n.c);for(var a=0;a<t.length;++a)r.write_shift(2,t.charCodeAt(a));return r.write_shift(2,0),r}function Fk(e){var t=[0,0],r;return r=e.read_shift(2),t[0]=Ih[r]||r,r=e.read_shift(2),t[1]=Ih[r]||r,t}function Ck(e){return e||(e=ne(4)),e.write_shift(2,1),e.write_shift(2,1),e}function Ak(e){for(var t=e.read_shift(2),r=[];t-- >0;)r.push(cd(e));return r}function Dk(e){for(var t=e.read_shift(2),r=[];t-- >0;)r.push(cd(e));return r}function Rk(e){e.l+=2;var t={cxfs:0,crc:0};return t.cxfs=e.read_shift(2),t.crc=e.read_shift(4),t}function Ed(e,t,r){if(!r.cellStyles)return Kt(e,t);var n=r&&r.biff>=12?4:2,a=e.read_shift(n),i=e.read_shift(n),s=e.read_shift(n),o=e.read_shift(n),c=e.read_shift(2);n==2&&(e.l+=2);var f={s:a,e:i,w:s,ixfe:o,flags:c};return(r.biff>=5||!r.biff)&&(f.level=c>>8&7),f}function Ok(e,t){var r=ne(12);r.write_shift(2,t),r.write_shift(2,t),r.write_shift(2,e.width*256),r.write_shift(2,0);var n=0;return e.hidden&&(n|=1),r.write_shift(1,n),n=e.level||0,r.write_shift(1,n),r.write_shift(2,0),r}function Bk(e,t){var r={};return t<32||(e.l+=16,r.header=qt(e),r.footer=qt(e),e.l+=2),r}function Nk(e,t,r){var n={area:!1};if(r.biff!=5)return e.l+=t,n;var a=e.read_shift(1);return e.l+=3,a&16&&(n.area=!0),n}function Pk(e){for(var t=ne(2*e),r=0;r<e;++r)t.write_shift(2,r+1);return t}var Ik=on,Lk=ad,Mk=Ji;function Vk(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(4),a={fmt:t,env:r,len:n,data:e.slice(e.l,e.l+n)};return e.l+=n,a}function Uk(e,t,r){r.biffguess&&r.biff==5&&(r.biff=2);var n=on(e);++e.l;var a=Ea(e,t-7,r);return n.t="str",n.val=a,n}function $k(e){var t=on(e);++e.l;var r=qt(e);return t.t="n",t.val=r,t}function Wk(e,t,r){var n=ne(15);return us(n,e,t),n.write_shift(8,r,"f"),n}function Hk(e){var t=on(e);++e.l;var r=e.read_shift(2);return t.t="n",t.val=r,t}function jk(e,t,r){var n=ne(9);return us(n,e,t),n.write_shift(2,r),n}function zk(e){var t=e.read_shift(1);return t===0?(e.l++,""):e.read_shift(t,"sbcs-cont")}function Gk(e,t){e.l+=6,e.l+=2,e.l+=1,e.l+=3,e.l+=1,e.l+=t-13}function Xk(e,t,r){var n=e.l+t,a=on(e),i=e.read_shift(2),s=ka(e,i,r);return e.l=n,a.t="str",a.val=s,a}var Kk=[2,3,48,49,131,139,140,245],oc=function(){var e={1:437,2:850,3:1252,4:1e4,100:852,101:866,102:865,103:861,104:895,105:620,106:737,107:857,120:950,121:949,122:936,123:932,124:874,125:1255,126:1256,150:10007,151:10029,152:10006,200:1250,201:1251,202:1254,203:1253,0:20127,8:865,9:437,10:850,11:437,13:437,14:850,15:437,16:850,17:437,18:850,19:932,20:850,21:437,22:850,23:865,24:437,25:437,26:850,27:437,28:863,29:850,31:852,34:852,35:852,36:860,37:850,38:866,55:850,64:852,77:936,78:949,79:950,80:874,87:1252,88:1252,89:1252,108:863,134:737,135:852,136:857,204:1257,255:16969},t=no({1:437,2:850,3:1252,4:1e4,100:852,101:866,102:865,103:861,104:895,105:620,106:737,107:857,120:950,121:949,122:936,123:932,124:874,125:1255,126:1256,150:10007,151:10029,152:10006,200:1250,201:1251,202:1254,203:1253,0:20127});function r(o,c){var f=[],u=zn(1);switch(c.type){case"base64":u=_r(wr(o));break;case"binary":u=_r(o);break;case"buffer":case"array":u=o;break}Ht(u,0);var h=u.read_shift(1),d=!!(h&136),p=!1,g=!1;switch(h){case 2:break;case 3:break;case 48:p=!0,d=!0;break;case 49:p=!0,d=!0;break;case 131:break;case 139:break;case 140:g=!0;break;case 245:break;default:throw new Error("DBF Unsupported Version: "+h.toString(16))}var m=0,x=521;h==2&&(m=u.read_shift(2)),u.l+=3,h!=2&&(m=u.read_shift(4)),m>1048576&&(m=1e6),h!=2&&(x=u.read_shift(2));var v=u.read_shift(2),k=c.codepage||1252;h!=2&&(u.l+=16,u.read_shift(1),u[u.l]!==0&&(k=e[u[u.l]]),u.l+=1,u.l+=2),g&&(u.l+=36);for(var w=[],S={},b=Math.min(u.length,h==2?521:x-10-(p?264:0)),T=g?32:11;u.l<b&&u[u.l]!=13;)switch(S={},S.name=Hn.utils.decode(k,u.slice(u.l,u.l+T)).replace(/[\u0000\r\n].*$/g,""),u.l+=T,S.type=String.fromCharCode(u.read_shift(1)),h!=2&&!g&&(S.offset=u.read_shift(4)),S.len=u.read_shift(1),h==2&&(S.offset=u.read_shift(2)),S.dec=u.read_shift(1),S.name.length&&w.push(S),h!=2&&(u.l+=g?13:14),S.type){case"B":(!p||S.len!=8)&&c.WTF&&""+S.name+S.type;break;case"G":case"P":c.WTF&&""+S.name+S.type;break;case"+":case"0":case"@":case"C":case"D":case"F":case"I":case"L":case"M":case"N":case"O":case"T":case"Y":break;default:throw new Error("Unknown Field Type: "+S.type)}if(u[u.l]!==13&&(u.l=x-1),u.read_shift(1)!==13)throw new Error("DBF Terminator not found "+u.l+" "+u[u.l]);u.l=x;var y=0,O=0;for(f[0]=[],O=0;O!=w.length;++O)f[0][O]=w[O].name;for(;m-- >0;){if(u[u.l]===42){u.l+=v;continue}for(++u.l,f[++y]=[],O=0,O=0;O!=w.length;++O){var B=u.slice(u.l,u.l+w[O].len);u.l+=w[O].len,Ht(B,0);var H=Hn.utils.decode(k,B);switch(w[O].type){case"C":H.trim().length&&(f[y][O]=H.replace(/\s+$/,""));break;case"D":H.length===8?f[y][O]=new Date(+H.slice(0,4),+H.slice(4,6)-1,+H.slice(6,8)):f[y][O]=H;break;case"F":f[y][O]=parseFloat(H.trim());break;case"+":case"I":f[y][O]=g?B.read_shift(-4,"i")^2147483648:B.read_shift(4,"i");break;case"L":switch(H.trim().toUpperCase()){case"Y":case"T":f[y][O]=!0;break;case"N":case"F":f[y][O]=!1;break;case"":case"?":break;default:throw new Error("DBF Unrecognized L:|"+H+"|")}break;case"M":if(!d)throw new Error("DBF Unexpected MEMO for type "+h.toString(16));f[y][O]="##MEMO##"+(g?parseInt(H.trim(),10):B.read_shift(4));break;case"N":H=H.replace(/\u0000/g,"").trim(),H&&H!="."&&(f[y][O]=+H||0);break;case"@":f[y][O]=new Date(B.read_shift(-8,"f")-621356832e5);break;case"T":f[y][O]=new Date((B.read_shift(4)-2440588)*864e5+B.read_shift(4));break;case"Y":f[y][O]=B.read_shift(4,"i")/1e4+B.read_shift(4,"i")/1e4*Math.pow(2,32);break;case"O":f[y][O]=-B.read_shift(-8,"f");break;case"B":if(p&&w[O].len==8){f[y][O]=B.read_shift(8,"f");break}case"G":case"P":B.l+=w[O].len;break;case"0":if(w[O].name==="_NullFlags")break;default:throw new Error("DBF Unsupported data type "+w[O].type)}}}if(h!=2&&u.l<u.length&&u[u.l++]!=26)throw new Error("DBF EOF Marker missing "+(u.l-1)+" of "+u.length+" "+u[u.l-1].toString(16));return c&&c.sheetRows&&(f=f.slice(0,c.sheetRows)),c.DBF=w,f}function n(o,c){var f=c||{};f.dateNF||(f.dateNF="yyyymmdd");var u=Ka(r(o,f),f);return u["!cols"]=f.DBF.map(function(h){return{wch:h.len,DBF:h}}),delete f.DBF,u}function a(o,c){try{return Yn(n(o,c),c)}catch(f){if(c&&c.WTF)throw f}return{SheetNames:[],Sheets:{}}}var i={B:8,C:250,L:1,D:8,"?":0,"":0};function s(o,c){var f=c||{};if(+f.codepage>=0&&Wr(+f.codepage),f.type=="string")throw new Error("Cannot write DBF to JS string");var u=ur(),h=Ao(o,{header:1,raw:!0,cellDates:!0}),d=h[0],p=h.slice(1),g=o["!cols"]||[],m=0,x=0,v=0,k=1;for(m=0;m<d.length;++m){if(((g[m]||{}).DBF||{}).name){d[m]=g[m].DBF.name,++v;continue}if(d[m]!=null){if(++v,typeof d[m]=="number"&&(d[m]=d[m].toString(10)),typeof d[m]!="string")throw new Error("DBF Invalid column name "+d[m]+" |"+typeof d[m]+"|");if(d.indexOf(d[m])!==m){for(x=0;x<1024;++x)if(d.indexOf(d[m]+"_"+x)==-1){d[m]+="_"+x;break}}}}var w=Ye(o["!ref"]),S=[],b=[],T=[];for(m=0;m<=w.e.c-w.s.c;++m){var y="",O="",B=0,H=[];for(x=0;x<p.length;++x)p[x][m]!=null&&H.push(p[x][m]);if(H.length==0||d[m]==null){S[m]="?";continue}for(x=0;x<H.length;++x){switch(typeof H[x]){case"number":O="B";break;case"string":O="C";break;case"boolean":O="L";break;case"object":O=H[x]instanceof Date?"D":"C";break;default:O="C"}B=Math.max(B,String(H[x]).length),y=y&&y!=O?"C":O}B>250&&(B=250),O=((g[m]||{}).DBF||{}).type,O=="C"&&g[m].DBF.len>B&&(B=g[m].DBF.len),y=="B"&&O=="N"&&(y="N",T[m]=g[m].DBF.dec,B=g[m].DBF.len),b[m]=y=="C"||O=="N"?B:i[y]||0,k+=b[m],S[m]=y}var j=u.next(32);for(j.write_shift(4,318902576),j.write_shift(4,p.length),j.write_shift(2,296+32*v),j.write_shift(2,k),m=0;m<4;++m)j.write_shift(4,0);for(j.write_shift(4,0|(+t[wu]||3)<<8),m=0,x=0;m<d.length;++m)if(d[m]!=null){var I=u.next(32),X=(d[m].slice(-10)+"\0\0\0\0\0\0\0\0\0\0\0").slice(0,11);I.write_shift(1,X,"sbcs"),I.write_shift(1,S[m]=="?"?"C":S[m],"sbcs"),I.write_shift(4,x),I.write_shift(1,b[m]||i[S[m]]||0),I.write_shift(1,T[m]||0),I.write_shift(1,2),I.write_shift(4,0),I.write_shift(1,0),I.write_shift(4,0),I.write_shift(4,0),x+=b[m]||i[S[m]]||0}var q=u.next(264);for(q.write_shift(4,13),m=0;m<65;++m)q.write_shift(4,0);for(m=0;m<p.length;++m){var te=u.next(k);for(te.write_shift(1,0),x=0;x<d.length;++x)if(d[x]!=null)switch(S[x]){case"L":te.write_shift(1,p[m][x]==null?63:p[m][x]?84:70);break;case"B":te.write_shift(8,p[m][x]||0,"f");break;case"N":var ae="0";for(typeof p[m][x]=="number"&&(ae=p[m][x].toFixed(T[x]||0)),v=0;v<b[x]-ae.length;++v)te.write_shift(1,32);te.write_shift(1,ae,"sbcs");break;case"D":p[m][x]?(te.write_shift(4,("0000"+p[m][x].getFullYear()).slice(-4),"sbcs"),te.write_shift(2,("00"+(p[m][x].getMonth()+1)).slice(-2),"sbcs"),te.write_shift(2,("00"+p[m][x].getDate()).slice(-2),"sbcs")):te.write_shift(8,"00000000","sbcs");break;case"C":var oe=String(p[m][x]!=null?p[m][x]:"").slice(0,b[x]);for(te.write_shift(1,oe,"sbcs"),v=0;v<b[x]-oe.length;++v)te.write_shift(1,32);break}}return u.next(1).write_shift(1,26),u.end()}return{to_workbook:a,to_sheet:n,from_sheet:s}}(),bd=function(){var e={AA:"À",BA:"Á",CA:"Â",DA:195,HA:"Ä",JA:197,AE:"È",BE:"É",CE:"Ê",HE:"Ë",AI:"Ì",BI:"Í",CI:"Î",HI:"Ï",AO:"Ò",BO:"Ó",CO:"Ô",DO:213,HO:"Ö",AU:"Ù",BU:"Ú",CU:"Û",HU:"Ü",Aa:"à",Ba:"á",Ca:"â",Da:227,Ha:"ä",Ja:229,Ae:"è",Be:"é",Ce:"ê",He:"ë",Ai:"ì",Bi:"í",Ci:"î",Hi:"ï",Ao:"ò",Bo:"ó",Co:"ô",Do:245,Ho:"ö",Au:"ù",Bu:"ú",Cu:"û",Hu:"ü",KC:"Ç",Kc:"ç",q:"æ",z:"œ",a:"Æ",j:"Œ",DN:209,Dn:241,Hy:255,S:169,c:170,R:174,"B ":180,0:176,1:177,2:178,3:179,5:181,6:182,7:183,Q:185,k:186,b:208,i:216,l:222,s:240,y:248,"!":161,'"':162,"#":163,"(":164,"%":165,"'":167,"H ":168,"+":171,";":187,"<":188,"=":189,">":190,"?":191,"{":223},t=new RegExp("\x1BN("+xt(e).join("|").replace(/\|\|\|/,"|\\||").replace(/([?()+])/g,"\\$1")+"|\\|)","gm"),r=function(d,p){var g=e[p];return typeof g=="number"?ku(g):g},n=function(d,p,g){var m=p.charCodeAt(0)-32<<4|g.charCodeAt(0)-48;return m==59?d:ku(m)};e["|"]=254;function a(d,p){switch(p.type){case"base64":return i(wr(d),p);case"binary":return i(d,p);case"buffer":return i(He&&Buffer.isBuffer(d)?d.toString("binary"):Gn(d),p);case"array":return i(ha(d),p)}throw new Error("Unrecognized type "+p.type)}function i(d,p){var g=d.split(/[\n\r]+/),m=-1,x=-1,v=0,k=0,w=[],S=[],b=null,T={},y=[],O=[],B=[],H=0,j;for(+p.codepage>=0&&Wr(+p.codepage);v!==g.length;++v){H=0;var I=g[v].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g,n).replace(t,r),X=I.replace(/;;/g,"\0").split(";").map(function(M){return M.replace(/\u0000/g,";")}),q=X[0],te;if(I.length>0)switch(q){case"ID":break;case"E":break;case"B":break;case"O":break;case"W":break;case"P":X[1].charAt(0)=="P"&&S.push(I.slice(3).replace(/;;/g,";"));break;case"C":var ae=!1,oe=!1,ue=!1,z=!1,W=-1,A=-1;for(k=1;k<X.length;++k)switch(X[k].charAt(0)){case"A":break;case"X":x=parseInt(X[k].slice(1))-1,oe=!0;break;case"Y":for(m=parseInt(X[k].slice(1))-1,oe||(x=0),j=w.length;j<=m;++j)w[j]=[];break;case"K":te=X[k].slice(1),te.charAt(0)==='"'?te=te.slice(1,te.length-1):te==="TRUE"?te=!0:te==="FALSE"?te=!1:isNaN(jr(te))?isNaN(Ga(te).getDate())||(te=it(te)):(te=jr(te),b!==null&&ua(b)&&(te=so(te))),ae=!0;break;case"E":z=!0;var _=ei(X[k].slice(1),{r:m,c:x});w[m][x]=[w[m][x],_];break;case"S":ue=!0,w[m][x]=[w[m][x],"S5S"];break;case"G":break;case"R":W=parseInt(X[k].slice(1))-1;break;case"C":A=parseInt(X[k].slice(1))-1;break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}if(ae&&(w[m][x]&&w[m][x].length==2?w[m][x][0]=te:w[m][x]=te,b=null),ue){if(z)throw new Error("SYLK shared formula cannot have own formula");var F=W>-1&&w[W][A];if(!F||!F[1])throw new Error("SYLK shared formula cannot find base");w[m][x][1]=jd(F[1],{r:m-W,c:x-A})}break;case"F":var D=0;for(k=1;k<X.length;++k)switch(X[k].charAt(0)){case"X":x=parseInt(X[k].slice(1))-1,++D;break;case"Y":for(m=parseInt(X[k].slice(1))-1,j=w.length;j<=m;++j)w[j]=[];break;case"M":H=parseInt(X[k].slice(1))/20;break;case"F":break;case"G":break;case"P":b=S[parseInt(X[k].slice(1))];break;case"S":break;case"D":break;case"N":break;case"W":for(B=X[k].slice(1).split(" "),j=parseInt(B[0],10);j<=parseInt(B[1],10);++j)H=parseInt(B[2],10),O[j-1]=H===0?{hidden:!0}:{wch:H},Jn(O[j-1]);break;case"C":x=parseInt(X[k].slice(1))-1,O[x]||(O[x]={});break;case"R":m=parseInt(X[k].slice(1))-1,y[m]||(y[m]={}),H>0?(y[m].hpt=H,y[m].hpx=Za(H)):H===0&&(y[m].hidden=!0);break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}D<1&&(b=null);break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}}return y.length>0&&(T["!rows"]=y),O.length>0&&(T["!cols"]=O),p&&p.sheetRows&&(w=w.slice(0,p.sheetRows)),[w,T]}function s(d,p){var g=a(d,p),m=g[0],x=g[1],v=Ka(m,p);return xt(x).forEach(function(k){v[k]=x[k]}),v}function o(d,p){return Yn(s(d,p),p)}function c(d,p,g,m){var x="C;Y"+(g+1)+";X"+(m+1)+";K";switch(d.t){case"n":x+=d.v||0,d.f&&!d.F&&(x+=";E"+pc(d.f,{r:g,c:m}));break;case"b":x+=d.v?"TRUE":"FALSE";break;case"e":x+=d.w||d.v;break;case"d":x+='"'+(d.w||d.v)+'"';break;case"s":x+='"'+d.v.replace(/"/g,"").replace(/;/g,";;")+'"';break}return x}function f(d,p){p.forEach(function(g,m){var x="F;W"+(m+1)+" "+(m+1)+" ";g.hidden?x+="0":(typeof g.width=="number"&&!g.wpx&&(g.wpx=Qi(g.width)),typeof g.wpx=="number"&&!g.wch&&(g.wch=es(g.wpx)),typeof g.wch=="number"&&(x+=Math.round(g.wch))),x.charAt(x.length-1)!=" "&&d.push(x)})}function u(d,p){p.forEach(function(g,m){var x="F;";g.hidden?x+="M0;":g.hpt?x+="M"+20*g.hpt+";":g.hpx&&(x+="M"+20*ts(g.hpx)+";"),x.length>2&&d.push(x+"R"+(m+1))})}function h(d,p){var g=["ID;PWXL;N;E"],m=[],x=Ye(d["!ref"]),v,k=Array.isArray(d),w=`\r
`;g.push("P;PGeneral"),g.push("F;P0;DG0G8;M255"),d["!cols"]&&f(g,d["!cols"]),d["!rows"]&&u(g,d["!rows"]),g.push("B;Y"+(x.e.r-x.s.r+1)+";X"+(x.e.c-x.s.c+1)+";D"+[x.s.c,x.s.r,x.e.c,x.e.r].join(" "));for(var S=x.s.r;S<=x.e.r;++S)for(var b=x.s.c;b<=x.e.c;++b){var T=Ce({r:S,c:b});v=k?(d[S]||[])[b]:d[T],!(!v||v.v==null&&(!v.f||v.F))&&m.push(c(v,d,S,b))}return g.join(w)+w+m.join(w)+w+"E"+w}return{to_workbook:o,to_sheet:s,from_sheet:h}}(),Sd=function(){function e(i,s){switch(s.type){case"base64":return t(wr(i),s);case"binary":return t(i,s);case"buffer":return t(He&&Buffer.isBuffer(i)?i.toString("binary"):Gn(i),s);case"array":return t(ha(i),s)}throw new Error("Unrecognized type "+s.type)}function t(i,s){for(var o=i.split(`
`),c=-1,f=-1,u=0,h=[];u!==o.length;++u){if(o[u].trim()==="BOT"){h[++c]=[],f=0;continue}if(!(c<0)){var d=o[u].trim().split(","),p=d[0],g=d[1];++u;for(var m=o[u]||"";(m.match(/["]/g)||[]).length&1&&u<o.length-1;)m+=`
`+o[++u];switch(m=m.trim(),+p){case-1:if(m==="BOT"){h[++c]=[],f=0;continue}else if(m!=="EOD")throw new Error("Unrecognized DIF special command "+m);break;case 0:m==="TRUE"?h[c][f]=!0:m==="FALSE"?h[c][f]=!1:isNaN(jr(g))?isNaN(Ga(g).getDate())?h[c][f]=g:h[c][f]=it(g):h[c][f]=jr(g),++f;break;case 1:m=m.slice(1,m.length-1),m=m.replace(/""/g,'"'),m&&m.match(/^=".*"$/)&&(m=m.slice(2,-1)),h[c][f++]=m!==""?m:null;break}if(m==="EOD")break}}return s&&s.sheetRows&&(h=h.slice(0,s.sheetRows)),h}function r(i,s){return Ka(e(i,s),s)}function n(i,s){return Yn(r(i,s),s)}var a=function(){var i=function(c,f,u,h,d){c.push(f),c.push(u+","+h),c.push('"'+d.replace(/"/g,'""')+'"')},s=function(c,f,u,h){c.push(f+","+u),c.push(f==1?'"'+h.replace(/"/g,'""')+'"':h)};return function(c){var f=[],u=Ye(c["!ref"]),h,d=Array.isArray(c);i(f,"TABLE",0,1,"sheetjs"),i(f,"VECTORS",0,u.e.r-u.s.r+1,""),i(f,"TUPLES",0,u.e.c-u.s.c+1,""),i(f,"DATA",0,0,"");for(var p=u.s.r;p<=u.e.r;++p){s(f,-1,0,"BOT");for(var g=u.s.c;g<=u.e.c;++g){var m=Ce({r:p,c:g});if(h=d?(c[p]||[])[g]:c[m],!h){s(f,1,0,"");continue}switch(h.t){case"n":var x=h.w;!x&&h.v!=null&&(x=h.v),x==null?h.f&&!h.F?s(f,1,0,"="+h.f):s(f,1,0,""):s(f,0,x,"V");break;case"b":s(f,0,h.v?1:0,h.v?"TRUE":"FALSE");break;case"s":s(f,1,0,isNaN(h.v)?h.v:'="'+h.v+'"');break;case"d":h.w||(h.w=yr(h.z||Se[14],Ot(it(h.v)))),s(f,0,h.w,"V");break;default:s(f,1,0,"")}}}s(f,-1,0,"EOD");var v=`\r
`,k=f.join(v);return k}}();return{to_workbook:n,to_sheet:r,from_sheet:a}}(),Td=function(){function e(h){return h.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,`
`)}function t(h){return h.replace(/\\/g,"\\b").replace(/:/g,"\\c").replace(/\n/g,"\\n")}function r(h,d){for(var p=h.split(`
`),g=-1,m=-1,x=0,v=[];x!==p.length;++x){var k=p[x].trim().split(":");if(k[0]==="cell"){var w=ht(k[1]);if(v.length<=w.r)for(g=v.length;g<=w.r;++g)v[g]||(v[g]=[]);switch(g=w.r,m=w.c,k[2]){case"t":v[g][m]=e(k[3]);break;case"v":v[g][m]=+k[3];break;case"vtf":var S=k[k.length-1];case"vtc":switch(k[3]){case"nl":v[g][m]=!!+k[4];break;default:v[g][m]=+k[4];break}k[2]=="vtf"&&(v[g][m]=[v[g][m],S])}}}return d&&d.sheetRows&&(v=v.slice(0,d.sheetRows)),v}function n(h,d){return Ka(r(h,d),d)}function a(h,d){return Yn(n(h,d),d)}var i=["socialcalc:version:1.5","MIME-Version: 1.0","Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"].join(`
`),s=["--SocialCalcSpreadsheetControlSave","Content-type: text/plain; charset=UTF-8"].join(`
`)+`
`,o=["# SocialCalc Spreadsheet Control Save","part:sheet"].join(`
`),c="--SocialCalcSpreadsheetControlSave--";function f(h){if(!h||!h["!ref"])return"";for(var d=[],p=[],g,m="",x=hr(h["!ref"]),v=Array.isArray(h),k=x.s.r;k<=x.e.r;++k)for(var w=x.s.c;w<=x.e.c;++w)if(m=Ce({r:k,c:w}),g=v?(h[k]||[])[w]:h[m],!(!g||g.v==null||g.t==="z")){switch(p=["cell",m,"t"],g.t){case"s":case"str":p.push(t(g.v));break;case"n":g.f?(p[2]="vtf",p[3]="n",p[4]=g.v,p[5]=t(g.f)):(p[2]="v",p[3]=g.v);break;case"b":p[2]="vt"+(g.f?"f":"c"),p[3]="nl",p[4]=g.v?"1":"0",p[5]=t(g.f||(g.v?"TRUE":"FALSE"));break;case"d":var S=Ot(it(g.v));p[2]="vtc",p[3]="nd",p[4]=""+S,p[5]=g.w||yr(g.z||Se[14],S);break;case"e":continue}d.push(p.join(":"))}return d.push("sheet:c:"+(x.e.c-x.s.c+1)+":r:"+(x.e.r-x.s.r+1)+":tvf:1"),d.push("valueformat:1:text-wiki"),d.join(`
`)}function u(h){return[i,s,o,s,f(h),c].join(`
`)}return{to_workbook:a,to_sheet:n,from_sheet:u}}(),Ja=function(){function e(u,h,d,p,g){g.raw?h[d][p]=u:u===""||(u==="TRUE"?h[d][p]=!0:u==="FALSE"?h[d][p]=!1:isNaN(jr(u))?isNaN(Ga(u).getDate())?h[d][p]=u:h[d][p]=it(u):h[d][p]=jr(u))}function t(u,h){var d=h||{},p=[];if(!u||u.length===0)return p;for(var g=u.split(/[\r\n]/),m=g.length-1;m>=0&&g[m].length===0;)--m;for(var x=10,v=0,k=0;k<=m;++k)v=g[k].indexOf(" "),v==-1?v=g[k].length:v++,x=Math.max(x,v);for(k=0;k<=m;++k){p[k]=[];var w=0;for(e(g[k].slice(0,x).trim(),p,k,w,d),w=1;w<=(g[k].length-x)/10+1;++w)e(g[k].slice(x+(w-1)*10,x+w*10).trim(),p,k,w,d)}return d.sheetRows&&(p=p.slice(0,d.sheetRows)),p}var r={44:",",9:"	",59:";",124:"|"},n={44:3,9:2,59:1,124:0};function a(u){for(var h={},d=!1,p=0,g=0;p<u.length;++p)(g=u.charCodeAt(p))==34?d=!d:!d&&g in r&&(h[g]=(h[g]||0)+1);g=[];for(p in h)Object.prototype.hasOwnProperty.call(h,p)&&g.push([h[p],p]);if(!g.length){h=n;for(p in h)Object.prototype.hasOwnProperty.call(h,p)&&g.push([h[p],p])}return g.sort(function(m,x){return m[0]-x[0]||n[m[1]]-n[x[1]]}),r[g.pop()[1]]||44}function i(u,h){var d=h||{},p="",g=d.dense?[]:{},m={s:{c:0,r:0},e:{c:0,r:0}};u.slice(0,4)=="sep="?u.charCodeAt(5)==13&&u.charCodeAt(6)==10?(p=u.charAt(4),u=u.slice(7)):u.charCodeAt(5)==13||u.charCodeAt(5)==10?(p=u.charAt(4),u=u.slice(6)):p=a(u.slice(0,1024)):d&&d.FS?p=d.FS:p=a(u.slice(0,1024));var x=0,v=0,k=0,w=0,S=0,b=p.charCodeAt(0),T=!1,y=0,O=u.charCodeAt(0);u=u.replace(/\r\n/mg,`
`);var B=d.dateNF!=null?P2(d.dateNF):null;function H(){var j=u.slice(w,S),I={};if(j.charAt(0)=='"'&&j.charAt(j.length-1)=='"'&&(j=j.slice(1,-1).replace(/""/g,'"')),j.length===0)I.t="z";else if(d.raw)I.t="s",I.v=j;else if(j.trim().length===0)I.t="s",I.v=j;else if(j.charCodeAt(0)==61)j.charCodeAt(1)==34&&j.charCodeAt(j.length-1)==34?(I.t="s",I.v=j.slice(2,-1).replace(/""/g,'"')):cS(j)?(I.t="n",I.f=j.slice(1)):(I.t="s",I.v=j);else if(j=="TRUE")I.t="b",I.v=!0;else if(j=="FALSE")I.t="b",I.v=!1;else if(!isNaN(k=jr(j)))I.t="n",d.cellText!==!1&&(I.w=j),I.v=k;else if(!isNaN(Ga(j).getDate())||B&&j.match(B)){I.z=d.dateNF||Se[14];var X=0;B&&j.match(B)&&(j=I2(j,d.dateNF,j.match(B)||[]),X=1),d.cellDates?(I.t="d",I.v=it(j,X)):(I.t="n",I.v=Ot(it(j,X))),d.cellText!==!1&&(I.w=yr(I.z,I.v instanceof Date?Ot(I.v):I.v)),d.cellNF||delete I.z}else I.t="s",I.v=j;if(I.t=="z"||(d.dense?(g[x]||(g[x]=[]),g[x][v]=I):g[Ce({c:v,r:x})]=I),w=S+1,O=u.charCodeAt(w),m.e.c<v&&(m.e.c=v),m.e.r<x&&(m.e.r=x),y==b)++v;else if(v=0,++x,d.sheetRows&&d.sheetRows<=x)return!0}e:for(;S<u.length;++S)switch(y=u.charCodeAt(S)){case 34:O===34&&(T=!T);break;case b:case 10:case 13:if(!T&&H())break e;break}return S-w>0&&H(),g["!ref"]=Me(m),g}function s(u,h){return!(h&&h.PRN)||h.FS||u.slice(0,4)=="sep="||u.indexOf("	")>=0||u.indexOf(",")>=0||u.indexOf(";")>=0?i(u,h):Ka(t(u,h),h)}function o(u,h){var d="",p=h.type=="string"?[0,0,0,0]:Oc(u,h);switch(h.type){case"base64":d=wr(u);break;case"binary":d=u;break;case"buffer":h.codepage==65001?d=u.toString("utf8"):h.codepage&&typeof Hn<"u"?d=Hn.utils.decode(h.codepage,u):d=He&&Buffer.isBuffer(u)?u.toString("binary"):Gn(u);break;case"array":d=ha(u);break;case"string":d=u;break;default:throw new Error("Unrecognized type "+h.type)}return p[0]==239&&p[1]==187&&p[2]==191?d=nt(d.slice(3)):h.type!="string"&&h.type!="buffer"&&h.codepage==65001?d=nt(d):h.type=="binary"&&typeof Hn<"u"&&h.codepage&&(d=Hn.utils.decode(h.codepage,Hn.utils.encode(28591,d))),d.slice(0,19)=="socialcalc:version:"?Td.to_sheet(h.type=="string"?d:nt(d),h):s(d,h)}function c(u,h){return Yn(o(u,h),h)}function f(u){for(var h=[],d=Ye(u["!ref"]),p,g=Array.isArray(u),m=d.s.r;m<=d.e.r;++m){for(var x=[],v=d.s.c;v<=d.e.c;++v){var k=Ce({r:m,c:v});if(p=g?(u[m]||[])[v]:u[k],!p||p.v==null){x.push("          ");continue}for(var w=(p.w||(Tn(p),p.w)||"").slice(0,10);w.length<10;)w+=" ";x.push(w+(v===0?" ":""))}h.push(x.join(""))}return h.join(`
`)}return{to_workbook:c,to_sheet:o,from_sheet:f}}();function Yk(e,t){var r=t||{},n=!!r.WTF;r.WTF=!0;try{var a=bd.to_workbook(e,r);return r.WTF=n,a}catch(i){if(r.WTF=n,!i.message.match(/SYLK bad record ID/)&&n)throw i;return Ja.to_workbook(e,t)}}var Sa=function(){function e(_,F,D){if(_){Ht(_,_.l||0);for(var M=D.Enum||W;_.l<_.length;){var K=_.read_shift(2),J=M[K]||M[65535],re=_.read_shift(2),le=_.l+re,ce=J.f&&J.f(_,re,D);if(_.l=le,F(ce,J,K))return}}}function t(_,F){switch(F.type){case"base64":return r(_r(wr(_)),F);case"binary":return r(_r(_),F);case"buffer":case"array":return r(_,F)}throw"Unsupported type "+F.type}function r(_,F){if(!_)return _;var D=F||{},M=D.dense?[]:{},K="Sheet1",J="",re=0,le={},ce=[],Be=[],V={s:{r:0,c:0},e:{r:0,c:0}},We=D.sheetRows||0;if(_[2]==0&&(_[3]==8||_[3]==9)&&_.length>=16&&_[14]==5&&_[15]===108)throw new Error("Unsupported Works 3 for Mac file");if(_[2]==2)D.Enum=W,e(_,function(we,Et,Mr){switch(Mr){case 0:D.vers=we,we>=4096&&(D.qpro=!0);break;case 6:V=we;break;case 204:we&&(J=we);break;case 222:J=we;break;case 15:case 51:D.qpro||(we[1].v=we[1].v.slice(1));case 13:case 14:case 16:Mr==14&&(we[2]&112)==112&&(we[2]&15)>1&&(we[2]&15)<15&&(we[1].z=D.dateNF||Se[14],D.cellDates&&(we[1].t="d",we[1].v=so(we[1].v))),D.qpro&&we[3]>re&&(M["!ref"]=Me(V),le[K]=M,ce.push(K),M=D.dense?[]:{},V={s:{r:0,c:0},e:{r:0,c:0}},re=we[3],K=J||"Sheet"+(re+1),J="");var mn=D.dense?(M[we[0].r]||[])[we[0].c]:M[Ce(we[0])];if(mn){mn.t=we[1].t,mn.v=we[1].v,we[1].z!=null&&(mn.z=we[1].z),we[1].f!=null&&(mn.f=we[1].f);break}D.dense?(M[we[0].r]||(M[we[0].r]=[]),M[we[0].r][we[0].c]=we[1]):M[Ce(we[0])]=we[1];break}},D);else if(_[2]==26||_[2]==14)D.Enum=A,_[2]==14&&(D.qpro=!0,_.l=0),e(_,function(we,Et,Mr){switch(Mr){case 204:K=we;break;case 22:we[1].v=we[1].v.slice(1);case 23:case 24:case 25:case 37:case 39:case 40:if(we[3]>re&&(M["!ref"]=Me(V),le[K]=M,ce.push(K),M=D.dense?[]:{},V={s:{r:0,c:0},e:{r:0,c:0}},re=we[3],K="Sheet"+(re+1)),We>0&&we[0].r>=We)break;D.dense?(M[we[0].r]||(M[we[0].r]=[]),M[we[0].r][we[0].c]=we[1]):M[Ce(we[0])]=we[1],V.e.c<we[0].c&&(V.e.c=we[0].c),V.e.r<we[0].r&&(V.e.r=we[0].r);break;case 27:we[14e3]&&(Be[we[14e3][0]]=we[14e3][1]);break;case 1537:Be[we[0]]=we[1],we[0]==re&&(K=we[1]);break}},D);else throw new Error("Unrecognized LOTUS BOF "+_[2]);if(M["!ref"]=Me(V),le[J||K]=M,ce.push(J||K),!Be.length)return{SheetNames:ce,Sheets:le};for(var Oe={},Ue=[],Pe=0;Pe<Be.length;++Pe)le[ce[Pe]]?(Ue.push(Be[Pe]||ce[Pe]),Oe[Be[Pe]]=le[Be[Pe]]||le[ce[Pe]]):(Ue.push(Be[Pe]),Oe[Be[Pe]]={"!ref":"A1"});return{SheetNames:Ue,Sheets:Oe}}function n(_,F){var D=F||{};if(+D.codepage>=0&&Wr(+D.codepage),D.type=="string")throw new Error("Cannot write WK1 to JS string");var M=ur(),K=Ye(_["!ref"]),J=Array.isArray(_),re=[];ge(M,0,i(1030)),ge(M,6,c(K));for(var le=Math.min(K.e.r,8191),ce=K.s.r;ce<=le;++ce)for(var Be=yt(ce),V=K.s.c;V<=K.e.c;++V){ce===K.s.r&&(re[V]=ut(V));var We=re[V]+Be,Oe=J?(_[ce]||[])[V]:_[We];if(!(!Oe||Oe.t=="z"))if(Oe.t=="n")(Oe.v|0)==Oe.v&&Oe.v>=-32768&&Oe.v<=32767?ge(M,13,p(ce,V,Oe.v)):ge(M,14,m(ce,V,Oe.v));else{var Ue=Tn(Oe);ge(M,15,h(ce,V,Ue.slice(0,239)))}}return ge(M,1),M.end()}function a(_,F){var D=F||{};if(+D.codepage>=0&&Wr(+D.codepage),D.type=="string")throw new Error("Cannot write WK3 to JS string");var M=ur();ge(M,0,s(_));for(var K=0,J=0;K<_.SheetNames.length;++K)(_.Sheets[_.SheetNames[K]]||{})["!ref"]&&ge(M,27,z(_.SheetNames[K],J++));var re=0;for(K=0;K<_.SheetNames.length;++K){var le=_.Sheets[_.SheetNames[K]];if(!(!le||!le["!ref"])){for(var ce=Ye(le["!ref"]),Be=Array.isArray(le),V=[],We=Math.min(ce.e.r,8191),Oe=ce.s.r;Oe<=We;++Oe)for(var Ue=yt(Oe),Pe=ce.s.c;Pe<=ce.e.c;++Pe){Oe===ce.s.r&&(V[Pe]=ut(Pe));var we=V[Pe]+Ue,Et=Be?(le[Oe]||[])[Pe]:le[we];if(!(!Et||Et.t=="z"))if(Et.t=="n")ge(M,23,H(Oe,Pe,re,Et.v));else{var Mr=Tn(Et);ge(M,22,y(Oe,Pe,re,Mr.slice(0,239)))}}++re}}return ge(M,1),M.end()}function i(_){var F=ne(2);return F.write_shift(2,_),F}function s(_){var F=ne(26);F.write_shift(2,4096),F.write_shift(2,4),F.write_shift(4,0);for(var D=0,M=0,K=0,J=0;J<_.SheetNames.length;++J){var re=_.SheetNames[J],le=_.Sheets[re];if(!(!le||!le["!ref"])){++K;var ce=hr(le["!ref"]);D<ce.e.r&&(D=ce.e.r),M<ce.e.c&&(M=ce.e.c)}}return D>8191&&(D=8191),F.write_shift(2,D),F.write_shift(1,K),F.write_shift(1,M),F.write_shift(2,0),F.write_shift(2,0),F.write_shift(1,1),F.write_shift(1,2),F.write_shift(4,0),F.write_shift(4,0),F}function o(_,F,D){var M={s:{c:0,r:0},e:{c:0,r:0}};return F==8&&D.qpro?(M.s.c=_.read_shift(1),_.l++,M.s.r=_.read_shift(2),M.e.c=_.read_shift(1),_.l++,M.e.r=_.read_shift(2),M):(M.s.c=_.read_shift(2),M.s.r=_.read_shift(2),F==12&&D.qpro&&(_.l+=2),M.e.c=_.read_shift(2),M.e.r=_.read_shift(2),F==12&&D.qpro&&(_.l+=2),M.s.c==65535&&(M.s.c=M.e.c=M.s.r=M.e.r=0),M)}function c(_){var F=ne(8);return F.write_shift(2,_.s.c),F.write_shift(2,_.s.r),F.write_shift(2,_.e.c),F.write_shift(2,_.e.r),F}function f(_,F,D){var M=[{c:0,r:0},{t:"n",v:0},0,0];return D.qpro&&D.vers!=20768?(M[0].c=_.read_shift(1),M[3]=_.read_shift(1),M[0].r=_.read_shift(2),_.l+=2):(M[2]=_.read_shift(1),M[0].c=_.read_shift(2),M[0].r=_.read_shift(2)),M}function u(_,F,D){var M=_.l+F,K=f(_,F,D);if(K[1].t="s",D.vers==20768){_.l++;var J=_.read_shift(1);return K[1].v=_.read_shift(J,"utf8"),K}return D.qpro&&_.l++,K[1].v=_.read_shift(M-_.l,"cstr"),K}function h(_,F,D){var M=ne(7+D.length);M.write_shift(1,255),M.write_shift(2,F),M.write_shift(2,_),M.write_shift(1,39);for(var K=0;K<M.length;++K){var J=D.charCodeAt(K);M.write_shift(1,J>=128?95:J)}return M.write_shift(1,0),M}function d(_,F,D){var M=f(_,F,D);return M[1].v=_.read_shift(2,"i"),M}function p(_,F,D){var M=ne(7);return M.write_shift(1,255),M.write_shift(2,F),M.write_shift(2,_),M.write_shift(2,D,"i"),M}function g(_,F,D){var M=f(_,F,D);return M[1].v=_.read_shift(8,"f"),M}function m(_,F,D){var M=ne(13);return M.write_shift(1,255),M.write_shift(2,F),M.write_shift(2,_),M.write_shift(8,D,"f"),M}function x(_,F,D){var M=_.l+F,K=f(_,F,D);if(K[1].v=_.read_shift(8,"f"),D.qpro)_.l=M;else{var J=_.read_shift(2);S(_.slice(_.l,_.l+J),K),_.l+=J}return K}function v(_,F,D){var M=F&32768;return F&=-32769,F=(M?_:0)+(F>=8192?F-16384:F),(M?"":"$")+(D?ut(F):yt(F))}var k={51:["FALSE",0],52:["TRUE",0],70:["LEN",1],80:["SUM",69],81:["AVERAGEA",69],82:["COUNTA",69],83:["MINA",69],84:["MAXA",69],111:["T",1]},w=["","","","","","","","","","+","-","*","/","^","=","<>","<=",">=","<",">","","","","","&","","","","","","",""];function S(_,F){Ht(_,0);for(var D=[],M=0,K="",J="",re="",le="";_.l<_.length;){var ce=_[_.l++];switch(ce){case 0:D.push(_.read_shift(8,"f"));break;case 1:J=v(F[0].c,_.read_shift(2),!0),K=v(F[0].r,_.read_shift(2),!1),D.push(J+K);break;case 2:{var Be=v(F[0].c,_.read_shift(2),!0),V=v(F[0].r,_.read_shift(2),!1);J=v(F[0].c,_.read_shift(2),!0),K=v(F[0].r,_.read_shift(2),!1),D.push(Be+V+":"+J+K)}break;case 3:if(_.l<_.length){console.error("WK1 premature formula end");return}break;case 4:D.push("("+D.pop()+")");break;case 5:D.push(_.read_shift(2));break;case 6:{for(var We="";ce=_[_.l++];)We+=String.fromCharCode(ce);D.push('"'+We.replace(/"/g,'""')+'"')}break;case 8:D.push("-"+D.pop());break;case 23:D.push("+"+D.pop());break;case 22:D.push("NOT("+D.pop()+")");break;case 20:case 21:le=D.pop(),re=D.pop(),D.push(["AND","OR"][ce-20]+"("+re+","+le+")");break;default:if(ce<32&&w[ce])le=D.pop(),re=D.pop(),D.push(re+w[ce]+le);else if(k[ce]){if(M=k[ce][1],M==69&&(M=_[_.l++]),M>D.length){console.error("WK1 bad formula parse 0x"+ce.toString(16)+":|"+D.join("|")+"|");return}var Oe=D.slice(-M);D.length-=M,D.push(k[ce][0]+"("+Oe.join(",")+")")}else return ce<=7?console.error("WK1 invalid opcode "+ce.toString(16)):ce<=24?console.error("WK1 unsupported op "+ce.toString(16)):ce<=30?console.error("WK1 invalid opcode "+ce.toString(16)):ce<=115?console.error("WK1 unsupported function opcode "+ce.toString(16)):console.error("WK1 unrecognized opcode "+ce.toString(16))}}D.length==1?F[1].f=""+D[0]:console.error("WK1 bad formula parse |"+D.join("|")+"|")}function b(_){var F=[{c:0,r:0},{t:"n",v:0},0];return F[0].r=_.read_shift(2),F[3]=_[_.l++],F[0].c=_[_.l++],F}function T(_,F){var D=b(_);return D[1].t="s",D[1].v=_.read_shift(F-4,"cstr"),D}function y(_,F,D,M){var K=ne(6+M.length);K.write_shift(2,_),K.write_shift(1,D),K.write_shift(1,F),K.write_shift(1,39);for(var J=0;J<M.length;++J){var re=M.charCodeAt(J);K.write_shift(1,re>=128?95:re)}return K.write_shift(1,0),K}function O(_,F){var D=b(_);D[1].v=_.read_shift(2);var M=D[1].v>>1;if(D[1].v&1)switch(M&7){case 0:M=(M>>3)*5e3;break;case 1:M=(M>>3)*500;break;case 2:M=(M>>3)/20;break;case 3:M=(M>>3)/200;break;case 4:M=(M>>3)/2e3;break;case 5:M=(M>>3)/2e4;break;case 6:M=(M>>3)/16;break;case 7:M=(M>>3)/64;break}return D[1].v=M,D}function B(_,F){var D=b(_),M=_.read_shift(4),K=_.read_shift(4),J=_.read_shift(2);if(J==65535)return M===0&&K===3221225472?(D[1].t="e",D[1].v=15):M===0&&K===3489660928?(D[1].t="e",D[1].v=42):D[1].v=0,D;var re=J&32768;return J=(J&32767)-16446,D[1].v=(1-re*2)*(K*Math.pow(2,J+32)+M*Math.pow(2,J)),D}function H(_,F,D,M){var K=ne(14);if(K.write_shift(2,_),K.write_shift(1,D),K.write_shift(1,F),M==0)return K.write_shift(4,0),K.write_shift(4,0),K.write_shift(2,65535),K;var J=0,re=0,le=0,ce=0;return M<0&&(J=1,M=-M),re=Math.log2(M)|0,M/=Math.pow(2,re-31),ce=M>>>0,ce&2147483648||(M/=2,++re,ce=M>>>0),M-=ce,ce|=2147483648,ce>>>=0,M*=Math.pow(2,32),le=M>>>0,K.write_shift(4,le),K.write_shift(4,ce),re+=16383+(J?32768:0),K.write_shift(2,re),K}function j(_,F){var D=B(_);return _.l+=F-14,D}function I(_,F){var D=b(_),M=_.read_shift(4);return D[1].v=M>>6,D}function X(_,F){var D=b(_),M=_.read_shift(8,"f");return D[1].v=M,D}function q(_,F){var D=X(_);return _.l+=F-10,D}function te(_,F){return _[_.l+F-1]==0?_.read_shift(F,"cstr"):""}function ae(_,F){var D=_[_.l++];D>F-1&&(D=F-1);for(var M="";M.length<D;)M+=String.fromCharCode(_[_.l++]);return M}function oe(_,F,D){if(!(!D.qpro||F<21)){var M=_.read_shift(1);_.l+=17,_.l+=1,_.l+=2;var K=_.read_shift(F-21,"cstr");return[M,K]}}function ue(_,F){for(var D={},M=_.l+F;_.l<M;){var K=_.read_shift(2);if(K==14e3){for(D[K]=[0,""],D[K][0]=_.read_shift(2);_[_.l];)D[K][1]+=String.fromCharCode(_[_.l]),_.l++;_.l++}}return D}function z(_,F){var D=ne(5+_.length);D.write_shift(2,14e3),D.write_shift(2,F);for(var M=0;M<_.length;++M){var K=_.charCodeAt(M);D[D.l++]=K>127?95:K}return D[D.l++]=0,D}var W={0:{n:"BOF",f:Ft},1:{n:"EOF"},2:{n:"CALCMODE"},3:{n:"CALCORDER"},4:{n:"SPLIT"},5:{n:"SYNC"},6:{n:"RANGE",f:o},7:{n:"WINDOW1"},8:{n:"COLW1"},9:{n:"WINTWO"},10:{n:"COLW2"},11:{n:"NAME"},12:{n:"BLANK"},13:{n:"INTEGER",f:d},14:{n:"NUMBER",f:g},15:{n:"LABEL",f:u},16:{n:"FORMULA",f:x},24:{n:"TABLE"},25:{n:"ORANGE"},26:{n:"PRANGE"},27:{n:"SRANGE"},28:{n:"FRANGE"},29:{n:"KRANGE1"},32:{n:"HRANGE"},35:{n:"KRANGE2"},36:{n:"PROTEC"},37:{n:"FOOTER"},38:{n:"HEADER"},39:{n:"SETUP"},40:{n:"MARGINS"},41:{n:"LABELFMT"},42:{n:"TITLES"},43:{n:"SHEETJS"},45:{n:"GRAPH"},46:{n:"NGRAPH"},47:{n:"CALCCOUNT"},48:{n:"UNFORMATTED"},49:{n:"CURSORW12"},50:{n:"WINDOW"},51:{n:"STRING",f:u},55:{n:"PASSWORD"},56:{n:"LOCKED"},60:{n:"QUERY"},61:{n:"QUERYNAME"},62:{n:"PRINT"},63:{n:"PRINTNAME"},64:{n:"GRAPH2"},65:{n:"GRAPHNAME"},66:{n:"ZOOM"},67:{n:"SYMSPLIT"},68:{n:"NSROWS"},69:{n:"NSCOLS"},70:{n:"RULER"},71:{n:"NNAME"},72:{n:"ACOMM"},73:{n:"AMACRO"},74:{n:"PARSE"},102:{n:"PRANGES??"},103:{n:"RRANGES??"},104:{n:"FNAME??"},105:{n:"MRANGES??"},204:{n:"SHEETNAMECS",f:te},222:{n:"SHEETNAMELP",f:ae},65535:{n:""}},A={0:{n:"BOF"},1:{n:"EOF"},2:{n:"PASSWORD"},3:{n:"CALCSET"},4:{n:"WINDOWSET"},5:{n:"SHEETCELLPTR"},6:{n:"SHEETLAYOUT"},7:{n:"COLUMNWIDTH"},8:{n:"HIDDENCOLUMN"},9:{n:"USERRANGE"},10:{n:"SYSTEMRANGE"},11:{n:"ZEROFORCE"},12:{n:"SORTKEYDIR"},13:{n:"FILESEAL"},14:{n:"DATAFILLNUMS"},15:{n:"PRINTMAIN"},16:{n:"PRINTSTRING"},17:{n:"GRAPHMAIN"},18:{n:"GRAPHSTRING"},19:{n:"??"},20:{n:"ERRCELL"},21:{n:"NACELL"},22:{n:"LABEL16",f:T},23:{n:"NUMBER17",f:B},24:{n:"NUMBER18",f:O},25:{n:"FORMULA19",f:j},26:{n:"FORMULA1A"},27:{n:"XFORMAT",f:ue},28:{n:"DTLABELMISC"},29:{n:"DTLABELCELL"},30:{n:"GRAPHWINDOW"},31:{n:"CPA"},32:{n:"LPLAUTO"},33:{n:"QUERY"},34:{n:"HIDDENSHEET"},35:{n:"??"},37:{n:"NUMBER25",f:I},38:{n:"??"},39:{n:"NUMBER27",f:X},40:{n:"FORMULA28",f:q},142:{n:"??"},147:{n:"??"},150:{n:"??"},151:{n:"??"},152:{n:"??"},153:{n:"??"},154:{n:"??"},155:{n:"??"},156:{n:"??"},163:{n:"??"},174:{n:"??"},175:{n:"??"},176:{n:"??"},177:{n:"??"},184:{n:"??"},185:{n:"??"},186:{n:"??"},187:{n:"??"},188:{n:"??"},195:{n:"??"},201:{n:"??"},204:{n:"SHEETNAMECS",f:te},205:{n:"??"},206:{n:"??"},207:{n:"??"},208:{n:"??"},256:{n:"??"},259:{n:"??"},260:{n:"??"},261:{n:"??"},262:{n:"??"},263:{n:"??"},265:{n:"??"},266:{n:"??"},267:{n:"??"},268:{n:"??"},270:{n:"??"},271:{n:"??"},384:{n:"??"},389:{n:"??"},390:{n:"??"},393:{n:"??"},396:{n:"??"},512:{n:"??"},514:{n:"??"},513:{n:"??"},516:{n:"??"},517:{n:"??"},640:{n:"??"},641:{n:"??"},642:{n:"??"},643:{n:"??"},644:{n:"??"},645:{n:"??"},646:{n:"??"},647:{n:"??"},648:{n:"??"},658:{n:"??"},659:{n:"??"},660:{n:"??"},661:{n:"??"},662:{n:"??"},665:{n:"??"},666:{n:"??"},768:{n:"??"},772:{n:"??"},1537:{n:"SHEETINFOQP",f:oe},1600:{n:"??"},1602:{n:"??"},1793:{n:"??"},1794:{n:"??"},1795:{n:"??"},1796:{n:"??"},1920:{n:"??"},2048:{n:"??"},2049:{n:"??"},2052:{n:"??"},2688:{n:"??"},10998:{n:"??"},12849:{n:"??"},28233:{n:"??"},28484:{n:"??"},65535:{n:""}};return{sheet_to_wk1:n,book_to_wk3:a,to_workbook:t}}();function qk(e){var t={},r=e.match(Xt),n=0,a=!1;if(r)for(;n!=r.length;++n){var i=Re(r[n]);switch(i[0].replace(/\w*:/g,"")){case"<condense":break;case"<extend":break;case"<shadow":if(!i.val)break;case"<shadow>":case"<shadow/>":t.shadow=1;break;case"</shadow>":break;case"<charset":if(i.val=="1")break;t.cp=Sl[parseInt(i.val,10)];break;case"<outline":if(!i.val)break;case"<outline>":case"<outline/>":t.outline=1;break;case"</outline>":break;case"<rFont":t.name=i.val;break;case"<sz":t.sz=i.val;break;case"<strike":if(!i.val)break;case"<strike>":case"<strike/>":t.strike=1;break;case"</strike>":break;case"<u":if(!i.val)break;switch(i.val){case"double":t.uval="double";break;case"singleAccounting":t.uval="single-accounting";break;case"doubleAccounting":t.uval="double-accounting";break}case"<u>":case"<u/>":t.u=1;break;case"</u>":break;case"<b":if(i.val=="0")break;case"<b>":case"<b/>":t.b=1;break;case"</b>":break;case"<i":if(i.val=="0")break;case"<i>":case"<i/>":t.i=1;break;case"</i>":break;case"<color":i.rgb&&(t.color=i.rgb.slice(2,8));break;case"<color>":case"<color/>":case"</color>":break;case"<family":t.family=i.val;break;case"<family>":case"<family/>":case"</family>":break;case"<vertAlign":t.valign=i.val;break;case"<vertAlign>":case"<vertAlign/>":case"</vertAlign>":break;case"<scheme":break;case"<scheme>":case"<scheme/>":case"</scheme>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;default:if(i[0].charCodeAt(1)!==47&&!a)throw new Error("Unrecognized rich format "+i[0])}}return t}var Jk=function(){var e=$i("t"),t=$i("rPr");function r(i){var s=i.match(e);if(!s)return{t:"s",v:""};var o={t:"s",v:Ke(s[1])},c=i.match(t);return c&&(o.s=qk(c[1])),o}var n=/<(?:\w+:)?r>/g,a=/<\/(?:\w+:)?r>/;return function(s){return s.replace(n,"").split(a).map(r).filter(function(o){return o.v})}}(),Zk=function(){var t=/(\r\n|\n)/g;function r(a,i,s){var o=[];a.u&&o.push("text-decoration: underline;"),a.uval&&o.push("text-underline-style:"+a.uval+";"),a.sz&&o.push("font-size:"+a.sz+"pt;"),a.outline&&o.push("text-effect: outline;"),a.shadow&&o.push("text-shadow: auto;"),i.push('<span style="'+o.join("")+'">'),a.b&&(i.push("<b>"),s.push("</b>")),a.i&&(i.push("<i>"),s.push("</i>")),a.strike&&(i.push("<s>"),s.push("</s>"));var c=a.valign||"";return c=="superscript"||c=="super"?c="sup":c=="subscript"&&(c="sub"),c!=""&&(i.push("<"+c+">"),s.push("</"+c+">")),s.push("</span>"),a}function n(a){var i=[[],a.v,[]];return a.v?(a.s&&r(a.s,i[0],i[2]),i[0].join("")+i[1].replace(t,"<br/>")+i[2].join("")):""}return function(i){return i.map(n).join("")}}(),Qk=/<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g,eE=/<(?:\w+:)?r>/,tE=/<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;function lc(e,t){var r=t?t.cellHTML:!0,n={};return e?(e.match(/^\s*<(?:\w+:)?t[^>]*>/)?(n.t=Ke(nt(e.slice(e.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||"")),n.r=nt(e),r&&(n.h=Il(n.t))):e.match(eE)&&(n.r=nt(e),n.t=Ke(nt((e.replace(tE,"").match(Qk)||[]).join("").replace(Xt,""))),r&&(n.h=Zk(Jk(n.r)))),n):{t:""}}var rE=/<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/,nE=/<(?:\w+:)?(?:si|sstItem)>/g,aE=/<\/(?:\w+:)?(?:si|sstItem)>/;function iE(e,t){var r=[],n="";if(!e)return r;var a=e.match(rE);if(a){n=a[2].replace(nE,"").split(aE);for(var i=0;i!=n.length;++i){var s=lc(n[i].trim(),t);s!=null&&(r[r.length]=s)}a=Re(a[1]),r.Count=a.count,r.Unique=a.uniqueCount}return r}var sE=/^\s|\s$|[\t\n\r]/;function Fd(e,t){if(!t.bookSST)return"";var r=[_t];r[r.length]=pe("sst",null,{xmlns:da[0],count:e.Count,uniqueCount:e.Unique});for(var n=0;n!=e.length;++n)if(e[n]!=null){var a=e[n],i="<si>";a.r?i+=a.r:(i+="<t",a.t||(a.t=""),a.t.match(sE)&&(i+=' xml:space="preserve"'),i+=">"+Qe(a.t)+"</t>"),i+="</si>",r[r.length]=i}return r.length>2&&(r[r.length]="</sst>",r[1]=r[1].replace("/>",">")),r.join("")}function oE(e){return[e.read_shift(4),e.read_shift(4)]}function lE(e,t){var r=[],n=!1;return Sn(e,function(i,s,o){switch(o){case 159:r.Count=i[0],r.Unique=i[1];break;case 19:r.push(i);break;case 160:return!0;case 35:n=!0;break;case 36:n=!1;break;default:if(s.T,!n||t.WTF)throw new Error("Unexpected record 0x"+o.toString(16))}}),r}function cE(e,t){return t||(t=ne(8)),t.write_shift(4,e.Count),t.write_shift(4,e.Unique),t}var fE=__;function uE(e){var t=ur();fe(t,159,cE(e));for(var r=0;r<e.length;++r)fe(t,19,fE(e[r]));return fe(t,160),t.end()}function Cd(e){for(var t=[],r=e.split(""),n=0;n<r.length;++n)t[n]=r[n].charCodeAt(0);return t}function Cn(e,t){var r={};return r.Major=e.read_shift(2),r.Minor=e.read_shift(2),t>=4&&(e.l+=t-4),r}function hE(e){var t={};return t.id=e.read_shift(0,"lpp4"),t.R=Cn(e,4),t.U=Cn(e,4),t.W=Cn(e,4),t}function dE(e){for(var t=e.read_shift(4),r=e.l+t-4,n={},a=e.read_shift(4),i=[];a-- >0;)i.push({t:e.read_shift(4),v:e.read_shift(0,"lpp4")});if(n.name=e.read_shift(0,"lpp4"),n.comps=i,e.l!=r)throw new Error("Bad DataSpaceMapEntry: "+e.l+" != "+r);return n}function mE(e){var t=[];e.l+=4;for(var r=e.read_shift(4);r-- >0;)t.push(dE(e));return t}function pE(e){var t=[];e.l+=4;for(var r=e.read_shift(4);r-- >0;)t.push(e.read_shift(0,"lpp4"));return t}function gE(e){var t={};return e.read_shift(4),e.l+=4,t.id=e.read_shift(0,"lpp4"),t.name=e.read_shift(0,"lpp4"),t.R=Cn(e,4),t.U=Cn(e,4),t.W=Cn(e,4),t}function xE(e){var t=gE(e);if(t.ename=e.read_shift(0,"8lpp4"),t.blksz=e.read_shift(4),t.cmode=e.read_shift(4),e.read_shift(4)!=4)throw new Error("Bad !Primary record");return t}function Ad(e,t){var r=e.l+t,n={};n.Flags=e.read_shift(4)&63,e.l+=4,n.AlgID=e.read_shift(4);var a=!1;switch(n.AlgID){case 26126:case 26127:case 26128:a=n.Flags==36;break;case 26625:a=n.Flags==4;break;case 0:a=n.Flags==16||n.Flags==4||n.Flags==36;break;default:throw"Unrecognized encryption algorithm: "+n.AlgID}if(!a)throw new Error("Encryption Flags/AlgID mismatch");return n.AlgIDHash=e.read_shift(4),n.KeySize=e.read_shift(4),n.ProviderType=e.read_shift(4),e.l+=8,n.CSPName=e.read_shift(r-e.l>>1,"utf16le"),e.l=r,n}function Dd(e,t){var r={},n=e.l+t;return e.l+=4,r.Salt=e.slice(e.l,e.l+16),e.l+=16,r.Verifier=e.slice(e.l,e.l+16),e.l+=16,e.read_shift(4),r.VerifierHash=e.slice(e.l,n),e.l=n,r}function vE(e){var t=Cn(e);switch(t.Minor){case 2:return[t.Minor,wE(e)];case 3:return[t.Minor,_E()];case 4:return[t.Minor,yE(e)]}throw new Error("ECMA-376 Encrypted file unrecognized Version: "+t.Minor)}function wE(e){var t=e.read_shift(4);if((t&63)!=36)throw new Error("EncryptionInfo mismatch");var r=e.read_shift(4),n=Ad(e,r),a=Dd(e,e.length-e.l);return{t:"Std",h:n,v:a}}function _E(){throw new Error("File is password-protected: ECMA-376 Extensible")}function yE(e){var t=["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];e.l+=4;var r=e.read_shift(e.length-e.l,"utf8"),n={};return r.replace(Xt,function(i){var s=Re(i);switch(an(s[0])){case"<?xml":break;case"<encryption":case"</encryption>":break;case"<keyData":t.forEach(function(o){n[o]=s[o]});break;case"<dataIntegrity":n.encryptedHmacKey=s.encryptedHmacKey,n.encryptedHmacValue=s.encryptedHmacValue;break;case"<keyEncryptors>":case"<keyEncryptors":n.encs=[];break;case"</keyEncryptors>":break;case"<keyEncryptor":n.uri=s.uri;break;case"</keyEncryptor>":break;case"<encryptedKey":n.encs.push(s);break;default:throw s[0]}}),n}function kE(e,t){var r={},n=r.EncryptionVersionInfo=Cn(e,4);if(t-=4,n.Minor!=2)throw new Error("unrecognized minor version code: "+n.Minor);if(n.Major>4||n.Major<2)throw new Error("unrecognized major version code: "+n.Major);r.Flags=e.read_shift(4),t-=4;var a=e.read_shift(4);return t-=4,r.EncryptionHeader=Ad(e,a),t-=a,r.EncryptionVerifier=Dd(e,t),r}function EE(e){var t={},r=t.EncryptionVersionInfo=Cn(e,4);if(r.Major!=1||r.Minor!=1)throw"unrecognized version code "+r.Major+" : "+r.Minor;return t.Salt=e.read_shift(16),t.EncryptedVerifier=e.read_shift(16),t.EncryptedVerifierHash=e.read_shift(16),t}function cc(e){var t=0,r,n=Cd(e),a=n.length+1,i,s,o,c,f;for(r=zn(a),r[0]=n.length,i=1;i!=a;++i)r[i]=n[i-1];for(i=a-1;i>=0;--i)s=r[i],o=t&16384?1:0,c=t<<1&32767,f=o|c,t=f^s;return t^52811}var Rd=function(){var e=[187,255,255,186,255,255,185,128,0,190,15,0,191,15,0],t=[57840,7439,52380,33984,4364,3600,61902,12606,6258,57657,54287,34041,10252,43370,20163],r=[44796,19929,39858,10053,20106,40212,10761,31585,63170,64933,60267,50935,40399,11199,17763,35526,1453,2906,5812,11624,23248,885,1770,3540,7080,14160,28320,56640,55369,41139,20807,41614,21821,43642,17621,28485,56970,44341,19019,38038,14605,29210,60195,50791,40175,10751,21502,43004,24537,18387,36774,3949,7898,15796,31592,63184,47201,24803,49606,37805,14203,28406,56812,17824,35648,1697,3394,6788,13576,27152,43601,17539,35078,557,1114,2228,4456,30388,60776,51953,34243,7079,14158,28316,14128,28256,56512,43425,17251,34502,7597,13105,26210,52420,35241,883,1766,3532,4129,8258,16516,33032,4657,9314,18628],n=function(s){return(s/2|s*128)&255},a=function(s,o){return n(s^o)},i=function(s){for(var o=t[s.length-1],c=104,f=s.length-1;f>=0;--f)for(var u=s[f],h=0;h!=7;++h)u&64&&(o^=r[c]),u*=2,--c;return o};return function(s){for(var o=Cd(s),c=i(o),f=o.length,u=zn(16),h=0;h!=16;++h)u[h]=0;var d,p,g;for((f&1)===1&&(d=c>>8,u[f]=a(e[0],d),--f,d=c&255,p=o[o.length-1],u[f]=a(p,d));f>0;)--f,d=c>>8,u[f]=a(o[f],d),--f,d=c&255,u[f]=a(o[f],d);for(f=15,g=15-o.length;g>0;)d=c>>8,u[f]=a(e[g],d),--f,--g,d=c&255,u[f]=a(o[f],d),--f,--g;return u}}(),bE=function(e,t,r,n,a){a||(a=t),n||(n=Rd(e));var i,s;for(i=0;i!=t.length;++i)s=t[i],s^=n[r],s=(s>>5|s<<3)&255,a[i]=s,++r;return[a,r,n]},SE=function(e){var t=0,r=Rd(e);return function(n){var a=bE("",n,t,r);return t=a[1],a[0]}};function TE(e,t,r,n){var a={key:Ft(e),verificationBytes:Ft(e)};return r.password&&(a.verifier=cc(r.password)),n.valid=a.verificationBytes===a.verifier,n.valid&&(n.insitu=SE(r.password)),a}function FE(e,t,r){var n=r||{};return n.Info=e.read_shift(2),e.l-=2,n.Info===1?n.Data=EE(e):n.Data=kE(e,t),n}function CE(e,t,r){var n={Type:r.biff>=8?e.read_shift(2):0};return n.Type?FE(e,t-2,n):TE(e,r.biff>=8?t:t-2,r,n),n}var Od=function(){function e(a,i){switch(i.type){case"base64":return t(wr(a),i);case"binary":return t(a,i);case"buffer":return t(He&&Buffer.isBuffer(a)?a.toString("binary"):Gn(a),i);case"array":return t(ha(a),i)}throw new Error("Unrecognized type "+i.type)}function t(a,i){var s=i||{},o=s.dense?[]:{},c=a.match(/\\trowd.*?\\row\b/g);if(!c.length)throw new Error("RTF missing table");var f={s:{c:0,r:0},e:{c:0,r:c.length-1}};return c.forEach(function(u,h){Array.isArray(o)&&(o[h]=[]);for(var d=/\\\w+\b/g,p=0,g,m=-1;g=d.exec(u);){switch(g[0]){case"\\cell":var x=u.slice(p,d.lastIndex-g[0].length);if(x[0]==" "&&(x=x.slice(1)),++m,x.length){var v={v:x,t:"s"};Array.isArray(o)?o[h][m]=v:o[Ce({r:h,c:m})]=v}break}p=d.lastIndex}m>f.e.c&&(f.e.c=m)}),o["!ref"]=Me(f),o}function r(a,i){return Yn(e(a,i),i)}function n(a){for(var i=["{\\rtf1\\ansi"],s=Ye(a["!ref"]),o,c=Array.isArray(a),f=s.s.r;f<=s.e.r;++f){i.push("\\trowd\\trautofit1");for(var u=s.s.c;u<=s.e.c;++u)i.push("\\cellx"+(u+1));for(i.push("\\pard\\intbl"),u=s.s.c;u<=s.e.c;++u){var h=Ce({r:f,c:u});o=c?(a[f]||[])[u]:a[h],!(!o||o.v==null&&(!o.f||o.F))&&(i.push(" "+(o.w||(Tn(o),o.w))),i.push("\\cell"))}i.push("\\pard\\intbl\\row")}return i.join("")+"}"}return{to_workbook:r,to_sheet:e,from_sheet:n}}();function AE(e){var t=e.slice(e[0]==="#"?1:0).slice(0,6);return[parseInt(t.slice(0,2),16),parseInt(t.slice(2,4),16),parseInt(t.slice(4,6),16)]}function Zi(e){for(var t=0,r=1;t!=3;++t)r=r*256+(e[t]>255?255:e[t]<0?0:e[t]);return r.toString(16).toUpperCase().slice(1)}function DE(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255,a=Math.max(t,r,n),i=Math.min(t,r,n),s=a-i;if(s===0)return[0,0,t];var o=0,c=0,f=a+i;switch(c=s/(f>1?2-f:f),a){case t:o=((r-n)/s+6)%6;break;case r:o=(n-t)/s+2;break;case n:o=(t-r)/s+4;break}return[o/6,c,f/2]}function RE(e){var t=e[0],r=e[1],n=e[2],a=r*2*(n<.5?n:1-n),i=n-a/2,s=[i,i,i],o=6*t,c;if(r!==0)switch(o|0){case 0:case 6:c=a*o,s[0]+=a,s[1]+=c;break;case 1:c=a*(2-o),s[0]+=c,s[1]+=a;break;case 2:c=a*(o-2),s[1]+=a,s[2]+=c;break;case 3:c=a*(4-o),s[1]+=c,s[2]+=a;break;case 4:c=a*(o-4),s[2]+=a,s[0]+=c;break;case 5:c=a*(6-o),s[2]+=c,s[0]+=a;break}for(var f=0;f!=3;++f)s[f]=Math.round(s[f]*255);return s}function _o(e,t){if(t===0)return e;var r=DE(AE(e));return t<0?r[2]=r[2]*(1+t):r[2]=1-(1-r[2])*(1-t),Zi(RE(r))}var Bd=6,OE=15,BE=1,Zt=Bd;function Qi(e){return Math.floor((e+Math.round(128/Zt)/256)*Zt)}function es(e){return Math.floor((e-5)/Zt*100+.5)/100}function yo(e){return Math.round((e*Zt+5)/Zt*256)/256}function fc(e){return yo(es(Qi(e)))}function uc(e){var t=Math.abs(e-fc(e)),r=Zt;if(t>.005)for(Zt=BE;Zt<OE;++Zt)Math.abs(e-fc(e))<=t&&(t=Math.abs(e-fc(e)),r=Zt);Zt=r}function Jn(e){e.width?(e.wpx=Qi(e.width),e.wch=es(e.wpx),e.MDW=Zt):e.wpx?(e.wch=es(e.wpx),e.width=yo(e.wch),e.MDW=Zt):typeof e.wch=="number"&&(e.width=yo(e.wch),e.wpx=Qi(e.width),e.MDW=Zt),e.customWidth&&delete e.customWidth}var NE=96,Nd=NE;function ts(e){return e*96/Nd}function Za(e){return e*Nd/96}var PE={None:"none",Solid:"solid",Gray50:"mediumGray",Gray75:"darkGray",Gray25:"lightGray",HorzStripe:"darkHorizontal",VertStripe:"darkVertical",ReverseDiagStripe:"darkDown",DiagStripe:"darkUp",DiagCross:"darkGrid",ThickDiagCross:"darkTrellis",ThinHorzStripe:"lightHorizontal",ThinVertStripe:"lightVertical",ThinReverseDiagStripe:"lightDown",ThinHorzCross:"lightGrid"};function IE(e,t,r,n){t.Borders=[];var a={},i=!1;(e[0].match(Xt)||[]).forEach(function(s){var o=Re(s);switch(an(o[0])){case"<borders":case"<borders>":case"</borders>":break;case"<border":case"<border>":case"<border/>":a={},o.diagonalUp&&(a.diagonalUp=ot(o.diagonalUp)),o.diagonalDown&&(a.diagonalDown=ot(o.diagonalDown)),t.Borders.push(a);break;case"</border>":break;case"<left/>":break;case"<left":case"<left>":break;case"</left>":break;case"<right/>":break;case"<right":case"<right>":break;case"</right>":break;case"<top/>":break;case"<top":case"<top>":break;case"</top>":break;case"<bottom/>":break;case"<bottom":case"<bottom>":break;case"</bottom>":break;case"<diagonal":case"<diagonal>":case"<diagonal/>":break;case"</diagonal>":break;case"<horizontal":case"<horizontal>":case"<horizontal/>":break;case"</horizontal>":break;case"<vertical":case"<vertical>":case"<vertical/>":break;case"</vertical>":break;case"<start":case"<start>":case"<start/>":break;case"</start>":break;case"<end":case"<end>":case"<end/>":break;case"</end>":break;case"<color":case"<color>":break;case"<color/>":case"</color>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in borders")}})}function LE(e,t,r,n){t.Fills=[];var a={},i=!1;(e[0].match(Xt)||[]).forEach(function(s){var o=Re(s);switch(an(o[0])){case"<fills":case"<fills>":case"</fills>":break;case"<fill>":case"<fill":case"<fill/>":a={},t.Fills.push(a);break;case"</fill>":break;case"<gradientFill>":break;case"<gradientFill":case"</gradientFill>":t.Fills.push(a),a={};break;case"<patternFill":case"<patternFill>":o.patternType&&(a.patternType=o.patternType);break;case"<patternFill/>":case"</patternFill>":break;case"<bgColor":a.bgColor||(a.bgColor={}),o.indexed&&(a.bgColor.indexed=parseInt(o.indexed,10)),o.theme&&(a.bgColor.theme=parseInt(o.theme,10)),o.tint&&(a.bgColor.tint=parseFloat(o.tint)),o.rgb&&(a.bgColor.rgb=o.rgb.slice(-6));break;case"<bgColor/>":case"</bgColor>":break;case"<fgColor":a.fgColor||(a.fgColor={}),o.theme&&(a.fgColor.theme=parseInt(o.theme,10)),o.tint&&(a.fgColor.tint=parseFloat(o.tint)),o.rgb!=null&&(a.fgColor.rgb=o.rgb.slice(-6));break;case"<fgColor/>":case"</fgColor>":break;case"<stop":case"<stop/>":break;case"</stop>":break;case"<color":case"<color/>":break;case"</color>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in fills")}})}function ME(e,t,r,n){t.Fonts=[];var a={},i=!1;(e[0].match(Xt)||[]).forEach(function(s){var o=Re(s);switch(an(o[0])){case"<fonts":case"<fonts>":case"</fonts>":break;case"<font":case"<font>":break;case"</font>":case"<font/>":t.Fonts.push(a),a={};break;case"<name":o.val&&(a.name=nt(o.val));break;case"<name/>":case"</name>":break;case"<b":a.bold=o.val?ot(o.val):1;break;case"<b/>":a.bold=1;break;case"<i":a.italic=o.val?ot(o.val):1;break;case"<i/>":a.italic=1;break;case"<u":switch(o.val){case"none":a.underline=0;break;case"single":a.underline=1;break;case"double":a.underline=2;break;case"singleAccounting":a.underline=33;break;case"doubleAccounting":a.underline=34;break}break;case"<u/>":a.underline=1;break;case"<strike":a.strike=o.val?ot(o.val):1;break;case"<strike/>":a.strike=1;break;case"<outline":a.outline=o.val?ot(o.val):1;break;case"<outline/>":a.outline=1;break;case"<shadow":a.shadow=o.val?ot(o.val):1;break;case"<shadow/>":a.shadow=1;break;case"<condense":a.condense=o.val?ot(o.val):1;break;case"<condense/>":a.condense=1;break;case"<extend":a.extend=o.val?ot(o.val):1;break;case"<extend/>":a.extend=1;break;case"<sz":o.val&&(a.sz=+o.val);break;case"<sz/>":case"</sz>":break;case"<vertAlign":o.val&&(a.vertAlign=o.val);break;case"<vertAlign/>":case"</vertAlign>":break;case"<family":o.val&&(a.family=parseInt(o.val,10));break;case"<family/>":case"</family>":break;case"<scheme":o.val&&(a.scheme=o.val);break;case"<scheme/>":case"</scheme>":break;case"<charset":if(o.val=="1")break;o.codepage=Sl[parseInt(o.val,10)];break;case"<color":if(a.color||(a.color={}),o.auto&&(a.color.auto=ot(o.auto)),o.rgb)a.color.rgb=o.rgb.slice(-6);else if(o.indexed){a.color.index=parseInt(o.indexed,10);var c=_a[a.color.index];a.color.index==81&&(c=_a[1]),c||(c=_a[1]),a.color.rgb=c[0].toString(16)+c[1].toString(16)+c[2].toString(16)}else o.theme&&(a.color.theme=parseInt(o.theme,10),o.tint&&(a.color.tint=parseFloat(o.tint)),o.theme&&r.themeElements&&r.themeElements.clrScheme&&(a.color.rgb=_o(r.themeElements.clrScheme[a.color.theme].rgb,a.color.tint||0)));break;case"<color/>":case"</color>":break;case"<AlternateContent":i=!0;break;case"</AlternateContent>":i=!1;break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in fonts")}})}function VE(e,t,r){t.NumberFmt=[];for(var n=xt(Se),a=0;a<n.length;++a)t.NumberFmt[n[a]]=Se[n[a]];var i=e[0].match(Xt);if(i)for(a=0;a<i.length;++a){var s=Re(i[a]);switch(an(s[0])){case"<numFmts":case"</numFmts>":case"<numFmts/>":case"<numFmts>":break;case"<numFmt":{var o=Ke(nt(s.formatCode)),c=parseInt(s.numFmtId,10);if(t.NumberFmt[c]=o,c>0){if(c>392){for(c=392;c>60&&t.NumberFmt[c]!=null;--c);t.NumberFmt[c]=o}nn(o,c)}}break;case"</numFmt>":break;default:if(r.WTF)throw new Error("unrecognized "+s[0]+" in numFmts")}}}function UE(e){var t=["<numFmts>"];return[[5,8],[23,26],[41,44],[50,392]].forEach(function(r){for(var n=r[0];n<=r[1];++n)e[n]!=null&&(t[t.length]=pe("numFmt",null,{numFmtId:n,formatCode:Qe(e[n])}))}),t.length===1?"":(t[t.length]="</numFmts>",t[0]=pe("numFmts",null,{count:t.length-2}).replace("/>",">"),t.join(""))}var ko=["numFmtId","fillId","fontId","borderId","xfId"],Eo=["applyAlignment","applyBorder","applyFill","applyFont","applyNumberFormat","applyProtection","pivotButton","quotePrefix"];function $E(e,t,r){t.CellXf=[];var n,a=!1;(e[0].match(Xt)||[]).forEach(function(i){var s=Re(i),o=0;switch(an(s[0])){case"<cellXfs":case"<cellXfs>":case"<cellXfs/>":case"</cellXfs>":break;case"<xf":case"<xf/>":for(n=s,delete n[0],o=0;o<ko.length;++o)n[ko[o]]&&(n[ko[o]]=parseInt(n[ko[o]],10));for(o=0;o<Eo.length;++o)n[Eo[o]]&&(n[Eo[o]]=ot(n[Eo[o]]));if(t.NumberFmt&&n.numFmtId>392){for(o=392;o>60;--o)if(t.NumberFmt[n.numFmtId]==t.NumberFmt[o]){n.numFmtId=o;break}}t.CellXf.push(n);break;case"</xf>":break;case"<alignment":case"<alignment/>":var c={};s.vertical&&(c.vertical=s.vertical),s.horizontal&&(c.horizontal=s.horizontal),s.textRotation!=null&&(c.textRotation=s.textRotation),s.indent&&(c.indent=s.indent),s.wrapText&&(c.wrapText=ot(s.wrapText)),n.alignment=c;break;case"</alignment>":break;case"<protection":break;case"</protection>":case"<protection/>":break;case"<AlternateContent":a=!0;break;case"</AlternateContent>":a=!1;break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;default:if(r&&r.WTF&&!a)throw new Error("unrecognized "+s[0]+" in cellXfs")}})}function WE(e){var t=[];return t[t.length]=pe("cellXfs",null),e.forEach(function(r){t[t.length]=pe("xf",null,r)}),t[t.length]="</cellXfs>",t.length===2?"":(t[0]=pe("cellXfs",null,{count:t.length-2}).replace("/>",">"),t.join(""))}var HE=function(){var t=/<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/,r=/<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/,n=/<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/,a=/<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/,i=/<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;return function(o,c,f){var u={};if(!o)return u;o=o.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");var h;return(h=o.match(t))&&VE(h,u,f),(h=o.match(a))&&ME(h,u,c,f),(h=o.match(n))&&LE(h,u,c,f),(h=o.match(i))&&IE(h,u,c,f),(h=o.match(r))&&$E(h,u,f),u}}();function Pd(e,t){var r=[_t,pe("styleSheet",null,{xmlns:da[0],"xmlns:vt":Bt.vt})],n;return e.SSF&&(n=UE(e.SSF))!=null&&(r[r.length]=n),r[r.length]='<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>',r[r.length]='<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>',r[r.length]='<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>',r[r.length]='<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>',(n=WE(t.cellXfs))&&(r[r.length]=n),r[r.length]='<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>',r[r.length]='<dxfs count="0"/>',r[r.length]='<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>',r.length>2&&(r[r.length]="</styleSheet>",r[1]=r[1].replace("/>",">")),r.join("")}function jE(e,t){var r=e.read_shift(2),n=Yt(e);return[r,n]}function zE(e,t,r){r||(r=ne(6+4*t.length)),r.write_shift(2,e),Mt(t,r);var n=r.length>r.l?r.slice(0,r.l):r;return r.l==null&&(r.l=r.length),n}function GE(e,t,r){var n={};n.sz=e.read_shift(2)/20;var a=F_(e);a.fItalic&&(n.italic=1),a.fCondense&&(n.condense=1),a.fExtend&&(n.extend=1),a.fShadow&&(n.shadow=1),a.fOutline&&(n.outline=1),a.fStrikeout&&(n.strike=1);var i=e.read_shift(2);switch(i===700&&(n.bold=1),e.read_shift(2)){case 1:n.vertAlign="superscript";break;case 2:n.vertAlign="subscript";break}var s=e.read_shift(1);s!=0&&(n.underline=s);var o=e.read_shift(1);o>0&&(n.family=o);var c=e.read_shift(1);switch(c>0&&(n.charset=c),e.l++,n.color=T_(e),e.read_shift(1)){case 1:n.scheme="major";break;case 2:n.scheme="minor";break}return n.name=Yt(e),n}function XE(e,t){t||(t=ne(25+4*32)),t.write_shift(2,e.sz*20),C_(e,t),t.write_shift(2,e.bold?700:400);var r=0;e.vertAlign=="superscript"?r=1:e.vertAlign=="subscript"&&(r=2),t.write_shift(2,r),t.write_shift(1,e.underline||0),t.write_shift(1,e.family||0),t.write_shift(1,e.charset||0),t.write_shift(1,0),fo(e.color,t);var n=0;return e.scheme=="major"&&(n=1),e.scheme=="minor"&&(n=2),t.write_shift(1,n),Mt(e.name,t),t.length>t.l?t.slice(0,t.l):t}var KE=["none","solid","mediumGray","darkGray","lightGray","darkHorizontal","darkVertical","darkDown","darkUp","darkGrid","darkTrellis","lightHorizontal","lightVertical","lightDown","lightUp","lightGrid","lightTrellis","gray125","gray0625"],hc,YE=Kt;function Id(e,t){t||(t=ne(4*3+8*7+16*1)),hc||(hc=no(KE));var r=hc[e.patternType];r==null&&(r=40),t.write_shift(4,r);var n=0;if(r!=40)for(fo({auto:1},t),fo({auto:1},t);n<12;++n)t.write_shift(4,0);else{for(;n<4;++n)t.write_shift(4,0);for(;n<12;++n)t.write_shift(4,0)}return t.length>t.l?t.slice(0,t.l):t}function qE(e,t){var r=e.l+t,n=e.read_shift(2),a=e.read_shift(2);return e.l=r,{ixfe:n,numFmtId:a}}function Ld(e,t,r){r||(r=ne(16)),r.write_shift(2,t||0),r.write_shift(2,e.numFmtId||0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(1,0),r.write_shift(1,0);var n=0;return r.write_shift(1,n),r.write_shift(1,0),r.write_shift(1,0),r.write_shift(1,0),r}function rs(e,t){return t||(t=ne(10)),t.write_shift(1,0),t.write_shift(1,0),t.write_shift(4,0),t.write_shift(4,0),t}var JE=Kt;function ZE(e,t){return t||(t=ne(51)),t.write_shift(1,0),rs(null,t),rs(null,t),rs(null,t),rs(null,t),rs(null,t),t.length>t.l?t.slice(0,t.l):t}function QE(e,t){return t||(t=ne(12+4*10)),t.write_shift(4,e.xfId),t.write_shift(2,1),t.write_shift(1,+e.builtinId),t.write_shift(1,0),co(e.name||"",t),t.length>t.l?t.slice(0,t.l):t}function eb(e,t,r){var n=ne(2052);return n.write_shift(4,e),co(t,n),co(r,n),n.length>n.l?n.slice(0,n.l):n}function tb(e,t,r){var n={};n.NumberFmt=[];for(var a in Se)n.NumberFmt[a]=Se[a];n.CellXf=[],n.Fonts=[];var i=[],s=!1;return Sn(e,function(c,f,u){switch(u){case 44:n.NumberFmt[c[0]]=c[1],nn(c[1],c[0]);break;case 43:n.Fonts.push(c),c.color.theme!=null&&t&&t.themeElements&&t.themeElements.clrScheme&&(c.color.rgb=_o(t.themeElements.clrScheme[c.color.theme].rgb,c.color.tint||0));break;case 1025:break;case 45:break;case 46:break;case 47:i[i.length-1]==617&&n.CellXf.push(c);break;case 48:case 507:case 572:case 475:break;case 1171:case 2102:case 1130:case 512:case 2095:case 3072:break;case 35:s=!0;break;case 36:s=!1;break;case 37:i.push(u),s=!0;break;case 38:i.pop(),s=!1;break;default:if(f.T>0)i.push(u);else if(f.T<0)i.pop();else if(!s||r.WTF&&i[i.length-1]!=37)throw new Error("Unexpected record 0x"+u.toString(16))}}),n}function rb(e,t){if(t){var r=0;[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&++r}),r!=0&&(fe(e,615,zr(r)),[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&fe(e,44,zE(a,t[a]))}),fe(e,616))}}function nb(e){var t=1;fe(e,611,zr(t)),fe(e,43,XE({sz:12,color:{theme:1},name:"Calibri",family:2,scheme:"minor"})),fe(e,612)}function ab(e){var t=2;fe(e,603,zr(t)),fe(e,45,Id({patternType:"none"})),fe(e,45,Id({patternType:"gray125"})),fe(e,604)}function ib(e){var t=1;fe(e,613,zr(t)),fe(e,46,ZE()),fe(e,614)}function sb(e){var t=1;fe(e,626,zr(t)),fe(e,47,Ld({numFmtId:0,fontId:0,fillId:0,borderId:0},65535)),fe(e,627)}function ob(e,t){fe(e,617,zr(t.length)),t.forEach(function(r){fe(e,47,Ld(r,0))}),fe(e,618)}function lb(e){var t=1;fe(e,619,zr(t)),fe(e,48,QE({xfId:0,builtinId:0,name:"Normal"})),fe(e,620)}function cb(e){var t=0;fe(e,505,zr(t)),fe(e,506)}function fb(e){var t=0;fe(e,508,eb(t,"TableStyleMedium9","PivotStyleMedium4")),fe(e,509)}function ub(e,t){var r=ur();return fe(r,278),rb(r,e.SSF),nb(r),ab(r),ib(r),sb(r),ob(r,t.cellXfs),lb(r),cb(r),fb(r),fe(r,279),r.end()}var hb=["</a:lt1>","</a:dk1>","</a:lt2>","</a:dk2>","</a:accent1>","</a:accent2>","</a:accent3>","</a:accent4>","</a:accent5>","</a:accent6>","</a:hlink>","</a:folHlink>"];function db(e,t,r){t.themeElements.clrScheme=[];var n={};(e[0].match(Xt)||[]).forEach(function(a){var i=Re(a);switch(i[0]){case"<a:clrScheme":case"</a:clrScheme>":break;case"<a:srgbClr":n.rgb=i.val;break;case"<a:sysClr":n.rgb=i.lastClr;break;case"<a:dk1>":case"</a:dk1>":case"<a:lt1>":case"</a:lt1>":case"<a:dk2>":case"</a:dk2>":case"<a:lt2>":case"</a:lt2>":case"<a:accent1>":case"</a:accent1>":case"<a:accent2>":case"</a:accent2>":case"<a:accent3>":case"</a:accent3>":case"<a:accent4>":case"</a:accent4>":case"<a:accent5>":case"</a:accent5>":case"<a:accent6>":case"</a:accent6>":case"<a:hlink>":case"</a:hlink>":case"<a:folHlink>":case"</a:folHlink>":i[0].charAt(1)==="/"?(t.themeElements.clrScheme[hb.indexOf(i[0])]=n,n={}):n.name=i[0].slice(3,i[0].length-1);break;default:if(r&&r.WTF)throw new Error("Unrecognized "+i[0]+" in clrScheme")}})}function mb(){}function pb(){}var gb=/<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/,xb=/<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/,vb=/<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;function wb(e,t,r){t.themeElements={};var n;[["clrScheme",gb,db],["fontScheme",xb,mb],["fmtScheme",vb,pb]].forEach(function(a){if(!(n=e.match(a[1])))throw new Error(a[0]+" not found in themeElements");a[2](n,t,r)})}var _b=/<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;function Md(e,t){(!e||e.length===0)&&(e=dc());var r,n={};if(!(r=e.match(_b)))throw new Error("themeElements not found in theme");return wb(r[0],n,t),n.raw=e,n}function dc(e,t){if(t&&t.themeXLSX)return t.themeXLSX;if(e&&typeof e.raw=="string")return e.raw;var r=[_t];return r[r.length]='<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">',r[r.length]="<a:themeElements>",r[r.length]='<a:clrScheme name="Office">',r[r.length]='<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>',r[r.length]='<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>',r[r.length]='<a:dk2><a:srgbClr val="1F497D"/></a:dk2>',r[r.length]='<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>',r[r.length]='<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>',r[r.length]='<a:accent2><a:srgbClr val="C0504D"/></a:accent2>',r[r.length]='<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>',r[r.length]='<a:accent4><a:srgbClr val="8064A2"/></a:accent4>',r[r.length]='<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>',r[r.length]='<a:accent6><a:srgbClr val="F79646"/></a:accent6>',r[r.length]='<a:hlink><a:srgbClr val="0000FF"/></a:hlink>',r[r.length]='<a:folHlink><a:srgbClr val="800080"/></a:folHlink>',r[r.length]="</a:clrScheme>",r[r.length]='<a:fontScheme name="Office">',r[r.length]="<a:majorFont>",r[r.length]='<a:latin typeface="Cambria"/>',r[r.length]='<a:ea typeface=""/>',r[r.length]='<a:cs typeface=""/>',r[r.length]='<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>',r[r.length]='<a:font script="Hang" typeface="맑은 고딕"/>',r[r.length]='<a:font script="Hans" typeface="宋体"/>',r[r.length]='<a:font script="Hant" typeface="新細明體"/>',r[r.length]='<a:font script="Arab" typeface="Times New Roman"/>',r[r.length]='<a:font script="Hebr" typeface="Times New Roman"/>',r[r.length]='<a:font script="Thai" typeface="Tahoma"/>',r[r.length]='<a:font script="Ethi" typeface="Nyala"/>',r[r.length]='<a:font script="Beng" typeface="Vrinda"/>',r[r.length]='<a:font script="Gujr" typeface="Shruti"/>',r[r.length]='<a:font script="Khmr" typeface="MoolBoran"/>',r[r.length]='<a:font script="Knda" typeface="Tunga"/>',r[r.length]='<a:font script="Guru" typeface="Raavi"/>',r[r.length]='<a:font script="Cans" typeface="Euphemia"/>',r[r.length]='<a:font script="Cher" typeface="Plantagenet Cherokee"/>',r[r.length]='<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>',r[r.length]='<a:font script="Tibt" typeface="Microsoft Himalaya"/>',r[r.length]='<a:font script="Thaa" typeface="MV Boli"/>',r[r.length]='<a:font script="Deva" typeface="Mangal"/>',r[r.length]='<a:font script="Telu" typeface="Gautami"/>',r[r.length]='<a:font script="Taml" typeface="Latha"/>',r[r.length]='<a:font script="Syrc" typeface="Estrangelo Edessa"/>',r[r.length]='<a:font script="Orya" typeface="Kalinga"/>',r[r.length]='<a:font script="Mlym" typeface="Kartika"/>',r[r.length]='<a:font script="Laoo" typeface="DokChampa"/>',r[r.length]='<a:font script="Sinh" typeface="Iskoola Pota"/>',r[r.length]='<a:font script="Mong" typeface="Mongolian Baiti"/>',r[r.length]='<a:font script="Viet" typeface="Times New Roman"/>',r[r.length]='<a:font script="Uigh" typeface="Microsoft Uighur"/>',r[r.length]='<a:font script="Geor" typeface="Sylfaen"/>',r[r.length]="</a:majorFont>",r[r.length]="<a:minorFont>",r[r.length]='<a:latin typeface="Calibri"/>',r[r.length]='<a:ea typeface=""/>',r[r.length]='<a:cs typeface=""/>',r[r.length]='<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>',r[r.length]='<a:font script="Hang" typeface="맑은 고딕"/>',r[r.length]='<a:font script="Hans" typeface="宋体"/>',r[r.length]='<a:font script="Hant" typeface="新細明體"/>',r[r.length]='<a:font script="Arab" typeface="Arial"/>',r[r.length]='<a:font script="Hebr" typeface="Arial"/>',r[r.length]='<a:font script="Thai" typeface="Tahoma"/>',r[r.length]='<a:font script="Ethi" typeface="Nyala"/>',r[r.length]='<a:font script="Beng" typeface="Vrinda"/>',r[r.length]='<a:font script="Gujr" typeface="Shruti"/>',r[r.length]='<a:font script="Khmr" typeface="DaunPenh"/>',r[r.length]='<a:font script="Knda" typeface="Tunga"/>',r[r.length]='<a:font script="Guru" typeface="Raavi"/>',r[r.length]='<a:font script="Cans" typeface="Euphemia"/>',r[r.length]='<a:font script="Cher" typeface="Plantagenet Cherokee"/>',r[r.length]='<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>',r[r.length]='<a:font script="Tibt" typeface="Microsoft Himalaya"/>',r[r.length]='<a:font script="Thaa" typeface="MV Boli"/>',r[r.length]='<a:font script="Deva" typeface="Mangal"/>',r[r.length]='<a:font script="Telu" typeface="Gautami"/>',r[r.length]='<a:font script="Taml" typeface="Latha"/>',r[r.length]='<a:font script="Syrc" typeface="Estrangelo Edessa"/>',r[r.length]='<a:font script="Orya" typeface="Kalinga"/>',r[r.length]='<a:font script="Mlym" typeface="Kartika"/>',r[r.length]='<a:font script="Laoo" typeface="DokChampa"/>',r[r.length]='<a:font script="Sinh" typeface="Iskoola Pota"/>',r[r.length]='<a:font script="Mong" typeface="Mongolian Baiti"/>',r[r.length]='<a:font script="Viet" typeface="Arial"/>',r[r.length]='<a:font script="Uigh" typeface="Microsoft Uighur"/>',r[r.length]='<a:font script="Geor" typeface="Sylfaen"/>',r[r.length]="</a:minorFont>",r[r.length]="</a:fontScheme>",r[r.length]='<a:fmtScheme name="Office">',r[r.length]="<a:fillStyleLst>",r[r.length]='<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>',r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:lin ang="16200000" scaled="1"/>',r[r.length]="</a:gradFill>",r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:lin ang="16200000" scaled="0"/>',r[r.length]="</a:gradFill>",r[r.length]="</a:fillStyleLst>",r[r.length]="<a:lnStyleLst>",r[r.length]='<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]='<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]='<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]="</a:lnStyleLst>",r[r.length]="<a:effectStyleLst>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]="</a:effectStyle>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]="</a:effectStyle>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]='<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>',r[r.length]='<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>',r[r.length]="</a:effectStyle>",r[r.length]="</a:effectStyleLst>",r[r.length]="<a:bgFillStyleLst>",r[r.length]='<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>',r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>',r[r.length]="</a:gradFill>",r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>',r[r.length]="</a:gradFill>",r[r.length]="</a:bgFillStyleLst>",r[r.length]="</a:fmtScheme>",r[r.length]="</a:themeElements>",r[r.length]="<a:objectDefaults>",r[r.length]="<a:spDef>",r[r.length]='<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>',r[r.length]="</a:spDef>",r[r.length]="<a:lnDef>",r[r.length]='<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>',r[r.length]="</a:lnDef>",r[r.length]="</a:objectDefaults>",r[r.length]="<a:extraClrSchemeLst/>",r[r.length]="</a:theme>",r.join("")}function yb(e,t,r){var n=e.l+t,a=e.read_shift(4);if(a!==124226){if(!r.cellStyles){e.l=n;return}var i=e.slice(e.l);e.l=n;var s;try{s=Zu(i,{type:"array"})}catch{return}var o=kr(s,"theme/theme/theme1.xml",!0);if(o)return Md(o,r)}}function kb(e){return e.read_shift(4)}function Eb(e){var t={};switch(t.xclrType=e.read_shift(2),t.nTintShade=e.read_shift(2),t.xclrType){case 0:e.l+=4;break;case 1:t.xclrValue=bb(e,4);break;case 2:t.xclrValue=ld(e);break;case 3:t.xclrValue=kb(e);break;case 4:e.l+=4;break}return e.l+=8,t}function bb(e,t){return Kt(e,t)}function Sb(e,t){return Kt(e,t)}function Tb(e){var t=e.read_shift(2),r=e.read_shift(2)-4,n=[t];switch(t){case 4:case 5:case 7:case 8:case 9:case 10:case 11:case 13:n[1]=Eb(e);break;case 6:n[1]=Sb(e,r);break;case 14:case 15:n[1]=e.read_shift(r===1?1:2);break;default:throw new Error("Unrecognized ExtProp type: "+t+" "+r)}return n}function Fb(e,t){var r=e.l+t;e.l+=2;var n=e.read_shift(2);e.l+=2;for(var a=e.read_shift(2),i=[];a-- >0;)i.push(Tb(e,r-e.l));return{ixfe:n,ext:i}}function Cb(e,t){t.forEach(function(r){switch(r[0]){}})}function Ab(e,t){return{flags:e.read_shift(4),version:e.read_shift(4),name:Yt(e)}}function Db(e){var t=ne(12+2*e.name.length);return t.write_shift(4,e.flags),t.write_shift(4,e.version),Mt(e.name,t),t.slice(0,t.l)}function Rb(e){for(var t=[],r=e.read_shift(4);r-- >0;)t.push([e.read_shift(4),e.read_shift(4)]);return t}function Ob(e){var t=ne(4+8*e.length);t.write_shift(4,e.length);for(var r=0;r<e.length;++r)t.write_shift(4,e[r][0]),t.write_shift(4,e[r][1]);return t}function Bb(e,t){var r=ne(8+2*t.length);return r.write_shift(4,e),Mt(t,r),r.slice(0,r.l)}function Nb(e){return e.l+=4,e.read_shift(4)!=0}function Pb(e,t){var r=ne(8);return r.write_shift(4,e),r.write_shift(4,t?1:0),r}function Ib(e,t,r){var n={Types:[],Cell:[],Value:[]},a=r||{},i=[],s=!1,o=2;return Sn(e,function(c,f,u){switch(u){case 335:n.Types.push({name:c.name});break;case 51:c.forEach(function(h){o==1?n.Cell.push({type:n.Types[h[0]-1].name,index:h[1]}):o==0&&n.Value.push({type:n.Types[h[0]-1].name,index:h[1]})});break;case 337:o=c?1:0;break;case 338:o=2;break;case 35:i.push(u),s=!0;break;case 36:i.pop(),s=!1;break;default:if(!f.T){if(!s||a.WTF&&i[i.length-1]!=35)throw new Error("Unexpected record 0x"+u.toString(16))}}}),n}function Lb(){var e=ur();return fe(e,332),fe(e,334,zr(1)),fe(e,335,Db({name:"XLDAPR",version:12e4,flags:3496657072})),fe(e,336),fe(e,339,Bb(1,"XLDAPR")),fe(e,52),fe(e,35,zr(514)),fe(e,4096,zr(0)),fe(e,4097,Nr(1)),fe(e,36),fe(e,53),fe(e,340),fe(e,337,Pb(1,!0)),fe(e,51,Ob([[1,0]])),fe(e,338),fe(e,333),e.end()}function Mb(e,t,r){var n={Types:[],Cell:[],Value:[]};if(!e)return n;var a=!1,i=2,s;return e.replace(Xt,function(o){var c=Re(o);switch(an(c[0])){case"<?xml":break;case"<metadata":case"</metadata>":break;case"<metadataTypes":case"</metadataTypes>":break;case"<metadataType":n.Types.push({name:c.name});break;case"</metadataType>":break;case"<futureMetadata":for(var f=0;f<n.Types.length;++f)n.Types[f].name==c.name&&(s=n.Types[f]);break;case"</futureMetadata>":break;case"<bk>":break;case"</bk>":break;case"<rc":i==1?n.Cell.push({type:n.Types[c.t-1].name,index:+c.v}):i==0&&n.Value.push({type:n.Types[c.t-1].name,index:+c.v});break;case"</rc>":break;case"<cellMetadata":i=1;break;case"</cellMetadata>":i=2;break;case"<valueMetadata":i=0;break;case"</valueMetadata>":i=2;break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;case"<rvb":if(!s)break;s.offsets||(s.offsets=[]),s.offsets.push(+c.i);break;default:if(!a&&r.WTF)throw new Error("unrecognized "+c[0]+" in metadata")}return o}),n}function Vd(){var e=[_t];return e.push(`<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">
  <metadataTypes count="1">
    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>
  </metadataTypes>
  <futureMetadata name="XLDAPR" count="1">
    <bk>
      <extLst>
        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">
          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>
        </ext>
      </extLst>
    </bk>
  </futureMetadata>
  <cellMetadata count="1">
    <bk>
      <rc t="1" v="0"/>
    </bk>
  </cellMetadata>
</metadata>`),e.join("")}function Vb(e){var t=[];if(!e)return t;var r=1;return(e.match(Xt)||[]).forEach(function(n){var a=Re(n);switch(a[0]){case"<?xml":break;case"<calcChain":case"<calcChain>":case"</calcChain>":break;case"<c":delete a[0],a.i?r=a.i:a.i=r,t.push(a);break}}),t}function Ub(e){var t={};t.i=e.read_shift(4);var r={};r.r=e.read_shift(4),r.c=e.read_shift(4),t.r=Ce(r);var n=e.read_shift(1);return n&2&&(t.l="1"),n&8&&(t.a="1"),t}function $b(e,t,r){var n=[];return Sn(e,function(i,s,o){switch(o){case 63:n.push(i);break;default:if(!s.T)throw new Error("Unexpected record 0x"+o.toString(16))}}),n}function iD(){}function Wb(e,t,r,n){if(!e)return e;var a=n||{},i=!1;Sn(e,function(o,c,f){switch(f){case 359:case 363:case 364:case 366:case 367:case 368:case 369:case 370:case 371:case 472:case 577:case 578:case 579:case 580:case 581:case 582:case 583:case 584:case 585:case 586:case 587:break;case 35:i=!0;break;case 36:i=!1;break;default:if(!c.T){if(!i||a.WTF)throw new Error("Unexpected record 0x"+f.toString(16))}}},a)}function Hb(e,t){if(!e)return"??";var r=(e.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];return t["!id"][r].Target}var Qa=1024;function Ud(e,t){for(var r=[21600,21600],n=["m0,0l0",r[1],r[0],r[1],r[0],"0xe"].join(","),a=[pe("xml",null,{"xmlns:v":Er.v,"xmlns:o":Er.o,"xmlns:x":Er.x,"xmlns:mv":Er.mv}).replace(/\/>/,">"),pe("o:shapelayout",pe("o:idmap",null,{"v:ext":"edit",data:e}),{"v:ext":"edit"}),pe("v:shapetype",[pe("v:stroke",null,{joinstyle:"miter"}),pe("v:path",null,{gradientshapeok:"t","o:connecttype":"rect"})].join(""),{id:"_x0000_t202","o:spt":202,coordsize:r.join(","),path:n})];Qa<e*1e3;)Qa+=1e3;return t.forEach(function(i){var s=ht(i[0]),o={color2:"#BEFF82",type:"gradient"};o.type=="gradient"&&(o.angle="-180");var c=o.type=="gradient"?pe("o:fill",null,{type:"gradientUnscaled","v:ext":"view"}):null,f=pe("v:fill",c,o),u={on:"t",obscured:"t"};++Qa,a=a.concat(["<v:shape"+Wi({id:"_x0000_s"+Qa,type:"#_x0000_t202",style:"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10"+(i[1].hidden?";visibility:hidden":""),fillcolor:"#ECFAD4",strokecolor:"#edeaa1"})+">",f,pe("v:shadow",null,u),pe("v:path",null,{"o:connecttype":"none"}),'<v:textbox><div style="text-align:left"></div></v:textbox>','<x:ClientData ObjectType="Note">',"<x:MoveWithCells/>","<x:SizeWithCells/>",Wt("x:Anchor",[s.c+1,0,s.r+1,0,s.c+3,20,s.r+5,20].join(",")),Wt("x:AutoFill","False"),Wt("x:Row",String(s.r)),Wt("x:Column",String(s.c)),i[1].hidden?"":"<x:Visible/>","</x:ClientData>","</v:shape>"])}),a.push("</xml>"),a.join("")}function $d(e,t,r,n){var a=Array.isArray(e),i;t.forEach(function(s){var o=ht(s.ref);if(a?(e[o.r]||(e[o.r]=[]),i=e[o.r][o.c]):i=e[s.ref],!i){i={t:"z"},a?e[o.r][o.c]=i:e[s.ref]=i;var c=Ye(e["!ref"]||"BDWGO1000001:A1");c.s.r>o.r&&(c.s.r=o.r),c.e.r<o.r&&(c.e.r=o.r),c.s.c>o.c&&(c.s.c=o.c),c.e.c<o.c&&(c.e.c=o.c);var f=Me(c);f!==e["!ref"]&&(e["!ref"]=f)}i.c||(i.c=[]);var u={a:s.author,t:s.t,r:s.r,T:r};s.h&&(u.h=s.h);for(var h=i.c.length-1;h>=0;--h){if(!r&&i.c[h].T)return;r&&!i.c[h].T&&i.c.splice(h,1)}if(r&&n){for(h=0;h<n.length;++h)if(u.a==n[h].id){u.a=n[h].name||u.a;break}}i.c.push(u)})}function jb(e,t){if(e.match(/<(?:\w+:)?comments *\/>/))return[];var r=[],n=[],a=e.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);a&&a[1]&&a[1].split(/<\/\w*:?author>/).forEach(function(s){if(!(s===""||s.trim()==="")){var o=s.match(/<(?:\w+:)?author[^>]*>(.*)/);o&&r.push(o[1])}});var i=e.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);return i&&i[1]&&i[1].split(/<\/\w*:?comment>/).forEach(function(s){if(!(s===""||s.trim()==="")){var o=s.match(/<(?:\w+:)?comment[^>]*>/);if(o){var c=Re(o[0]),f={author:c.authorId&&r[c.authorId]||"sheetjsghost",ref:c.ref,guid:c.guid},u=ht(c.ref);if(!(t.sheetRows&&t.sheetRows<=u.r)){var h=s.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/),d=!!h&&!!h[1]&&lc(h[1])||{r:"",t:"",h:""};f.r=d.r,d.r=="<t></t>"&&(d.t=d.h=""),f.t=(d.t||"").replace(/\r\n/g,`
`).replace(/\r/g,`
`),t.cellHTML&&(f.h=d.h),n.push(f)}}}}),n}function Wd(e){var t=[_t,pe("comments",null,{xmlns:da[0]})],r=[];return t.push("<authors>"),e.forEach(function(n){n[1].forEach(function(a){var i=Qe(a.a);r.indexOf(i)==-1&&(r.push(i),t.push("<author>"+i+"</author>")),a.T&&a.ID&&r.indexOf("tc="+a.ID)==-1&&(r.push("tc="+a.ID),t.push("<author>tc="+a.ID+"</author>"))})}),r.length==0&&(r.push("SheetJ5"),t.push("<author>SheetJ5</author>")),t.push("</authors>"),t.push("<commentList>"),e.forEach(function(n){var a=0,i=[];if(n[1][0]&&n[1][0].T&&n[1][0].ID?a=r.indexOf("tc="+n[1][0].ID):n[1].forEach(function(c){c.a&&(a=r.indexOf(Qe(c.a))),i.push(c.t||"")}),t.push('<comment ref="'+n[0]+'" authorId="'+a+'"><text>'),i.length<=1)t.push(Wt("t",Qe(i[0]||"")));else{for(var s=`Comment:
    `+i[0]+`
`,o=1;o<i.length;++o)s+=`Reply:
    `+i[o]+`
`;t.push(Wt("t",Qe(s)))}t.push("</text></comment>")}),t.push("</commentList>"),t.length>2&&(t[t.length]="</comments>",t[1]=t[1].replace("/>",">")),t.join("")}function zb(e,t){var r=[],n=!1,a={},i=0;return e.replace(Xt,function(o,c){var f=Re(o);switch(an(f[0])){case"<?xml":break;case"<ThreadedComments":break;case"</ThreadedComments>":break;case"<threadedComment":a={author:f.personId,guid:f.id,ref:f.ref,T:1};break;case"</threadedComment>":a.t!=null&&r.push(a);break;case"<text>":case"<text":i=c+o.length;break;case"</text>":a.t=e.slice(i,c).replace(/\r\n/g,`
`).replace(/\r/g,`
`);break;case"<mentions":case"<mentions>":n=!0;break;case"</mentions>":n=!1;break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;default:if(!n&&t.WTF)throw new Error("unrecognized "+f[0]+" in threaded comments")}return o}),r}function Gb(e,t,r){var n=[_t,pe("ThreadedComments",null,{xmlns:Bt.TCMNT}).replace(/[\/]>/,">")];return e.forEach(function(a){var i="";(a[1]||[]).forEach(function(s,o){if(!s.T){delete s.ID;return}s.a&&t.indexOf(s.a)==-1&&t.push(s.a);var c={ref:a[0],id:"{54EE7951-7262-4200-6969-"+("000000000000"+r.tcid++).slice(-12)+"}"};o==0?i=c.id:c.parentId=i,s.ID=c.id,s.a&&(c.personId="{54EE7950-7262-4200-6969-"+("000000000000"+t.indexOf(s.a)).slice(-12)+"}"),n.push(pe("threadedComment",Wt("text",s.t||""),c))})}),n.push("</ThreadedComments>"),n.join("")}function Xb(e,t){var r=[],n=!1;return e.replace(Xt,function(i){var s=Re(i);switch(an(s[0])){case"<?xml":break;case"<personList":break;case"</personList>":break;case"<person":r.push({name:s.displayname,id:s.id});break;case"</person>":break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;default:if(!n&&t.WTF)throw new Error("unrecognized "+s[0]+" in threaded comments")}return i}),r}function Kb(e){var t=[_t,pe("personList",null,{xmlns:Bt.TCMNT,"xmlns:x":da[0]}).replace(/[\/]>/,">")];return e.forEach(function(r,n){t.push(pe("person",null,{displayName:r,id:"{54EE7950-7262-4200-6969-"+("000000000000"+n).slice(-12)+"}",userId:r,providerId:"None"}))}),t.push("</personList>"),t.join("")}function Yb(e){var t={};t.iauthor=e.read_shift(4);var r=va(e);return t.rfx=r.s,t.ref=Ce(r.s),e.l+=16,t}function qb(e,t){return t==null&&(t=ne(36)),t.write_shift(4,e[1].iauthor),Ya(e[0],t),t.write_shift(4,0),t.write_shift(4,0),t.write_shift(4,0),t.write_shift(4,0),t}var Jb=Yt;function Zb(e){return Mt(e.slice(0,54))}function Qb(e,t){var r=[],n=[],a={},i=!1;return Sn(e,function(o,c,f){switch(f){case 632:n.push(o);break;case 635:a=o;break;case 637:a.t=o.t,a.h=o.h,a.r=o.r;break;case 636:if(a.author=n[a.iauthor],delete a.iauthor,t.sheetRows&&a.rfx&&t.sheetRows<=a.rfx.r)break;a.t||(a.t=""),delete a.rfx,r.push(a);break;case 3072:break;case 35:i=!0;break;case 36:i=!1;break;case 37:break;case 38:break;default:if(!c.T){if(!i||t.WTF)throw new Error("Unexpected record 0x"+f.toString(16))}}}),r}function eS(e){var t=ur(),r=[];return fe(t,628),fe(t,630),e.forEach(function(n){n[1].forEach(function(a){r.indexOf(a.a)>-1||(r.push(a.a.slice(0,54)),fe(t,632,Zb(a.a)))})}),fe(t,631),fe(t,633),e.forEach(function(n){n[1].forEach(function(a){a.iauthor=r.indexOf(a.a);var i={s:ht(n[0]),e:ht(n[0])};fe(t,635,qb([i,a])),a.t&&a.t.length>0&&fe(t,637,k_(a)),fe(t,636),delete a.iauthor})}),fe(t,634),fe(t,629),t.end()}var tS="application/vnd.ms-office.vbaProject";function rS(e){var t=Ee.utils.cfb_new({root:"R"});return e.FullPaths.forEach(function(r,n){if(!(r.slice(-1)==="/"||!r.match(/_VBA_PROJECT_CUR/))){var a=r.replace(/^[^\/]*/,"R").replace(/\/_VBA_PROJECT_CUR\u0000*/,"");Ee.utils.cfb_add(t,a,e.FileIndex[n].content)}}),Ee.write(t)}function nS(e,t){t.FullPaths.forEach(function(r,n){if(n!=0){var a=r.replace(/[^\/]*[\/]/,"/_VBA_PROJECT_CUR/");a.slice(-1)!=="/"&&Ee.utils.cfb_add(e,a,t.FileIndex[n].content)}})}var Hd=["xlsb","xlsm","xlam","biff8","xla"];function aS(){return{"!type":"dialog"}}function iS(){return{"!type":"dialog"}}function sS(){return{"!type":"macro"}}function oS(){return{"!type":"macro"}}var ei=function(){var e=/(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g,t={r:0,c:0};function r(n,a,i,s){var o=!1,c=!1;i.length==0?c=!0:i.charAt(0)=="["&&(c=!0,i=i.slice(1,-1)),s.length==0?o=!0:s.charAt(0)=="["&&(o=!0,s=s.slice(1,-1));var f=i.length>0?parseInt(i,10)|0:0,u=s.length>0?parseInt(s,10)|0:0;return o?u+=t.c:--u,c?f+=t.r:--f,a+(o?"":"$")+ut(u)+(c?"":"$")+yt(f)}return function(a,i){return t=i,a.replace(e,r)}}(),mc=/(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g,pc=function(){return function(t,r){return t.replace(mc,function(n,a,i,s,o,c){var f=jl(s)-(i?0:r.c),u=Hl(c)-(o?0:r.r),h=u==0?"":o?u+1:"["+u+"]",d=f==0?"":i?f+1:"["+f+"]";return a+"R"+h+"C"+d})}}();function jd(e,t){return e.replace(mc,function(r,n,a,i,s,o){return n+(a=="$"?a+i:ut(jl(i)+t.c))+(s=="$"?s+o:yt(Hl(o)+t.r))})}function lS(e,t,r){var n=hr(t),a=n.s,i=ht(r),s={r:i.r-a.r,c:i.c-a.c};return jd(e,s)}function cS(e){return e.length!=1}function zd(e){return e.replace(/_xlfn\./g,"")}function Ct(e){e.l+=1}function Zn(e,t){var r=e.read_shift(t==1?1:2);return[r&16383,r>>14&1,r>>15&1]}function Gd(e,t,r){var n=2;if(r){if(r.biff>=2&&r.biff<=5)return Xd(e);r.biff==12&&(n=4)}var a=e.read_shift(n),i=e.read_shift(n),s=Zn(e,2),o=Zn(e,2);return{s:{r:a,c:s[0],cRel:s[1],rRel:s[2]},e:{r:i,c:o[0],cRel:o[1],rRel:o[2]}}}function Xd(e){var t=Zn(e,2),r=Zn(e,2),n=e.read_shift(1),a=e.read_shift(1);return{s:{r:t[0],c:n,cRel:t[1],rRel:t[2]},e:{r:r[0],c:a,cRel:r[1],rRel:r[2]}}}function fS(e,t,r){if(r.biff<8)return Xd(e);var n=e.read_shift(r.biff==12?4:2),a=e.read_shift(r.biff==12?4:2),i=Zn(e,2),s=Zn(e,2);return{s:{r:n,c:i[0],cRel:i[1],rRel:i[2]},e:{r:a,c:s[0],cRel:s[1],rRel:s[2]}}}function Kd(e,t,r){if(r&&r.biff>=2&&r.biff<=5)return uS(e);var n=e.read_shift(r&&r.biff==12?4:2),a=Zn(e,2);return{r:n,c:a[0],cRel:a[1],rRel:a[2]}}function uS(e){var t=Zn(e,2),r=e.read_shift(1);return{r:t[0],c:r,cRel:t[1],rRel:t[2]}}function hS(e){var t=e.read_shift(2),r=e.read_shift(2);return{r:t,c:r&255,fQuoted:!!(r&16384),cRel:r>>15,rRel:r>>15}}function dS(e,t,r){var n=r&&r.biff?r.biff:8;if(n>=2&&n<=5)return mS(e);var a=e.read_shift(n>=12?4:2),i=e.read_shift(2),s=(i&16384)>>14,o=(i&32768)>>15;if(i&=16383,o==1)for(;a>524287;)a-=1048576;if(s==1)for(;i>8191;)i=i-16384;return{r:a,c:i,cRel:s,rRel:o}}function mS(e){var t=e.read_shift(2),r=e.read_shift(1),n=(t&32768)>>15,a=(t&16384)>>14;return t&=16383,n==1&&t>=8192&&(t=t-16384),a==1&&r>=128&&(r=r-256),{r:t,c:r,cRel:a,rRel:n}}function pS(e,t,r){var n=(e[e.l++]&96)>>5,a=Gd(e,r.biff>=2&&r.biff<=5?6:8,r);return[n,a]}function gS(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2,"i"),i=8;if(r)switch(r.biff){case 5:e.l+=12,i=6;break;case 12:i=12;break}var s=Gd(e,i,r);return[n,a,s]}function xS(e,t,r){var n=(e[e.l++]&96)>>5;return e.l+=r&&r.biff>8?12:r.biff<8?6:8,[n]}function vS(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2),i=8;if(r)switch(r.biff){case 5:e.l+=12,i=6;break;case 12:i=12;break}return e.l+=i,[n,a]}function wS(e,t,r){var n=(e[e.l++]&96)>>5,a=fS(e,t-1,r);return[n,a]}function _S(e,t,r){var n=(e[e.l++]&96)>>5;return e.l+=r.biff==2?6:r.biff==12?14:7,[n]}function Yd(e){var t=e[e.l+1]&1,r=1;return e.l+=4,[t,r]}function yS(e,t,r){e.l+=2;for(var n=e.read_shift(r&&r.biff==2?1:2),a=[],i=0;i<=n;++i)a.push(e.read_shift(r&&r.biff==2?1:2));return a}function kS(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=2,[n,e.read_shift(r&&r.biff==2?1:2)]}function ES(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=2,[n,e.read_shift(r&&r.biff==2?1:2)]}function bS(e){var t=e[e.l+1]&255?1:0;return e.l+=2,[t,e.read_shift(2)]}function SS(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=r&&r.biff==2?3:4,[n]}function qd(e){var t=e.read_shift(1),r=e.read_shift(1);return[t,r]}function TS(e){return e.read_shift(2),qd(e)}function FS(e){return e.read_shift(2),qd(e)}function CS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=Kd(e,0,r);return[n,a]}function AS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=dS(e,0,r);return[n,a]}function DS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=e.read_shift(2);r&&r.biff==5&&(e.l+=12);var i=Kd(e,0,r);return[n,a,i]}function RS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=e.read_shift(r&&r.biff<=3?1:2);return[NT[a],tm[a],n]}function OS(e,t,r){var n=e[e.l++],a=e.read_shift(1),i=r&&r.biff<=3?[n==88?-1:0,e.read_shift(1)]:BS(e);return[a,(i[0]===0?tm:BT)[i[1]]]}function BS(e){return[e[e.l+1]>>7,e.read_shift(2)&32767]}function NS(e,t,r){e.l+=r&&r.biff==2?3:4}function PS(e,t,r){if(e.l++,r&&r.biff==12)return[e.read_shift(4,"i"),0];var n=e.read_shift(2),a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function IS(e){return e.l++,Fn[e.read_shift(1)]}function LS(e){return e.l++,e.read_shift(2)}function MS(e){return e.l++,e.read_shift(1)!==0}function VS(e){return e.l++,qt(e)}function US(e,t,r){return e.l++,qi(e,t-1,r)}function $S(e,t){var r=[e.read_shift(1)];if(t==12)switch(r[0]){case 2:r[0]=4;break;case 4:r[0]=16;break;case 0:r[0]=1;break;case 1:r[0]=2;break}switch(r[0]){case 4:r[1]=kt(e,1)?"TRUE":"FALSE",t!=12&&(e.l+=7);break;case 37:case 16:r[1]=Fn[e[e.l]],e.l+=t==12?4:8;break;case 0:e.l+=8;break;case 1:r[1]=qt(e);break;case 2:r[1]=Ea(e,0,{biff:t>0&&t<8?2:t});break;default:throw new Error("Bad SerAr: "+r[0])}return r}function WS(e,t,r){for(var n=e.read_shift(r.biff==12?4:2),a=[],i=0;i!=n;++i)a.push((r.biff==12?va:vo)(e));return a}function HS(e,t,r){var n=0,a=0;r.biff==12?(n=e.read_shift(4),a=e.read_shift(4)):(a=1+e.read_shift(1),n=1+e.read_shift(2)),r.biff>=2&&r.biff<8&&(--n,--a==0&&(a=256));for(var i=0,s=[];i!=n&&(s[i]=[]);++i)for(var o=0;o!=a;++o)s[i][o]=$S(e,r.biff);return s}function jS(e,t,r){var n=e.read_shift(1)>>>5&3,a=!r||r.biff>=8?4:2,i=e.read_shift(a);switch(r.biff){case 2:e.l+=5;break;case 3:case 4:e.l+=8;break;case 5:e.l+=12;break}return[n,0,i]}function zS(e,t,r){if(r.biff==5)return GS(e);var n=e.read_shift(1)>>>5&3,a=e.read_shift(2),i=e.read_shift(4);return[n,a,i]}function GS(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2,"i");e.l+=8;var n=e.read_shift(2);return e.l+=12,[t,r,n]}function XS(e,t,r){var n=e.read_shift(1)>>>5&3;e.l+=r&&r.biff==2?3:4;var a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function KS(e,t,r){var n=e.read_shift(1)>>>5&3,a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function YS(e,t,r){var n=e.read_shift(1)>>>5&3;return e.l+=4,r.biff<8&&e.l--,r.biff==12&&(e.l+=2),[n]}function qS(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2),i=4;if(r)switch(r.biff){case 5:i=15;break;case 12:i=6;break}return e.l+=i,[n,a]}var JS=Kt,ZS=Kt,QS=Kt;function ns(e,t,r){return e.l+=2,[hS(e)]}function gc(e){return e.l+=6,[]}var eT=ns,tT=gc,rT=gc,nT=ns;function Jd(e){return e.l+=2,[Ft(e),e.read_shift(2)&1]}var aT=ns,iT=Jd,sT=gc,oT=ns,lT=ns,cT=["Data","All","Headers","??","?Data2","??","?DataHeaders","??","Totals","??","??","??","?DataTotals","??","??","??","?Current"];function fT(e){e.l+=2;var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(4),a=e.read_shift(2),i=e.read_shift(2),s=cT[r>>2&31];return{ixti:t,coltype:r&3,rt:s,idx:n,c:a,C:i}}function uT(e){return e.l+=2,[e.read_shift(4)]}function hT(e,t,r){return e.l+=5,e.l+=2,e.l+=r.biff==2?1:4,["PTGSHEET"]}function dT(e,t,r){return e.l+=r.biff==2?4:5,["PTGENDSHEET"]}function mT(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2);return[t,r]}function pT(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2);return[t,r]}function gT(e){return e.l+=4,[0,0]}var Zd={1:{n:"PtgExp",f:PS},2:{n:"PtgTbl",f:QS},3:{n:"PtgAdd",f:Ct},4:{n:"PtgSub",f:Ct},5:{n:"PtgMul",f:Ct},6:{n:"PtgDiv",f:Ct},7:{n:"PtgPower",f:Ct},8:{n:"PtgConcat",f:Ct},9:{n:"PtgLt",f:Ct},10:{n:"PtgLe",f:Ct},11:{n:"PtgEq",f:Ct},12:{n:"PtgGe",f:Ct},13:{n:"PtgGt",f:Ct},14:{n:"PtgNe",f:Ct},15:{n:"PtgIsect",f:Ct},16:{n:"PtgUnion",f:Ct},17:{n:"PtgRange",f:Ct},18:{n:"PtgUplus",f:Ct},19:{n:"PtgUminus",f:Ct},20:{n:"PtgPercent",f:Ct},21:{n:"PtgParen",f:Ct},22:{n:"PtgMissArg",f:Ct},23:{n:"PtgStr",f:US},26:{n:"PtgSheet",f:hT},27:{n:"PtgEndSheet",f:dT},28:{n:"PtgErr",f:IS},29:{n:"PtgBool",f:MS},30:{n:"PtgInt",f:LS},31:{n:"PtgNum",f:VS},32:{n:"PtgArray",f:_S},33:{n:"PtgFunc",f:RS},34:{n:"PtgFuncVar",f:OS},35:{n:"PtgName",f:jS},36:{n:"PtgRef",f:CS},37:{n:"PtgArea",f:pS},38:{n:"PtgMemArea",f:XS},39:{n:"PtgMemErr",f:JS},40:{n:"PtgMemNoMem",f:ZS},41:{n:"PtgMemFunc",f:KS},42:{n:"PtgRefErr",f:YS},43:{n:"PtgAreaErr",f:xS},44:{n:"PtgRefN",f:AS},45:{n:"PtgAreaN",f:wS},46:{n:"PtgMemAreaN",f:mT},47:{n:"PtgMemNoMemN",f:pT},57:{n:"PtgNameX",f:zS},58:{n:"PtgRef3d",f:DS},59:{n:"PtgArea3d",f:gS},60:{n:"PtgRefErr3d",f:qS},61:{n:"PtgAreaErr3d",f:vS},255:{}},xT={64:32,96:32,65:33,97:33,66:34,98:34,67:35,99:35,68:36,100:36,69:37,101:37,70:38,102:38,71:39,103:39,72:40,104:40,73:41,105:41,74:42,106:42,75:43,107:43,76:44,108:44,77:45,109:45,78:46,110:46,79:47,111:47,88:34,120:34,89:57,121:57,90:58,122:58,91:59,123:59,92:60,124:60,93:61,125:61},vT={1:{n:"PtgElfLel",f:Jd},2:{n:"PtgElfRw",f:oT},3:{n:"PtgElfCol",f:eT},6:{n:"PtgElfRwV",f:lT},7:{n:"PtgElfColV",f:nT},10:{n:"PtgElfRadical",f:aT},11:{n:"PtgElfRadicalS",f:sT},13:{n:"PtgElfColS",f:tT},15:{n:"PtgElfColSV",f:rT},16:{n:"PtgElfRadicalLel",f:iT},25:{n:"PtgList",f:fT},29:{n:"PtgSxName",f:uT},255:{}},wT={0:{n:"PtgAttrNoop",f:gT},1:{n:"PtgAttrSemi",f:SS},2:{n:"PtgAttrIf",f:ES},4:{n:"PtgAttrChoose",f:yS},8:{n:"PtgAttrGoto",f:kS},16:{n:"PtgAttrSum",f:NS},32:{n:"PtgAttrBaxcel",f:Yd},33:{n:"PtgAttrBaxcel",f:Yd},64:{n:"PtgAttrSpace",f:TS},65:{n:"PtgAttrSpaceSemi",f:FS},128:{n:"PtgAttrIfError",f:bS},255:{}};function as(e,t,r,n){if(n.biff<8)return Kt(e,t);for(var a=e.l+t,i=[],s=0;s!==r.length;++s)switch(r[s][0]){case"PtgArray":r[s][1]=HS(e,0,n),i.push(r[s][1]);break;case"PtgMemArea":r[s][2]=WS(e,r[s][1],n),i.push(r[s][2]);break;case"PtgExp":n&&n.biff==12&&(r[s][1][1]=e.read_shift(4),i.push(r[s][1]));break;case"PtgList":case"PtgElfRadicalS":case"PtgElfColS":case"PtgElfColSV":throw"Unsupported "+r[s][0]}return t=a-e.l,t!==0&&i.push(Kt(e,t)),i}function is(e,t,r){for(var n=e.l+t,a,i,s=[];n!=e.l;)t=n-e.l,i=e[e.l],a=Zd[i]||Zd[xT[i]],(i===24||i===25)&&(a=(i===24?vT:wT)[e[e.l+1]]),!a||!a.f?Kt(e,t):s.push([a.n,a.f(e,t,r)]);return s}function _T(e){for(var t=[],r=0;r<e.length;++r){for(var n=e[r],a=[],i=0;i<n.length;++i){var s=n[i];if(s)switch(s[0]){case 2:a.push('"'+s[1].replace(/"/g,'""')+'"');break;default:a.push(s[1])}else a.push("")}t.push(a.join(","))}return t.join(";")}var yT={PtgAdd:"+",PtgConcat:"&",PtgDiv:"/",PtgEq:"=",PtgGe:">=",PtgGt:">",PtgLe:"<=",PtgLt:"<",PtgMul:"*",PtgNe:"<>",PtgPower:"^",PtgSub:"-"};function kT(e,t){if(!e&&!(t&&t.biff<=5&&t.biff>=2))throw new Error("empty sheet name");return/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(e)?"'"+e+"'":e}function Qd(e,t,r){if(!e)return"SH33TJSERR0";if(r.biff>8&&(!e.XTI||!e.XTI[t]))return e.SheetNames[t];if(!e.XTI)return"SH33TJSERR6";var n=e.XTI[t];if(r.biff<8)return t>1e4&&(t-=65536),t<0&&(t=-t),t==0?"":e.XTI[t-1];if(!n)return"SH33TJSERR1";var a="";if(r.biff>8)switch(e[n[0]][0]){case 357:return a=n[1]==-1?"#REF":e.SheetNames[n[1]],n[1]==n[2]?a:a+":"+e.SheetNames[n[2]];case 358:return r.SID!=null?e.SheetNames[r.SID]:"SH33TJSSAME"+e[n[0]][0];case 355:default:return"SH33TJSSRC"+e[n[0]][0]}switch(e[n[0]][0][0]){case 1025:return a=n[1]==-1?"#REF":e.SheetNames[n[1]]||"SH33TJSERR3",n[1]==n[2]?a:a+":"+e.SheetNames[n[2]];case 14849:return e[n[0]].slice(1).map(function(i){return i.Name}).join(";;");default:return e[n[0]][0][3]?(a=n[1]==-1?"#REF":e[n[0]][0][3][n[1]]||"SH33TJSERR4",n[1]==n[2]?a:a+":"+e[n[0]][0][3][n[2]]):"SH33TJSERR2"}}function em(e,t,r){var n=Qd(e,t,r);return n=="#REF"?n:kT(n,r)}function Qt(e,t,r,n,a){var i=a&&a.biff||8,s={s:{c:0,r:0},e:{c:0,r:0}},o=[],c,f,u,h=0,d=0,p,g="";if(!e[0]||!e[0][0])return"";for(var m=-1,x="",v=0,k=e[0].length;v<k;++v){var w=e[0][v];switch(w[0]){case"PtgUminus":o.push("-"+o.pop());break;case"PtgUplus":o.push("+"+o.pop());break;case"PtgPercent":o.push(o.pop()+"%");break;case"PtgAdd":case"PtgConcat":case"PtgDiv":case"PtgEq":case"PtgGe":case"PtgGt":case"PtgLe":case"PtgLt":case"PtgMul":case"PtgNe":case"PtgPower":case"PtgSub":if(c=o.pop(),f=o.pop(),m>=0){switch(e[0][m][1][0]){case 0:x=vt(" ",e[0][m][1][1]);break;case 1:x=vt("\r",e[0][m][1][1]);break;default:if(x="",a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+e[0][m][1][0])}f=f+x,m=-1}o.push(f+yT[w[0]]+c);break;case"PtgIsect":c=o.pop(),f=o.pop(),o.push(f+" "+c);break;case"PtgUnion":c=o.pop(),f=o.pop(),o.push(f+","+c);break;case"PtgRange":c=o.pop(),f=o.pop(),o.push(f+":"+c);break;case"PtgAttrChoose":break;case"PtgAttrGoto":break;case"PtgAttrIf":break;case"PtgAttrIfError":break;case"PtgRef":u=Gi(w[1][1],s,a),o.push(Xi(u,i));break;case"PtgRefN":u=r?Gi(w[1][1],r,a):w[1][1],o.push(Xi(u,i));break;case"PtgRef3d":h=w[1][1],u=Gi(w[1][2],s,a),g=em(n,h,a),o.push(g+"!"+Xi(u,i));break;case"PtgFunc":case"PtgFuncVar":var S=w[1][0],b=w[1][1];S||(S=0),S&=127;var T=S==0?[]:o.slice(-S);o.length-=S,b==="User"&&(b=T.shift()),o.push(b+"("+T.join(",")+")");break;case"PtgBool":o.push(w[1]?"TRUE":"FALSE");break;case"PtgInt":o.push(w[1]);break;case"PtgNum":o.push(String(w[1]));break;case"PtgStr":o.push('"'+w[1].replace(/"/g,'""')+'"');break;case"PtgErr":o.push(w[1]);break;case"PtgAreaN":p=Fh(w[1][1],r?{s:r}:s,a),o.push(Wl(p,a));break;case"PtgArea":p=Fh(w[1][1],s,a),o.push(Wl(p,a));break;case"PtgArea3d":h=w[1][1],p=w[1][2],g=em(n,h,a),o.push(g+"!"+Wl(p,a));break;case"PtgAttrSum":o.push("SUM("+o.pop()+")");break;case"PtgAttrBaxcel":case"PtgAttrSemi":break;case"PtgName":d=w[1][2];var y=(n.names||[])[d-1]||(n[0]||[])[d],O=y?y.Name:"SH33TJSNAME"+String(d);O&&O.slice(0,6)=="_xlfn."&&!a.xlfn&&(O=O.slice(6)),o.push(O);break;case"PtgNameX":var B=w[1][1];d=w[1][2];var H;if(a.biff<=5)B<0&&(B=-B),n[B]&&(H=n[B][d]);else{var j="";if(((n[B]||[])[0]||[])[0]==14849||(((n[B]||[])[0]||[])[0]==1025?n[B][d]&&n[B][d].itab>0&&(j=n.SheetNames[n[B][d].itab-1]+"!"):j=n.SheetNames[d-1]+"!"),n[B]&&n[B][d])j+=n[B][d].Name;else if(n[0]&&n[0][d])j+=n[0][d].Name;else{var I=(Qd(n,B,a)||"").split(";;");I[d-1]?j=I[d-1]:j+="SH33TJSERRX"}o.push(j);break}H||(H={Name:"SH33TJSERRY"}),o.push(H.Name);break;case"PtgParen":var X="(",q=")";if(m>=0){switch(x="",e[0][m][1][0]){case 2:X=vt(" ",e[0][m][1][1])+X;break;case 3:X=vt("\r",e[0][m][1][1])+X;break;case 4:q=vt(" ",e[0][m][1][1])+q;break;case 5:q=vt("\r",e[0][m][1][1])+q;break;default:if(a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+e[0][m][1][0])}m=-1}o.push(X+o.pop()+q);break;case"PtgRefErr":o.push("#REF!");break;case"PtgRefErr3d":o.push("#REF!");break;case"PtgExp":u={c:w[1][1],r:w[1][0]};var te={c:r.c,r:r.r};if(n.sharedf[Ce(u)]){var ae=n.sharedf[Ce(u)];o.push(Qt(ae,s,te,n,a))}else{var oe=!1;for(c=0;c!=n.arrayf.length;++c)if(f=n.arrayf[c],!(u.c<f[0].s.c||u.c>f[0].e.c)&&!(u.r<f[0].s.r||u.r>f[0].e.r)){o.push(Qt(f[1],s,te,n,a)),oe=!0;break}oe||o.push(w[1])}break;case"PtgArray":o.push("{"+_T(w[1])+"}");break;case"PtgMemArea":break;case"PtgAttrSpace":case"PtgAttrSpaceSemi":m=v;break;case"PtgTbl":break;case"PtgMemErr":break;case"PtgMissArg":o.push("");break;case"PtgAreaErr":o.push("#REF!");break;case"PtgAreaErr3d":o.push("#REF!");break;case"PtgList":o.push("Table"+w[1].idx+"[#"+w[1].rt+"]");break;case"PtgMemAreaN":case"PtgMemNoMemN":case"PtgAttrNoop":case"PtgSheet":case"PtgEndSheet":break;case"PtgMemFunc":break;case"PtgMemNoMem":break;case"PtgElfCol":case"PtgElfColS":case"PtgElfColSV":case"PtgElfColV":case"PtgElfLel":case"PtgElfRadical":case"PtgElfRadicalLel":case"PtgElfRadicalS":case"PtgElfRw":case"PtgElfRwV":throw new Error("Unsupported ELFs");case"PtgSxName":throw new Error("Unrecognized Formula Token: "+String(w));default:throw new Error("Unrecognized Formula Token: "+String(w))}var ue=["PtgAttrSpace","PtgAttrSpaceSemi","PtgAttrGoto"];if(a.biff!=3&&m>=0&&ue.indexOf(e[0][v][0])==-1){w=e[0][m];var z=!0;switch(w[1][0]){case 4:z=!1;case 0:x=vt(" ",w[1][1]);break;case 5:z=!1;case 1:x=vt("\r",w[1][1]);break;default:if(x="",a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+w[1][0])}o.push((z?x:"")+o.pop()+(z?"":x)),m=-1}}if(o.length>1&&a.WTF)throw new Error("bad formula stack");return o[0]}function ET(e,t,r){var n=e.l+t,a=r.biff==2?1:2,i,s=e.read_shift(a);if(s==65535)return[[],Kt(e,t-2)];var o=is(e,s,r);return t!==s+a&&(i=as(e,t-s-a,o,r)),e.l=n,[o,i]}function bT(e,t,r){var n=e.l+t,a=r.biff==2?1:2,i,s=e.read_shift(a);if(s==65535)return[[],Kt(e,t-2)];var o=is(e,s,r);return t!==s+a&&(i=as(e,t-s-a,o,r)),e.l=n,[o,i]}function ST(e,t,r,n){var a=e.l+t,i=is(e,n,r),s;return a!==e.l&&(s=as(e,a-e.l,i,r)),[i,s]}function TT(e,t,r){var n=e.l+t,a,i=e.read_shift(2),s=is(e,i,r);return i==65535?[[],Kt(e,t-2)]:(t!==i+2&&(a=as(e,n-i-2,s,r)),[s,a])}function FT(e){var t;if(bn(e,e.l+6)!==65535)return[qt(e),"n"];switch(e[e.l]){case 0:return e.l+=8,["String","s"];case 1:return t=e[e.l+2]===1,e.l+=8,[t,"b"];case 2:return t=e[e.l+2],e.l+=8,[t,"e"];case 3:return e.l+=8,["","s"]}return[]}function CT(e){if(e==null){var t=ne(8);return t.write_shift(1,3),t.write_shift(1,0),t.write_shift(2,0),t.write_shift(2,0),t.write_shift(2,65535),t}else if(typeof e=="number")return wa(e);return wa(0)}function xc(e,t,r){var n=e.l+t,a=on(e);r.biff==2&&++e.l;var i=FT(e),s=e.read_shift(1);r.biff!=2&&(e.read_shift(1),r.biff>=5&&e.read_shift(4));var o=bT(e,n-e.l,r);return{cell:a,val:i[0],formula:o,shared:s>>3&1,tt:i[1]}}function AT(e,t,r,n,a){var i=ba(t,r,a),s=CT(e.v),o=ne(6),c=33;o.write_shift(2,c),o.write_shift(4,0);for(var f=ne(e.bf.length),u=0;u<e.bf.length;++u)f[u]=e.bf[u];var h=Lt([i,s,o,f]);return h}function bo(e,t,r){var n=e.read_shift(4),a=is(e,n,r),i=e.read_shift(4),s=i>0?as(e,i,a,r):null;return[a,s]}var DT=bo,So=bo,RT=bo,OT=bo,BT={0:"BEEP",1:"OPEN",2:"OPEN.LINKS",3:"CLOSE.ALL",4:"SAVE",5:"SAVE.AS",6:"FILE.DELETE",7:"PAGE.SETUP",8:"PRINT",9:"PRINTER.SETUP",10:"QUIT",11:"NEW.WINDOW",12:"ARRANGE.ALL",13:"WINDOW.SIZE",14:"WINDOW.MOVE",15:"FULL",16:"CLOSE",17:"RUN",22:"SET.PRINT.AREA",23:"SET.PRINT.TITLES",24:"SET.PAGE.BREAK",25:"REMOVE.PAGE.BREAK",26:"FONT",27:"DISPLAY",28:"PROTECT.DOCUMENT",29:"PRECISION",30:"A1.R1C1",31:"CALCULATE.NOW",32:"CALCULATION",34:"DATA.FIND",35:"EXTRACT",36:"DATA.DELETE",37:"SET.DATABASE",38:"SET.CRITERIA",39:"SORT",40:"DATA.SERIES",41:"TABLE",42:"FORMAT.NUMBER",43:"ALIGNMENT",44:"STYLE",45:"BORDER",46:"CELL.PROTECTION",47:"COLUMN.WIDTH",48:"UNDO",49:"CUT",50:"COPY",51:"PASTE",52:"CLEAR",53:"PASTE.SPECIAL",54:"EDIT.DELETE",55:"INSERT",56:"FILL.RIGHT",57:"FILL.DOWN",61:"DEFINE.NAME",62:"CREATE.NAMES",63:"FORMULA.GOTO",64:"FORMULA.FIND",65:"SELECT.LAST.CELL",66:"SHOW.ACTIVE.CELL",67:"GALLERY.AREA",68:"GALLERY.BAR",69:"GALLERY.COLUMN",70:"GALLERY.LINE",71:"GALLERY.PIE",72:"GALLERY.SCATTER",73:"COMBINATION",74:"PREFERRED",75:"ADD.OVERLAY",76:"GRIDLINES",77:"SET.PREFERRED",78:"AXES",79:"LEGEND",80:"ATTACH.TEXT",81:"ADD.ARROW",82:"SELECT.CHART",83:"SELECT.PLOT.AREA",84:"PATTERNS",85:"MAIN.CHART",86:"OVERLAY",87:"SCALE",88:"FORMAT.LEGEND",89:"FORMAT.TEXT",90:"EDIT.REPEAT",91:"PARSE",92:"JUSTIFY",93:"HIDE",94:"UNHIDE",95:"WORKSPACE",96:"FORMULA",97:"FORMULA.FILL",98:"FORMULA.ARRAY",99:"DATA.FIND.NEXT",100:"DATA.FIND.PREV",101:"FORMULA.FIND.NEXT",102:"FORMULA.FIND.PREV",103:"ACTIVATE",104:"ACTIVATE.NEXT",105:"ACTIVATE.PREV",106:"UNLOCKED.NEXT",107:"UNLOCKED.PREV",108:"COPY.PICTURE",109:"SELECT",110:"DELETE.NAME",111:"DELETE.FORMAT",112:"VLINE",113:"HLINE",114:"VPAGE",115:"HPAGE",116:"VSCROLL",117:"HSCROLL",118:"ALERT",119:"NEW",120:"CANCEL.COPY",121:"SHOW.CLIPBOARD",122:"MESSAGE",124:"PASTE.LINK",125:"APP.ACTIVATE",126:"DELETE.ARROW",127:"ROW.HEIGHT",128:"FORMAT.MOVE",129:"FORMAT.SIZE",130:"FORMULA.REPLACE",131:"SEND.KEYS",132:"SELECT.SPECIAL",133:"APPLY.NAMES",134:"REPLACE.FONT",135:"FREEZE.PANES",136:"SHOW.INFO",137:"SPLIT",138:"ON.WINDOW",139:"ON.DATA",140:"DISABLE.INPUT",142:"OUTLINE",143:"LIST.NAMES",144:"FILE.CLOSE",145:"SAVE.WORKBOOK",146:"DATA.FORM",147:"COPY.CHART",148:"ON.TIME",149:"WAIT",150:"FORMAT.FONT",151:"FILL.UP",152:"FILL.LEFT",153:"DELETE.OVERLAY",155:"SHORT.MENUS",159:"SET.UPDATE.STATUS",161:"COLOR.PALETTE",162:"DELETE.STYLE",163:"WINDOW.RESTORE",164:"WINDOW.MAXIMIZE",166:"CHANGE.LINK",167:"CALCULATE.DOCUMENT",168:"ON.KEY",169:"APP.RESTORE",170:"APP.MOVE",171:"APP.SIZE",172:"APP.MINIMIZE",173:"APP.MAXIMIZE",174:"BRING.TO.FRONT",175:"SEND.TO.BACK",185:"MAIN.CHART.TYPE",186:"OVERLAY.CHART.TYPE",187:"SELECT.END",188:"OPEN.MAIL",189:"SEND.MAIL",190:"STANDARD.FONT",191:"CONSOLIDATE",192:"SORT.SPECIAL",193:"GALLERY.3D.AREA",194:"GALLERY.3D.COLUMN",195:"GALLERY.3D.LINE",196:"GALLERY.3D.PIE",197:"VIEW.3D",198:"GOAL.SEEK",199:"WORKGROUP",200:"FILL.GROUP",201:"UPDATE.LINK",202:"PROMOTE",203:"DEMOTE",204:"SHOW.DETAIL",206:"UNGROUP",207:"OBJECT.PROPERTIES",208:"SAVE.NEW.OBJECT",209:"SHARE",210:"SHARE.NAME",211:"DUPLICATE",212:"APPLY.STYLE",213:"ASSIGN.TO.OBJECT",214:"OBJECT.PROTECTION",215:"HIDE.OBJECT",216:"SET.EXTRACT",217:"CREATE.PUBLISHER",218:"SUBSCRIBE.TO",219:"ATTRIBUTES",220:"SHOW.TOOLBAR",222:"PRINT.PREVIEW",223:"EDIT.COLOR",224:"SHOW.LEVELS",225:"FORMAT.MAIN",226:"FORMAT.OVERLAY",227:"ON.RECALC",228:"EDIT.SERIES",229:"DEFINE.STYLE",240:"LINE.PRINT",243:"ENTER.DATA",249:"GALLERY.RADAR",250:"MERGE.STYLES",251:"EDITION.OPTIONS",252:"PASTE.PICTURE",253:"PASTE.PICTURE.LINK",254:"SPELLING",256:"ZOOM",259:"INSERT.OBJECT",260:"WINDOW.MINIMIZE",265:"SOUND.NOTE",266:"SOUND.PLAY",267:"FORMAT.SHAPE",268:"EXTEND.POLYGON",269:"FORMAT.AUTO",272:"GALLERY.3D.BAR",273:"GALLERY.3D.SURFACE",274:"FILL.AUTO",276:"CUSTOMIZE.TOOLBAR",277:"ADD.TOOL",278:"EDIT.OBJECT",279:"ON.DOUBLECLICK",280:"ON.ENTRY",281:"WORKBOOK.ADD",282:"WORKBOOK.MOVE",283:"WORKBOOK.COPY",284:"WORKBOOK.OPTIONS",285:"SAVE.WORKSPACE",288:"CHART.WIZARD",289:"DELETE.TOOL",290:"MOVE.TOOL",291:"WORKBOOK.SELECT",292:"WORKBOOK.ACTIVATE",293:"ASSIGN.TO.TOOL",295:"COPY.TOOL",296:"RESET.TOOL",297:"CONSTRAIN.NUMERIC",298:"PASTE.TOOL",302:"WORKBOOK.NEW",305:"SCENARIO.CELLS",306:"SCENARIO.DELETE",307:"SCENARIO.ADD",308:"SCENARIO.EDIT",309:"SCENARIO.SHOW",310:"SCENARIO.SHOW.NEXT",311:"SCENARIO.SUMMARY",312:"PIVOT.TABLE.WIZARD",313:"PIVOT.FIELD.PROPERTIES",314:"PIVOT.FIELD",315:"PIVOT.ITEM",316:"PIVOT.ADD.FIELDS",318:"OPTIONS.CALCULATION",319:"OPTIONS.EDIT",320:"OPTIONS.VIEW",321:"ADDIN.MANAGER",322:"MENU.EDITOR",323:"ATTACH.TOOLBARS",324:"VBAActivate",325:"OPTIONS.CHART",328:"VBA.INSERT.FILE",330:"VBA.PROCEDURE.DEFINITION",336:"ROUTING.SLIP",338:"ROUTE.DOCUMENT",339:"MAIL.LOGON",342:"INSERT.PICTURE",343:"EDIT.TOOL",344:"GALLERY.DOUGHNUT",350:"CHART.TREND",352:"PIVOT.ITEM.PROPERTIES",354:"WORKBOOK.INSERT",355:"OPTIONS.TRANSITION",356:"OPTIONS.GENERAL",370:"FILTER.ADVANCED",373:"MAIL.ADD.MAILER",374:"MAIL.DELETE.MAILER",375:"MAIL.REPLY",376:"MAIL.REPLY.ALL",377:"MAIL.FORWARD",378:"MAIL.NEXT.LETTER",379:"DATA.LABEL",380:"INSERT.TITLE",381:"FONT.PROPERTIES",382:"MACRO.OPTIONS",383:"WORKBOOK.HIDE",384:"WORKBOOK.UNHIDE",385:"WORKBOOK.DELETE",386:"WORKBOOK.NAME",388:"GALLERY.CUSTOM",390:"ADD.CHART.AUTOFORMAT",391:"DELETE.CHART.AUTOFORMAT",392:"CHART.ADD.DATA",393:"AUTO.OUTLINE",394:"TAB.ORDER",395:"SHOW.DIALOG",396:"SELECT.ALL",397:"UNGROUP.SHEETS",398:"SUBTOTAL.CREATE",399:"SUBTOTAL.REMOVE",400:"RENAME.OBJECT",412:"WORKBOOK.SCROLL",413:"WORKBOOK.NEXT",414:"WORKBOOK.PREV",415:"WORKBOOK.TAB.SPLIT",416:"FULL.SCREEN",417:"WORKBOOK.PROTECT",420:"SCROLLBAR.PROPERTIES",421:"PIVOT.SHOW.PAGES",422:"TEXT.TO.COLUMNS",423:"FORMAT.CHARTTYPE",424:"LINK.FORMAT",425:"TRACER.DISPLAY",430:"TRACER.NAVIGATE",431:"TRACER.CLEAR",432:"TRACER.ERROR",433:"PIVOT.FIELD.GROUP",434:"PIVOT.FIELD.UNGROUP",435:"CHECKBOX.PROPERTIES",436:"LABEL.PROPERTIES",437:"LISTBOX.PROPERTIES",438:"EDITBOX.PROPERTIES",439:"PIVOT.REFRESH",440:"LINK.COMBO",441:"OPEN.TEXT",442:"HIDE.DIALOG",443:"SET.DIALOG.FOCUS",444:"ENABLE.OBJECT",445:"PUSHBUTTON.PROPERTIES",446:"SET.DIALOG.DEFAULT",447:"FILTER",448:"FILTER.SHOW.ALL",449:"CLEAR.OUTLINE",450:"FUNCTION.WIZARD",451:"ADD.LIST.ITEM",452:"SET.LIST.ITEM",453:"REMOVE.LIST.ITEM",454:"SELECT.LIST.ITEM",455:"SET.CONTROL.VALUE",456:"SAVE.COPY.AS",458:"OPTIONS.LISTS.ADD",459:"OPTIONS.LISTS.DELETE",460:"SERIES.AXES",461:"SERIES.X",462:"SERIES.Y",463:"ERRORBAR.X",464:"ERRORBAR.Y",465:"FORMAT.CHART",466:"SERIES.ORDER",467:"MAIL.LOGOFF",468:"CLEAR.ROUTING.SLIP",469:"APP.ACTIVATE.MICROSOFT",470:"MAIL.EDIT.MAILER",471:"ON.SHEET",472:"STANDARD.WIDTH",473:"SCENARIO.MERGE",474:"SUMMARY.INFO",475:"FIND.FILE",476:"ACTIVE.CELL.FONT",477:"ENABLE.TIPWIZARD",478:"VBA.MAKE.ADDIN",480:"INSERTDATATABLE",481:"WORKGROUP.OPTIONS",482:"MAIL.SEND.MAILER",485:"AUTOCORRECT",489:"POST.DOCUMENT",491:"PICKLIST",493:"VIEW.SHOW",494:"VIEW.DEFINE",495:"VIEW.DELETE",509:"SHEET.BACKGROUND",510:"INSERT.MAP.OBJECT",511:"OPTIONS.MENONO",517:"MSOCHECKS",518:"NORMAL",519:"LAYOUT",520:"RM.PRINT.AREA",521:"CLEAR.PRINT.AREA",522:"ADD.PRINT.AREA",523:"MOVE.BRK",545:"HIDECURR.NOTE",546:"HIDEALL.NOTES",547:"DELETE.NOTE",548:"TRAVERSE.NOTES",549:"ACTIVATE.NOTES",620:"PROTECT.REVISIONS",621:"UNPROTECT.REVISIONS",647:"OPTIONS.ME",653:"WEB.PUBLISH",667:"NEWWEBQUERY",673:"PIVOT.TABLE.CHART",753:"OPTIONS.SAVE",755:"OPTIONS.SPELL",808:"HIDEALL.INKANNOTS"},tm={0:"COUNT",1:"IF",2:"ISNA",3:"ISERROR",4:"SUM",5:"AVERAGE",6:"MIN",7:"MAX",8:"ROW",9:"COLUMN",10:"NA",11:"NPV",12:"STDEV",13:"DOLLAR",14:"FIXED",15:"SIN",16:"COS",17:"TAN",18:"ATAN",19:"PI",20:"SQRT",21:"EXP",22:"LN",23:"LOG10",24:"ABS",25:"INT",26:"SIGN",27:"ROUND",28:"LOOKUP",29:"INDEX",30:"REPT",31:"MID",32:"LEN",33:"VALUE",34:"TRUE",35:"FALSE",36:"AND",37:"OR",38:"NOT",39:"MOD",40:"DCOUNT",41:"DSUM",42:"DAVERAGE",43:"DMIN",44:"DMAX",45:"DSTDEV",46:"VAR",47:"DVAR",48:"TEXT",49:"LINEST",50:"TREND",51:"LOGEST",52:"GROWTH",53:"GOTO",54:"HALT",55:"RETURN",56:"PV",57:"FV",58:"NPER",59:"PMT",60:"RATE",61:"MIRR",62:"IRR",63:"RAND",64:"MATCH",65:"DATE",66:"TIME",67:"DAY",68:"MONTH",69:"YEAR",70:"WEEKDAY",71:"HOUR",72:"MINUTE",73:"SECOND",74:"NOW",75:"AREAS",76:"ROWS",77:"COLUMNS",78:"OFFSET",79:"ABSREF",80:"RELREF",81:"ARGUMENT",82:"SEARCH",83:"TRANSPOSE",84:"ERROR",85:"STEP",86:"TYPE",87:"ECHO",88:"SET.NAME",89:"CALLER",90:"DEREF",91:"WINDOWS",92:"SERIES",93:"DOCUMENTS",94:"ACTIVE.CELL",95:"SELECTION",96:"RESULT",97:"ATAN2",98:"ASIN",99:"ACOS",100:"CHOOSE",101:"HLOOKUP",102:"VLOOKUP",103:"LINKS",104:"INPUT",105:"ISREF",106:"GET.FORMULA",107:"GET.NAME",108:"SET.VALUE",109:"LOG",110:"EXEC",111:"CHAR",112:"LOWER",113:"UPPER",114:"PROPER",115:"LEFT",116:"RIGHT",117:"EXACT",118:"TRIM",119:"REPLACE",120:"SUBSTITUTE",121:"CODE",122:"NAMES",123:"DIRECTORY",124:"FIND",125:"CELL",126:"ISERR",127:"ISTEXT",128:"ISNUMBER",129:"ISBLANK",130:"T",131:"N",132:"FOPEN",133:"FCLOSE",134:"FSIZE",135:"FREADLN",136:"FREAD",137:"FWRITELN",138:"FWRITE",139:"FPOS",140:"DATEVALUE",141:"TIMEVALUE",142:"SLN",143:"SYD",144:"DDB",145:"GET.DEF",146:"REFTEXT",147:"TEXTREF",148:"INDIRECT",149:"REGISTER",150:"CALL",151:"ADD.BAR",152:"ADD.MENU",153:"ADD.COMMAND",154:"ENABLE.COMMAND",155:"CHECK.COMMAND",156:"RENAME.COMMAND",157:"SHOW.BAR",158:"DELETE.MENU",159:"DELETE.COMMAND",160:"GET.CHART.ITEM",161:"DIALOG.BOX",162:"CLEAN",163:"MDETERM",164:"MINVERSE",165:"MMULT",166:"FILES",167:"IPMT",168:"PPMT",169:"COUNTA",170:"CANCEL.KEY",171:"FOR",172:"WHILE",173:"BREAK",174:"NEXT",175:"INITIATE",176:"REQUEST",177:"POKE",178:"EXECUTE",179:"TERMINATE",180:"RESTART",181:"HELP",182:"GET.BAR",183:"PRODUCT",184:"FACT",185:"GET.CELL",186:"GET.WORKSPACE",187:"GET.WINDOW",188:"GET.DOCUMENT",189:"DPRODUCT",190:"ISNONTEXT",191:"GET.NOTE",192:"NOTE",193:"STDEVP",194:"VARP",195:"DSTDEVP",196:"DVARP",197:"TRUNC",198:"ISLOGICAL",199:"DCOUNTA",200:"DELETE.BAR",201:"UNREGISTER",204:"USDOLLAR",205:"FINDB",206:"SEARCHB",207:"REPLACEB",208:"LEFTB",209:"RIGHTB",210:"MIDB",211:"LENB",212:"ROUNDUP",213:"ROUNDDOWN",214:"ASC",215:"DBCS",216:"RANK",219:"ADDRESS",220:"DAYS360",221:"TODAY",222:"VDB",223:"ELSE",224:"ELSE.IF",225:"END.IF",226:"FOR.CELL",227:"MEDIAN",228:"SUMPRODUCT",229:"SINH",230:"COSH",231:"TANH",232:"ASINH",233:"ACOSH",234:"ATANH",235:"DGET",236:"CREATE.OBJECT",237:"VOLATILE",238:"LAST.ERROR",239:"CUSTOM.UNDO",240:"CUSTOM.REPEAT",241:"FORMULA.CONVERT",242:"GET.LINK.INFO",243:"TEXT.BOX",244:"INFO",245:"GROUP",246:"GET.OBJECT",247:"DB",248:"PAUSE",251:"RESUME",252:"FREQUENCY",253:"ADD.TOOLBAR",254:"DELETE.TOOLBAR",255:"User",256:"RESET.TOOLBAR",257:"EVALUATE",258:"GET.TOOLBAR",259:"GET.TOOL",260:"SPELLING.CHECK",261:"ERROR.TYPE",262:"APP.TITLE",263:"WINDOW.TITLE",264:"SAVE.TOOLBAR",265:"ENABLE.TOOL",266:"PRESS.TOOL",267:"REGISTER.ID",268:"GET.WORKBOOK",269:"AVEDEV",270:"BETADIST",271:"GAMMALN",272:"BETAINV",273:"BINOMDIST",274:"CHIDIST",275:"CHIINV",276:"COMBIN",277:"CONFIDENCE",278:"CRITBINOM",279:"EVEN",280:"EXPONDIST",281:"FDIST",282:"FINV",283:"FISHER",284:"FISHERINV",285:"FLOOR",286:"GAMMADIST",287:"GAMMAINV",288:"CEILING",289:"HYPGEOMDIST",290:"LOGNORMDIST",291:"LOGINV",292:"NEGBINOMDIST",293:"NORMDIST",294:"NORMSDIST",295:"NORMINV",296:"NORMSINV",297:"STANDARDIZE",298:"ODD",299:"PERMUT",300:"POISSON",301:"TDIST",302:"WEIBULL",303:"SUMXMY2",304:"SUMX2MY2",305:"SUMX2PY2",306:"CHITEST",307:"CORREL",308:"COVAR",309:"FORECAST",310:"FTEST",311:"INTERCEPT",312:"PEARSON",313:"RSQ",314:"STEYX",315:"SLOPE",316:"TTEST",317:"PROB",318:"DEVSQ",319:"GEOMEAN",320:"HARMEAN",321:"SUMSQ",322:"KURT",323:"SKEW",324:"ZTEST",325:"LARGE",326:"SMALL",327:"QUARTILE",328:"PERCENTILE",329:"PERCENTRANK",330:"MODE",331:"TRIMMEAN",332:"TINV",334:"MOVIE.COMMAND",335:"GET.MOVIE",336:"CONCATENATE",337:"POWER",338:"PIVOT.ADD.DATA",339:"GET.PIVOT.TABLE",340:"GET.PIVOT.FIELD",341:"GET.PIVOT.ITEM",342:"RADIANS",343:"DEGREES",344:"SUBTOTAL",345:"SUMIF",346:"COUNTIF",347:"COUNTBLANK",348:"SCENARIO.GET",349:"OPTIONS.LISTS.GET",350:"ISPMT",351:"DATEDIF",352:"DATESTRING",353:"NUMBERSTRING",354:"ROMAN",355:"OPEN.DIALOG",356:"SAVE.DIALOG",357:"VIEW.GET",358:"GETPIVOTDATA",359:"HYPERLINK",360:"PHONETIC",361:"AVERAGEA",362:"MAXA",363:"MINA",364:"STDEVPA",365:"VARPA",366:"STDEVA",367:"VARA",368:"BAHTTEXT",369:"THAIDAYOFWEEK",370:"THAIDIGIT",371:"THAIMONTHOFYEAR",372:"THAINUMSOUND",373:"THAINUMSTRING",374:"THAISTRINGLENGTH",375:"ISTHAIDIGIT",376:"ROUNDBAHTDOWN",377:"ROUNDBAHTUP",378:"THAIYEAR",379:"RTD",380:"CUBEVALUE",381:"CUBEMEMBER",382:"CUBEMEMBERPROPERTY",383:"CUBERANKEDMEMBER",384:"HEX2BIN",385:"HEX2DEC",386:"HEX2OCT",387:"DEC2BIN",388:"DEC2HEX",389:"DEC2OCT",390:"OCT2BIN",391:"OCT2HEX",392:"OCT2DEC",393:"BIN2DEC",394:"BIN2OCT",395:"BIN2HEX",396:"IMSUB",397:"IMDIV",398:"IMPOWER",399:"IMABS",400:"IMSQRT",401:"IMLN",402:"IMLOG2",403:"IMLOG10",404:"IMSIN",405:"IMCOS",406:"IMEXP",407:"IMARGUMENT",408:"IMCONJUGATE",409:"IMAGINARY",410:"IMREAL",411:"COMPLEX",412:"IMSUM",413:"IMPRODUCT",414:"SERIESSUM",415:"FACTDOUBLE",416:"SQRTPI",417:"QUOTIENT",418:"DELTA",419:"GESTEP",420:"ISEVEN",421:"ISODD",422:"MROUND",423:"ERF",424:"ERFC",425:"BESSELJ",426:"BESSELK",427:"BESSELY",428:"BESSELI",429:"XIRR",430:"XNPV",431:"PRICEMAT",432:"YIELDMAT",433:"INTRATE",434:"RECEIVED",435:"DISC",436:"PRICEDISC",437:"YIELDDISC",438:"TBILLEQ",439:"TBILLPRICE",440:"TBILLYIELD",441:"PRICE",442:"YIELD",443:"DOLLARDE",444:"DOLLARFR",445:"NOMINAL",446:"EFFECT",447:"CUMPRINC",448:"CUMIPMT",449:"EDATE",450:"EOMONTH",451:"YEARFRAC",452:"COUPDAYBS",453:"COUPDAYS",454:"COUPDAYSNC",455:"COUPNCD",456:"COUPNUM",457:"COUPPCD",458:"DURATION",459:"MDURATION",460:"ODDLPRICE",461:"ODDLYIELD",462:"ODDFPRICE",463:"ODDFYIELD",464:"RANDBETWEEN",465:"WEEKNUM",466:"AMORDEGRC",467:"AMORLINC",468:"CONVERT",724:"SHEETJS",469:"ACCRINT",470:"ACCRINTM",471:"WORKDAY",472:"NETWORKDAYS",473:"GCD",474:"MULTINOMIAL",475:"LCM",476:"FVSCHEDULE",477:"CUBEKPIMEMBER",478:"CUBESET",479:"CUBESETCOUNT",480:"IFERROR",481:"COUNTIFS",482:"SUMIFS",483:"AVERAGEIF",484:"AVERAGEIFS"},NT={2:1,3:1,10:0,15:1,16:1,17:1,18:1,19:0,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:2,30:2,31:3,32:1,33:1,34:0,35:0,38:1,39:2,40:3,41:3,42:3,43:3,44:3,45:3,47:3,48:2,53:1,61:3,63:0,65:3,66:3,67:1,68:1,69:1,70:1,71:1,72:1,73:1,74:0,75:1,76:1,77:1,79:2,80:2,83:1,85:0,86:1,89:0,90:1,94:0,95:0,97:2,98:1,99:1,101:3,102:3,105:1,106:1,108:2,111:1,112:1,113:1,114:1,117:2,118:1,119:4,121:1,126:1,127:1,128:1,129:1,130:1,131:1,133:1,134:1,135:1,136:2,137:2,138:2,140:1,141:1,142:3,143:4,144:4,161:1,162:1,163:1,164:1,165:2,172:1,175:2,176:2,177:3,178:2,179:1,184:1,186:1,189:3,190:1,195:3,196:3,197:1,198:1,199:3,201:1,207:4,210:3,211:1,212:2,213:2,214:1,215:1,225:0,229:1,230:1,231:1,232:1,233:1,234:1,235:3,244:1,247:4,252:2,257:1,261:1,271:1,273:4,274:2,275:2,276:2,277:3,278:3,279:1,280:3,281:3,282:3,283:1,284:1,285:2,286:4,287:3,288:2,289:4,290:3,291:3,292:3,293:4,294:1,295:3,296:1,297:3,298:1,299:2,300:3,301:3,302:4,303:2,304:2,305:2,306:2,307:2,308:2,309:3,310:2,311:2,312:2,313:2,314:2,315:2,316:4,325:2,326:2,327:2,328:2,331:2,332:2,337:2,342:1,343:1,346:2,347:1,350:4,351:3,352:1,353:2,360:1,368:1,369:1,370:1,371:1,372:1,373:1,374:1,375:1,376:1,377:1,378:1,382:3,385:1,392:1,393:1,396:2,397:2,398:2,399:1,400:1,401:1,402:1,403:1,404:1,405:1,406:1,407:1,408:1,409:1,410:1,414:4,415:1,416:1,417:2,420:1,421:1,422:2,424:1,425:2,426:2,427:2,428:2,430:3,438:3,439:3,440:3,443:2,444:2,445:2,446:2,447:6,448:6,449:2,450:2,464:2,468:3,476:2,479:1,480:2,65535:0};function rm(e){return e.slice(0,3)=="of:"&&(e=e.slice(3)),e.charCodeAt(0)==61&&(e=e.slice(1),e.charCodeAt(0)==61&&(e=e.slice(1))),e=e.replace(/COM\.MICROSOFT\./g,""),e=e.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g,function(t,r){return r.replace(/\./g,"")}),e=e.replace(/\[.(#[A-Z]*[?!])\]/g,"$1"),e.replace(/[;~]/g,",").replace(/\|/g,";")}function PT(e){var t="of:="+e.replace(mc,"$1[.$2$3$4$5]").replace(/\]:\[/g,":");return t.replace(/;/g,"|").replace(/,/g,";")}function vc(e){var t=e.split(":"),r=t[0].split(".")[0];return[r,t[0].split(".")[1]+(t.length>1?":"+(t[1].split(".")[1]||t[1].split(".")[0]):"")]}function IT(e){return e.replace(/\./,"!")}var ss={},ti={},os=typeof Map<"u";function wc(e,t,r){var n=0,a=e.length;if(r){if(os?r.has(t):Object.prototype.hasOwnProperty.call(r,t)){for(var i=os?r.get(t):r[t];n<i.length;++n)if(e[i[n]].t===t)return e.Count++,i[n]}}else for(;n<a;++n)if(e[n].t===t)return e.Count++,n;return e[a]={t},e.Count++,e.Unique++,r&&(os?(r.has(t)||r.set(t,[]),r.get(t).push(a)):(Object.prototype.hasOwnProperty.call(r,t)||(r[t]=[]),r[t].push(a))),a}function To(e,t){var r={min:e+1,max:e+1},n=-1;return t.MDW&&(Zt=t.MDW),t.width!=null?r.customWidth=1:t.wpx!=null?n=es(t.wpx):t.wch!=null&&(n=t.wch),n>-1?(r.width=yo(n),r.customWidth=1):t.width!=null&&(r.width=t.width),t.hidden&&(r.hidden=!0),t.level!=null&&(r.outlineLevel=r.level=t.level),r}function Ta(e,t){if(e){var r=[.7,.7,.75,.75,.3,.3];t=="xlml"&&(r=[1,1,1,1,.5,.5]),e.left==null&&(e.left=r[0]),e.right==null&&(e.right=r[1]),e.top==null&&(e.top=r[2]),e.bottom==null&&(e.bottom=r[3]),e.header==null&&(e.header=r[4]),e.footer==null&&(e.footer=r[5])}}function Qn(e,t,r){var n=r.revssf[t.z!=null?t.z:"General"],a=60,i=e.length;if(n==null&&r.ssf){for(;a<392;++a)if(r.ssf[a]==null){nn(t.z,a),r.ssf[a]=t.z,r.revssf[t.z]=n=a;break}}for(a=0;a!=i;++a)if(e[a].numFmtId===n)return a;return e[i]={numFmtId:n,fontId:0,fillId:0,borderId:0,xfId:0,applyNumberFormat:1},i}function nm(e,t,r,n,a,i){try{n.cellNF&&(e.z=Se[t])}catch(o){if(n.WTF)throw o}if(!(e.t==="z"&&!n.cellStyles)){if(e.t==="d"&&typeof e.v=="string"&&(e.v=it(e.v)),(!n||n.cellText!==!1)&&e.t!=="z")try{if(Se[t]==null&&nn(N2[t]||"General",t),e.t==="e")e.w=e.w||Fn[e.v];else if(t===0)if(e.t==="n")(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Li(e.v);else if(e.t==="d"){var s=Ot(e.v);(s|0)===s?e.w=s.toString(10):e.w=Li(s)}else{if(e.v===void 0)return"";e.w=fa(e.v,ti)}else e.t==="d"?e.w=yr(t,Ot(e.v),ti):e.w=yr(t,e.v,ti)}catch(o){if(n.WTF)throw o}if(n.cellStyles&&r!=null)try{e.s=i.Fills[r],e.s.fgColor&&e.s.fgColor.theme&&!e.s.fgColor.rgb&&(e.s.fgColor.rgb=_o(a.themeElements.clrScheme[e.s.fgColor.theme].rgb,e.s.fgColor.tint||0),n.WTF&&(e.s.fgColor.raw_rgb=a.themeElements.clrScheme[e.s.fgColor.theme].rgb)),e.s.bgColor&&e.s.bgColor.theme&&(e.s.bgColor.rgb=_o(a.themeElements.clrScheme[e.s.bgColor.theme].rgb,e.s.bgColor.tint||0),n.WTF&&(e.s.bgColor.raw_rgb=a.themeElements.clrScheme[e.s.bgColor.theme].rgb))}catch(o){if(n.WTF&&i.Fills)throw o}}}function LT(e,t,r){if(e&&e["!ref"]){var n=Ye(e["!ref"]);if(n.e.c<n.s.c||n.e.r<n.s.r)throw new Error("Bad range ("+r+"): "+e["!ref"])}}function MT(e,t){var r=Ye(t);r.s.r<=r.e.r&&r.s.c<=r.e.c&&r.s.r>=0&&r.s.c>=0&&(e["!ref"]=Me(r))}var VT=/<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g,UT=/<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/,$T=/<(?:\w:)?hyperlink [^>]*>/mg,WT=/"(\w*:\w*)"/,HT=/<(?:\w:)?col\b[^>]*[\/]?>/g,jT=/<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g,zT=/<(?:\w:)?pageMargins[^>]*\/>/g,am=/<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/,GT=/<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/,XT=/<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;function KT(e,t,r,n,a,i,s){if(!e)return e;n||(n={"!id":{}});var o=t.dense?[]:{},c={s:{r:2e6,c:2e6},e:{r:0,c:0}},f="",u="",h=e.match(UT);h?(f=e.slice(0,h.index),u=e.slice(h.index+h[0].length)):f=u=e;var d=f.match(am);d?_c(d[0],o,a,r):(d=f.match(GT))&&qT(d[0],d[1]||"",o,a,r);var p=(f.match(/<(?:\w*:)?dimension/)||{index:-1}).index;if(p>0){var g=f.slice(p,p+50).match(WT);g&&MT(o,g[1])}var m=f.match(XT);m&&m[1]&&cF(m[1],a);var x=[];if(t.cellStyles){var v=f.match(HT);v&&aF(x,v)}h&&hF(h[1],o,t,c,i,s);var k=u.match(jT);k&&(o["!autofilter"]=sF(k[0]));var w=[],S=u.match(VT);if(S)for(p=0;p!=S.length;++p)w[p]=Ye(S[p].slice(S[p].indexOf('"')+1));var b=u.match($T);b&&tF(o,b,n);var T=u.match(zT);if(T&&(o["!margins"]=rF(Re(T[0]))),!o["!ref"]&&c.e.c>=c.s.c&&c.e.r>=c.s.r&&(o["!ref"]=Me(c)),t.sheetRows>0&&o["!ref"]){var y=Ye(o["!ref"]);t.sheetRows<=+y.e.r&&(y.e.r=t.sheetRows-1,y.e.r>c.e.r&&(y.e.r=c.e.r),y.e.r<y.s.r&&(y.s.r=y.e.r),y.e.c>c.e.c&&(y.e.c=c.e.c),y.e.c<y.s.c&&(y.s.c=y.e.c),o["!fullref"]=o["!ref"],o["!ref"]=Me(y))}return x.length>0&&(o["!cols"]=x),w.length>0&&(o["!merges"]=w),o}function YT(e){if(e.length===0)return"";for(var t='<mergeCells count="'+e.length+'">',r=0;r!=e.length;++r)t+='<mergeCell ref="'+Me(e[r])+'"/>';return t+"</mergeCells>"}function _c(e,t,r,n){var a=Re(e);r.Sheets[n]||(r.Sheets[n]={}),a.codeName&&(r.Sheets[n].CodeName=Ke(nt(a.codeName)))}function qT(e,t,r,n,a){_c(e.slice(0,e.indexOf(">")),r,n,a)}function JT(e,t,r,n,a){var i=!1,s={},o=null;if(n.bookType!=="xlsx"&&t.vbaraw){var c=t.SheetNames[r];try{t.Workbook&&(c=t.Workbook.Sheets[r].CodeName||c)}catch{}i=!0,s.codeName=sn(Qe(c))}if(e&&e["!outline"]){var f={summaryBelow:1,summaryRight:1};e["!outline"].above&&(f.summaryBelow=0),e["!outline"].left&&(f.summaryRight=0),o=(o||"")+pe("outlinePr",null,f)}!i&&!o||(a[a.length]=pe("sheetPr",o,s))}var ZT=["objects","scenarios","selectLockedCells","selectUnlockedCells"],QT=["formatColumns","formatRows","formatCells","insertColumns","insertRows","insertHyperlinks","deleteColumns","deleteRows","sort","autoFilter","pivotTables"];function eF(e){var t={sheet:1};return ZT.forEach(function(r){e[r]!=null&&e[r]&&(t[r]="1")}),QT.forEach(function(r){e[r]!=null&&!e[r]&&(t[r]="0")}),e.password&&(t.password=cc(e.password).toString(16).toUpperCase()),pe("sheetProtection",null,t)}function tF(e,t,r){for(var n=Array.isArray(e),a=0;a!=t.length;++a){var i=Re(nt(t[a]),!0);if(!i.ref)return;var s=((r||{})["!id"]||[])[i.id];s?(i.Target=s.Target,i.location&&(i.Target+="#"+Ke(i.location))):(i.Target="#"+Ke(i.location),s={Target:i.Target,TargetMode:"Internal"}),i.Rel=s,i.tooltip&&(i.Tooltip=i.tooltip,delete i.tooltip);for(var o=Ye(i.ref),c=o.s.r;c<=o.e.r;++c)for(var f=o.s.c;f<=o.e.c;++f){var u=Ce({c:f,r:c});n?(e[c]||(e[c]=[]),e[c][f]||(e[c][f]={t:"z",v:void 0}),e[c][f].l=i):(e[u]||(e[u]={t:"z",v:void 0}),e[u].l=i)}}}function rF(e){var t={};return["left","right","top","bottom","header","footer"].forEach(function(r){e[r]&&(t[r]=parseFloat(e[r]))}),t}function nF(e){return Ta(e),pe("pageMargins",null,e)}function aF(e,t){for(var r=!1,n=0;n!=t.length;++n){var a=Re(t[n],!0);a.hidden&&(a.hidden=ot(a.hidden));var i=parseInt(a.min,10)-1,s=parseInt(a.max,10)-1;for(a.outlineLevel&&(a.level=+a.outlineLevel||0),delete a.min,delete a.max,a.width=+a.width,!r&&a.width&&(r=!0,uc(a.width)),Jn(a);i<=s;)e[i++]=st(a)}}function iF(e,t){for(var r=["<cols>"],n,a=0;a!=t.length;++a)(n=t[a])&&(r[r.length]=pe("col",null,To(a,n)));return r[r.length]="</cols>",r.join("")}function sF(e){var t={ref:(e.match(/ref="([^"]*)"/)||[])[1]};return t}function oF(e,t,r,n){var a=typeof e.ref=="string"?e.ref:Me(e.ref);r.Workbook||(r.Workbook={Sheets:[]}),r.Workbook.Names||(r.Workbook.Names=[]);var i=r.Workbook.Names,s=hr(a);s.s.r==s.e.r&&(s.e.r=hr(t["!ref"]).e.r,a=Me(s));for(var o=0;o<i.length;++o){var c=i[o];if(c.Name=="_xlnm._FilterDatabase"&&c.Sheet==n){c.Ref="'"+r.SheetNames[n]+"'!"+a;break}}return o==i.length&&i.push({Name:"_xlnm._FilterDatabase",Sheet:n,Ref:"'"+r.SheetNames[n]+"'!"+a}),pe("autoFilter",null,{ref:a})}var lF=/<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;function cF(e,t){t.Views||(t.Views=[{}]),(e.match(lF)||[]).forEach(function(r,n){var a=Re(r);t.Views[n]||(t.Views[n]={}),+a.zoomScale&&(t.Views[n].zoom=+a.zoomScale),ot(a.rightToLeft)&&(t.Views[n].RTL=!0)})}function fF(e,t,r,n){var a={workbookViewId:"0"};return(((n||{}).Workbook||{}).Views||[])[0]&&(a.rightToLeft=n.Workbook.Views[0].RTL?"1":"0"),pe("sheetViews",pe("sheetView",null,a),{})}function uF(e,t,r,n){if(e.c&&r["!comments"].push([t,e.c]),e.v===void 0&&typeof e.f!="string"||e.t==="z"&&!e.f)return"";var a="",i=e.t,s=e.v;if(e.t!=="z")switch(e.t){case"b":a=e.v?"1":"0";break;case"n":a=""+e.v;break;case"e":a=Fn[e.v];break;case"d":n&&n.cellDates?a=it(e.v,-1).toISOString():(e=st(e),e.t="n",a=""+(e.v=Ot(it(e.v)))),typeof e.z>"u"&&(e.z=Se[14]);break;default:a=e.v;break}var o=Wt("v",Qe(a)),c={r:t},f=Qn(n.cellXfs,e,n);switch(f!==0&&(c.s=f),e.t){case"n":break;case"d":c.t="d";break;case"b":c.t="b";break;case"e":c.t="e";break;case"z":break;default:if(e.v==null){delete e.t;break}if(e.v.length>32767)throw new Error("Text length must not exceed 32767 characters");if(n&&n.bookSST){o=Wt("v",""+wc(n.Strings,e.v,n.revStrings)),c.t="s";break}c.t="str";break}if(e.t!=i&&(e.t=i,e.v=s),typeof e.f=="string"&&e.f){var u=e.F&&e.F.slice(0,t.length)==t?{t:"array",ref:e.F}:null;o=pe("f",Qe(e.f),u)+(e.v!=null?o:"")}return e.l&&r["!links"].push([t,e.l]),e.D&&(c.cm=1),pe("c",o,c)}var hF=function(){var e=/<(?:\w+:)?c[ \/>]/,t=/<\/(?:\w+:)?row>/,r=/r=["']([^"']*)["']/,n=/<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/,a=/ref=["']([^"']*)["']/,i=$i("v"),s=$i("f");return function(c,f,u,h,d,p){for(var g=0,m="",x=[],v=[],k=0,w=0,S=0,b="",T,y,O=0,B=0,H,j,I=0,X=0,q=Array.isArray(p.CellXf),te,ae=[],oe=[],ue=Array.isArray(f),z=[],W={},A=!1,_=!!u.sheetStubs,F=c.split(t),D=0,M=F.length;D!=M;++D){m=F[D].trim();var K=m.length;if(K!==0){var J=0;e:for(g=0;g<K;++g)switch(m[g]){case">":if(m[g-1]!="/"){++g;break e}if(u&&u.cellStyles){if(y=Re(m.slice(J,g),!0),O=y.r!=null?parseInt(y.r,10):O+1,B=-1,u.sheetRows&&u.sheetRows<O)continue;W={},A=!1,y.ht&&(A=!0,W.hpt=parseFloat(y.ht),W.hpx=Za(W.hpt)),y.hidden=="1"&&(A=!0,W.hidden=!0),y.outlineLevel!=null&&(A=!0,W.level=+y.outlineLevel),A&&(z[O-1]=W)}break;case"<":J=g;break}if(J>=g)break;if(y=Re(m.slice(J,g),!0),O=y.r!=null?parseInt(y.r,10):O+1,B=-1,!(u.sheetRows&&u.sheetRows<O)){h.s.r>O-1&&(h.s.r=O-1),h.e.r<O-1&&(h.e.r=O-1),u&&u.cellStyles&&(W={},A=!1,y.ht&&(A=!0,W.hpt=parseFloat(y.ht),W.hpx=Za(W.hpt)),y.hidden=="1"&&(A=!0,W.hidden=!0),y.outlineLevel!=null&&(A=!0,W.level=+y.outlineLevel),A&&(z[O-1]=W)),x=m.slice(g).split(e);for(var re=0;re!=x.length&&x[re].trim().charAt(0)=="<";++re);for(x=x.slice(re),g=0;g!=x.length;++g)if(m=x[g].trim(),m.length!==0){if(v=m.match(r),k=g,w=0,S=0,m="<c "+(m.slice(0,1)=="<"?">":"")+m,v!=null&&v.length===2){for(k=0,b=v[1],w=0;w!=b.length&&!((S=b.charCodeAt(w)-64)<1||S>26);++w)k=26*k+S;--k,B=k}else++B;for(w=0;w!=m.length&&m.charCodeAt(w)!==62;++w);if(++w,y=Re(m.slice(0,w),!0),y.r||(y.r=Ce({r:O-1,c:B})),b=m.slice(w),T={t:""},(v=b.match(i))!=null&&v[1]!==""&&(T.v=Ke(v[1])),u.cellFormula){if((v=b.match(s))!=null&&v[1]!==""){if(T.f=Ke(nt(v[1])).replace(/\r\n/g,`
`),u.xlfn||(T.f=zd(T.f)),v[0].indexOf('t="array"')>-1)T.F=(b.match(a)||[])[1],T.F.indexOf(":")>-1&&ae.push([Ye(T.F),T.F]);else if(v[0].indexOf('t="shared"')>-1){j=Re(v[0]);var le=Ke(nt(v[1]));u.xlfn||(le=zd(le)),oe[parseInt(j.si,10)]=[j,le,y.r]}}else(v=b.match(/<f[^>]*\/>/))&&(j=Re(v[0]),oe[j.si]&&(T.f=lS(oe[j.si][1],oe[j.si][2],y.r)));var ce=ht(y.r);for(w=0;w<ae.length;++w)ce.r>=ae[w][0].s.r&&ce.r<=ae[w][0].e.r&&ce.c>=ae[w][0].s.c&&ce.c<=ae[w][0].e.c&&(T.F=ae[w][1])}if(y.t==null&&T.v===void 0)if(T.f||T.F)T.v=0,T.t="n";else if(_)T.t="z";else continue;else T.t=y.t||"n";switch(h.s.c>B&&(h.s.c=B),h.e.c<B&&(h.e.c=B),T.t){case"n":if(T.v==""||T.v==null){if(!_)continue;T.t="z"}else T.v=parseFloat(T.v);break;case"s":if(typeof T.v>"u"){if(!_)continue;T.t="z"}else H=ss[parseInt(T.v,10)],T.v=H.t,T.r=H.r,u.cellHTML&&(T.h=H.h);break;case"str":T.t="s",T.v=T.v!=null?nt(T.v):"",u.cellHTML&&(T.h=Il(T.v));break;case"inlineStr":v=b.match(n),T.t="s",v!=null&&(H=lc(v[1]))?(T.v=H.t,u.cellHTML&&(T.h=H.h)):T.v="";break;case"b":T.v=ot(T.v);break;case"d":u.cellDates?T.v=it(T.v,1):(T.v=Ot(it(T.v,1)),T.t="n");break;case"e":(!u||u.cellText!==!1)&&(T.w=T.v),T.v=Lh[T.v];break}if(I=X=0,te=null,q&&y.s!==void 0&&(te=p.CellXf[y.s],te!=null&&(te.numFmtId!=null&&(I=te.numFmtId),u.cellStyles&&te.fillId!=null&&(X=te.fillId))),nm(T,I,X,u,d,p),u.cellDates&&q&&T.t=="n"&&ua(Se[I])&&(T.t="d",T.v=so(T.v)),y.cm&&u.xlmeta){var Be=(u.xlmeta.Cell||[])[+y.cm-1];Be&&Be.type=="XLDAPR"&&(T.D=!0)}if(ue){var V=ht(y.r);f[V.r]||(f[V.r]=[]),f[V.r][V.c]=T}else f[y.r]=T}}}}z.length>0&&(f["!rows"]=z)}}();function dF(e,t,r,n){var a=[],i=[],s=Ye(e["!ref"]),o="",c,f="",u=[],h=0,d=0,p=e["!rows"],g=Array.isArray(e),m={r:f},x,v=-1;for(d=s.s.c;d<=s.e.c;++d)u[d]=ut(d);for(h=s.s.r;h<=s.e.r;++h){for(i=[],f=yt(h),d=s.s.c;d<=s.e.c;++d){c=u[d]+f;var k=g?(e[h]||[])[d]:e[c];k!==void 0&&(o=uF(k,c,e,t))!=null&&i.push(o)}(i.length>0||p&&p[h])&&(m={r:f},p&&p[h]&&(x=p[h],x.hidden&&(m.hidden=1),v=-1,x.hpx?v=ts(x.hpx):x.hpt&&(v=x.hpt),v>-1&&(m.ht=v,m.customHeight=1),x.level&&(m.outlineLevel=x.level)),a[a.length]=pe("row",i.join(""),m))}if(p)for(;h<p.length;++h)p&&p[h]&&(m={r:h+1},x=p[h],x.hidden&&(m.hidden=1),v=-1,x.hpx?v=ts(x.hpx):x.hpt&&(v=x.hpt),v>-1&&(m.ht=v,m.customHeight=1),x.level&&(m.outlineLevel=x.level),a[a.length]=pe("row","",m));return a.join("")}function im(e,t,r,n){var a=[_t,pe("worksheet",null,{xmlns:da[0],"xmlns:r":Bt.r})],i=r.SheetNames[e],s=0,o="",c=r.Sheets[i];c==null&&(c={});var f=c["!ref"]||"A1",u=Ye(f);if(u.e.c>16383||u.e.r>1048575){if(t.WTF)throw new Error("Range "+f+" exceeds format limit A1:XFD1048576");u.e.c=Math.min(u.e.c,16383),u.e.r=Math.min(u.e.c,1048575),f=Me(u)}n||(n={}),c["!comments"]=[];var h=[];JT(c,r,e,t,a),a[a.length]=pe("dimension",null,{ref:f}),a[a.length]=fF(c,t,e,r),t.sheetFormat&&(a[a.length]=pe("sheetFormatPr",null,{defaultRowHeight:t.sheetFormat.defaultRowHeight||"16",baseColWidth:t.sheetFormat.baseColWidth||"10",outlineLevelRow:t.sheetFormat.outlineLevelRow||"7"})),c["!cols"]!=null&&c["!cols"].length>0&&(a[a.length]=iF(c,c["!cols"])),a[s=a.length]="<sheetData/>",c["!links"]=[],c["!ref"]!=null&&(o=dF(c,t),o.length>0&&(a[a.length]=o)),a.length>s+1&&(a[a.length]="</sheetData>",a[s]=a[s].replace("/>",">")),c["!protect"]&&(a[a.length]=eF(c["!protect"])),c["!autofilter"]!=null&&(a[a.length]=oF(c["!autofilter"],c,r,e)),c["!merges"]!=null&&c["!merges"].length>0&&(a[a.length]=YT(c["!merges"]));var d=-1,p,g=-1;return c["!links"].length>0&&(a[a.length]="<hyperlinks>",c["!links"].forEach(function(m){m[1].Target&&(p={ref:m[0]},m[1].Target.charAt(0)!="#"&&(g=et(n,-1,Qe(m[1].Target).replace(/#.*$/,""),je.HLINK),p["r:id"]="rId"+g),(d=m[1].Target.indexOf("#"))>-1&&(p.location=Qe(m[1].Target.slice(d+1))),m[1].Tooltip&&(p.tooltip=Qe(m[1].Tooltip)),a[a.length]=pe("hyperlink",null,p))}),a[a.length]="</hyperlinks>"),delete c["!links"],c["!margins"]!=null&&(a[a.length]=nF(c["!margins"])),(!t||t.ignoreEC||t.ignoreEC==null)&&(a[a.length]=Wt("ignoredErrors",pe("ignoredError",null,{numberStoredAsText:1,sqref:f}))),h.length>0&&(g=et(n,-1,"../drawings/drawing"+(e+1)+".xml",je.DRAW),a[a.length]=pe("drawing",null,{"r:id":"rId"+g}),c["!drawing"]=h),c["!comments"].length>0&&(g=et(n,-1,"../drawings/vmlDrawing"+(e+1)+".vml",je.VML),a[a.length]=pe("legacyDrawing",null,{"r:id":"rId"+g}),c["!legacy"]=g),a.length>1&&(a[a.length]="</worksheet>",a[1]=a[1].replace("/>",">")),a.join("")}function mF(e,t){var r={},n=e.l+t;r.r=e.read_shift(4),e.l+=4;var a=e.read_shift(2);e.l+=1;var i=e.read_shift(1);return e.l=n,i&7&&(r.level=i&7),i&16&&(r.hidden=!0),i&32&&(r.hpt=a/20),r}function pF(e,t,r){var n=ne(145),a=(r["!rows"]||[])[e]||{};n.write_shift(4,e),n.write_shift(4,0);var i=320;a.hpx?i=ts(a.hpx)*20:a.hpt&&(i=a.hpt*20),n.write_shift(2,i),n.write_shift(1,0);var s=0;a.level&&(s|=a.level),a.hidden&&(s|=16),(a.hpx||a.hpt)&&(s|=32),n.write_shift(1,s),n.write_shift(1,0);var o=0,c=n.l;n.l+=4;for(var f={r:e,c:0},u=0;u<16;++u)if(!(t.s.c>u+1<<10||t.e.c<u<<10)){for(var h=-1,d=-1,p=u<<10;p<u+1<<10;++p){f.c=p;var g=Array.isArray(r)?(r[f.r]||[])[f.c]:r[Ce(f)];g&&(h<0&&(h=p),d=p)}h<0||(++o,n.write_shift(4,h),n.write_shift(4,d))}var m=n.l;return n.l=c,n.write_shift(4,o),n.l=m,n.length>n.l?n.slice(0,n.l):n}function gF(e,t,r,n){var a=pF(n,r,t);(a.length>17||(t["!rows"]||[])[n])&&fe(e,0,a)}var xF=va,vF=Ya;function wF(){}function _F(e,t){var r={},n=e[e.l];return++e.l,r.above=!(n&64),r.left=!(n&128),e.l+=18,r.name=E_(e),r}function yF(e,t,r){r==null&&(r=ne(84+4*e.length));var n=192;t&&(t.above&&(n&=-65),t.left&&(n&=-129)),r.write_shift(1,n);for(var a=1;a<3;++a)r.write_shift(1,0);return fo({auto:1},r),r.write_shift(-4,-1),r.write_shift(-4,-1),Dh(e,r),r.slice(0,r.l)}function kF(e){var t=Or(e);return[t]}function EF(e,t,r){return r==null&&(r=ne(8)),pa(t,r)}function bF(e){var t=ga(e);return[t]}function SF(e,t,r){return r==null&&(r=ne(4)),xa(t,r)}function TF(e){var t=Or(e),r=e.read_shift(1);return[t,r,"b"]}function FF(e,t,r){return r==null&&(r=ne(9)),pa(t,r),r.write_shift(1,e.v?1:0),r}function CF(e){var t=ga(e),r=e.read_shift(1);return[t,r,"b"]}function AF(e,t,r){return r==null&&(r=ne(5)),xa(t,r),r.write_shift(1,e.v?1:0),r}function DF(e){var t=Or(e),r=e.read_shift(1);return[t,r,"e"]}function RF(e,t,r){return r==null&&(r=ne(9)),pa(t,r),r.write_shift(1,e.v),r}function OF(e){var t=ga(e),r=e.read_shift(1);return[t,r,"e"]}function BF(e,t,r){return r==null&&(r=ne(8)),xa(t,r),r.write_shift(1,e.v),r.write_shift(2,0),r.write_shift(1,0),r}function NF(e){var t=Or(e),r=e.read_shift(4);return[t,r,"s"]}function PF(e,t,r){return r==null&&(r=ne(12)),pa(t,r),r.write_shift(4,t.v),r}function IF(e){var t=ga(e),r=e.read_shift(4);return[t,r,"s"]}function LF(e,t,r){return r==null&&(r=ne(8)),xa(t,r),r.write_shift(4,t.v),r}function MF(e){var t=Or(e),r=qt(e);return[t,r,"n"]}function VF(e,t,r){return r==null&&(r=ne(16)),pa(t,r),wa(e.v,r),r}function sm(e){var t=ga(e),r=qt(e);return[t,r,"n"]}function UF(e,t,r){return r==null&&(r=ne(12)),xa(t,r),wa(e.v,r),r}function $F(e){var t=Or(e),r=Yl(e);return[t,r,"n"]}function WF(e,t,r){return r==null&&(r=ne(12)),pa(t,r),Rh(e.v,r),r}function HF(e){var t=ga(e),r=Yl(e);return[t,r,"n"]}function jF(e,t,r){return r==null&&(r=ne(8)),xa(t,r),Rh(e.v,r),r}function zF(e){var t=Or(e),r=zl(e);return[t,r,"is"]}function GF(e){var t=Or(e),r=Yt(e);return[t,r,"str"]}function XF(e,t,r){return r==null&&(r=ne(12+4*e.v.length)),pa(t,r),Mt(e.v,r),r.length>r.l?r.slice(0,r.l):r}function KF(e){var t=ga(e),r=Yt(e);return[t,r,"str"]}function YF(e,t,r){return r==null&&(r=ne(8+4*e.v.length)),xa(t,r),Mt(e.v,r),r.length>r.l?r.slice(0,r.l):r}function qF(e,t,r){var n=e.l+t,a=Or(e);a.r=r["!row"];var i=e.read_shift(1),s=[a,i,"b"];if(r.cellFormula){e.l+=2;var o=So(e,n-e.l,r);s[3]=Qt(o,null,a,r.supbooks,r)}else e.l=n;return s}function JF(e,t,r){var n=e.l+t,a=Or(e);a.r=r["!row"];var i=e.read_shift(1),s=[a,i,"e"];if(r.cellFormula){e.l+=2;var o=So(e,n-e.l,r);s[3]=Qt(o,null,a,r.supbooks,r)}else e.l=n;return s}function ZF(e,t,r){var n=e.l+t,a=Or(e);a.r=r["!row"];var i=qt(e),s=[a,i,"n"];if(r.cellFormula){e.l+=2;var o=So(e,n-e.l,r);s[3]=Qt(o,null,a,r.supbooks,r)}else e.l=n;return s}function QF(e,t,r){var n=e.l+t,a=Or(e);a.r=r["!row"];var i=Yt(e),s=[a,i,"str"];if(r.cellFormula){e.l+=2;var o=So(e,n-e.l,r);s[3]=Qt(o,null,a,r.supbooks,r)}else e.l=n;return s}var eC=va,tC=Ya;function rC(e,t){return t==null&&(t=ne(4)),t.write_shift(4,e),t}function nC(e,t){var r=e.l+t,n=va(e),a=Gl(e),i=Yt(e),s=Yt(e),o=Yt(e);e.l=r;var c={rfx:n,relId:a,loc:i,display:o};return s&&(c.Tooltip=s),c}function aC(e,t){var r=ne(50+4*(e[1].Target.length+(e[1].Tooltip||"").length));Ya({s:ht(e[0]),e:ht(e[0])},r),Kl("rId"+t,r);var n=e[1].Target.indexOf("#"),a=n==-1?"":e[1].Target.slice(n+1);return Mt(a||"",r),Mt(e[1].Tooltip||"",r),Mt("",r),r.slice(0,r.l)}function iC(){}function sC(e,t,r){var n=e.l+t,a=Oh(e),i=e.read_shift(1),s=[a];if(s[2]=i,r.cellFormula){var o=DT(e,n-e.l,r);s[1]=o}else e.l=n;return s}function oC(e,t,r){var n=e.l+t,a=va(e),i=[a];if(r.cellFormula){var s=OT(e,n-e.l,r);i[1]=s,e.l=n}else e.l=n;return i}function lC(e,t,r){r==null&&(r=ne(18));var n=To(e,t);r.write_shift(-4,e),r.write_shift(-4,e),r.write_shift(4,(n.width||10)*256),r.write_shift(4,0);var a=0;return t.hidden&&(a|=1),typeof n.width=="number"&&(a|=2),t.level&&(a|=t.level<<8),r.write_shift(2,a),r}var om=["left","right","top","bottom","header","footer"];function cC(e){var t={};return om.forEach(function(r){t[r]=qt(e)}),t}function fC(e,t){return t==null&&(t=ne(6*8)),Ta(e),om.forEach(function(r){wa(e[r],t)}),t}function uC(e){var t=e.read_shift(2);return e.l+=28,{RTL:t&32}}function hC(e,t,r){r==null&&(r=ne(30));var n=924;return(((t||{}).Views||[])[0]||{}).RTL&&(n|=32),r.write_shift(2,n),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(1,0),r.write_shift(1,0),r.write_shift(2,0),r.write_shift(2,100),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(4,0),r}function dC(e){var t=ne(24);return t.write_shift(4,4),t.write_shift(4,1),Ya(e,t),t}function mC(e,t){return t==null&&(t=ne(16*4+2)),t.write_shift(2,e.password?cc(e.password):0),t.write_shift(4,1),[["objects",!1],["scenarios",!1],["formatCells",!0],["formatColumns",!0],["formatRows",!0],["insertColumns",!0],["insertRows",!0],["insertHyperlinks",!0],["deleteColumns",!0],["deleteRows",!0],["selectLockedCells",!1],["sort",!0],["autoFilter",!0],["pivotTables",!0],["selectUnlockedCells",!1]].forEach(function(r){r[1]?t.write_shift(4,e[r[0]]!=null&&!e[r[0]]?1:0):t.write_shift(4,e[r[0]]!=null&&e[r[0]]?0:1)}),t}function pC(){}function gC(){}function xC(e,t,r,n,a,i,s){if(!e)return e;var o=t||{};n||(n={"!id":{}});var c=o.dense?[]:{},f,u={s:{r:2e6,c:2e6},e:{r:0,c:0}},h=!1,d=!1,p,g,m,x,v,k,w,S,b,T=[];o.biff=12,o["!row"]=0;var y=0,O=!1,B=[],H={},j=o.supbooks||a.supbooks||[[]];if(j.sharedf=H,j.arrayf=B,j.SheetNames=a.SheetNames||a.Sheets.map(function(ue){return ue.name}),!o.supbooks&&(o.supbooks=j,a.Names))for(var I=0;I<a.Names.length;++I)j[0][I+1]=a.Names[I];var X=[],q=[],te=!1;fs[16]={n:"BrtShortReal",f:sm};var ae;if(Sn(e,function(z,W,A){if(!d)switch(A){case 148:f=z;break;case 0:p=z,o.sheetRows&&o.sheetRows<=p.r&&(d=!0),S=yt(x=p.r),o["!row"]=p.r,(z.hidden||z.hpt||z.level!=null)&&(z.hpt&&(z.hpx=Za(z.hpt)),q[z.r]=z);break;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 17:case 18:case 62:switch(g={t:z[2]},z[2]){case"n":g.v=z[1];break;case"s":w=ss[z[1]],g.v=w.t,g.r=w.r;break;case"b":g.v=!!z[1];break;case"e":g.v=z[1],o.cellText!==!1&&(g.w=Fn[g.v]);break;case"str":g.t="s",g.v=z[1];break;case"is":g.t="s",g.v=z[1].t;break}if((m=s.CellXf[z[0].iStyleRef])&&nm(g,m.numFmtId,null,o,i,s),v=z[0].c==-1?v+1:z[0].c,o.dense?(c[x]||(c[x]=[]),c[x][v]=g):c[ut(v)+S]=g,o.cellFormula){for(O=!1,y=0;y<B.length;++y){var _=B[y];p.r>=_[0].s.r&&p.r<=_[0].e.r&&v>=_[0].s.c&&v<=_[0].e.c&&(g.F=Me(_[0]),O=!0)}!O&&z.length>3&&(g.f=z[3])}if(u.s.r>p.r&&(u.s.r=p.r),u.s.c>v&&(u.s.c=v),u.e.r<p.r&&(u.e.r=p.r),u.e.c<v&&(u.e.c=v),o.cellDates&&m&&g.t=="n"&&ua(Se[m.numFmtId])){var F=Xn(g.v);F&&(g.t="d",g.v=new Date(F.y,F.m-1,F.d,F.H,F.M,F.S,F.u))}ae&&(ae.type=="XLDAPR"&&(g.D=!0),ae=void 0);break;case 1:case 12:if(!o.sheetStubs||h)break;g={t:"z",v:void 0},v=z[0].c==-1?v+1:z[0].c,o.dense?(c[x]||(c[x]=[]),c[x][v]=g):c[ut(v)+S]=g,u.s.r>p.r&&(u.s.r=p.r),u.s.c>v&&(u.s.c=v),u.e.r<p.r&&(u.e.r=p.r),u.e.c<v&&(u.e.c=v),ae&&(ae.type=="XLDAPR"&&(g.D=!0),ae=void 0);break;case 176:T.push(z);break;case 49:ae=((o.xlmeta||{}).Cell||[])[z-1];break;case 494:var D=n["!id"][z.relId];for(D?(z.Target=D.Target,z.loc&&(z.Target+="#"+z.loc),z.Rel=D):z.relId==""&&(z.Target="#"+z.loc),x=z.rfx.s.r;x<=z.rfx.e.r;++x)for(v=z.rfx.s.c;v<=z.rfx.e.c;++v)o.dense?(c[x]||(c[x]=[]),c[x][v]||(c[x][v]={t:"z",v:void 0}),c[x][v].l=z):(k=Ce({c:v,r:x}),c[k]||(c[k]={t:"z",v:void 0}),c[k].l=z);break;case 426:if(!o.cellFormula)break;B.push(z),b=o.dense?c[x][v]:c[ut(v)+S],b.f=Qt(z[1],u,{r:p.r,c:v},j,o),b.F=Me(z[0]);break;case 427:if(!o.cellFormula)break;H[Ce(z[0].s)]=z[1],b=o.dense?c[x][v]:c[ut(v)+S],b.f=Qt(z[1],u,{r:p.r,c:v},j,o);break;case 60:if(!o.cellStyles)break;for(;z.e>=z.s;)X[z.e--]={width:z.w/256,hidden:!!(z.flags&1),level:z.level},te||(te=!0,uc(z.w/256)),Jn(X[z.e+1]);break;case 161:c["!autofilter"]={ref:Me(z)};break;case 476:c["!margins"]=z;break;case 147:a.Sheets[r]||(a.Sheets[r]={}),z.name&&(a.Sheets[r].CodeName=z.name),(z.above||z.left)&&(c["!outline"]={above:z.above,left:z.left});break;case 137:a.Views||(a.Views=[{}]),a.Views[0]||(a.Views[0]={}),z.RTL&&(a.Views[0].RTL=!0);break;case 485:break;case 64:case 1053:break;case 151:break;case 152:case 175:case 644:case 625:case 562:case 396:case 1112:case 1146:case 471:case 1050:case 649:case 1105:case 589:case 607:case 564:case 1055:case 168:case 174:case 1180:case 499:case 507:case 550:case 171:case 167:case 1177:case 169:case 1181:case 551:case 552:case 661:case 639:case 478:case 537:case 477:case 536:case 1103:case 680:case 1104:case 1024:case 663:case 535:case 678:case 504:case 1043:case 428:case 170:case 3072:case 50:case 2070:case 1045:break;case 35:h=!0;break;case 36:h=!1;break;case 37:h=!0;break;case 38:h=!1;break;default:if(!W.T){if(!h||o.WTF)throw new Error("Unexpected record 0x"+A.toString(16))}}},o),delete o.supbooks,delete o["!row"],!c["!ref"]&&(u.s.r<2e6||f&&(f.e.r>0||f.e.c>0||f.s.r>0||f.s.c>0))&&(c["!ref"]=Me(f||u)),o.sheetRows&&c["!ref"]){var oe=Ye(c["!ref"]);o.sheetRows<=+oe.e.r&&(oe.e.r=o.sheetRows-1,oe.e.r>u.e.r&&(oe.e.r=u.e.r),oe.e.r<oe.s.r&&(oe.s.r=oe.e.r),oe.e.c>u.e.c&&(oe.e.c=u.e.c),oe.e.c<oe.s.c&&(oe.s.c=oe.e.c),c["!fullref"]=c["!ref"],c["!ref"]=Me(oe))}return T.length>0&&(c["!merges"]=T),X.length>0&&(c["!cols"]=X),q.length>0&&(c["!rows"]=q),c}function vC(e,t,r,n,a,i,s){if(t.v===void 0)return!1;var o="";switch(t.t){case"b":o=t.v?"1":"0";break;case"d":t=st(t),t.z=t.z||Se[14],t.v=Ot(it(t.v)),t.t="n";break;case"n":case"e":o=""+t.v;break;default:o=t.v;break}var c={r,c:n};switch(c.s=Qn(a.cellXfs,t,a),t.l&&i["!links"].push([Ce(c),t.l]),t.c&&i["!comments"].push([Ce(c),t.c]),t.t){case"s":case"str":return a.bookSST?(o=wc(a.Strings,t.v,a.revStrings),c.t="s",c.v=o,s?fe(e,18,LF(t,c)):fe(e,7,PF(t,c))):(c.t="str",s?fe(e,17,YF(t,c)):fe(e,6,XF(t,c))),!0;case"n":return t.v==(t.v|0)&&t.v>-1e3&&t.v<1e3?s?fe(e,13,jF(t,c)):fe(e,2,WF(t,c)):s?fe(e,16,UF(t,c)):fe(e,5,VF(t,c)),!0;case"b":return c.t="b",s?fe(e,15,AF(t,c)):fe(e,4,FF(t,c)),!0;case"e":return c.t="e",s?fe(e,14,BF(t,c)):fe(e,3,RF(t,c)),!0}return s?fe(e,12,SF(t,c)):fe(e,1,EF(t,c)),!0}function wC(e,t,r,n){var a=Ye(t["!ref"]||"A1"),i,s="",o=[];fe(e,145);var c=Array.isArray(t),f=a.e.r;t["!rows"]&&(f=Math.max(a.e.r,t["!rows"].length-1));for(var u=a.s.r;u<=f;++u){s=yt(u),gF(e,t,a,u);var h=!1;if(u<=a.e.r)for(var d=a.s.c;d<=a.e.c;++d){u===a.s.r&&(o[d]=ut(d)),i=o[d]+s;var p=c?(t[u]||[])[d]:t[i];if(!p){h=!1;continue}h=vC(e,p,u,d,n,t,h)}}fe(e,146)}function _C(e,t){!t||!t["!merges"]||(fe(e,177,rC(t["!merges"].length)),t["!merges"].forEach(function(r){fe(e,176,tC(r))}),fe(e,178))}function yC(e,t){!t||!t["!cols"]||(fe(e,390),t["!cols"].forEach(function(r,n){r&&fe(e,60,lC(n,r))}),fe(e,391))}function kC(e,t){!t||!t["!ref"]||(fe(e,648),fe(e,649,dC(Ye(t["!ref"]))),fe(e,650))}function EC(e,t,r){t["!links"].forEach(function(n){if(n[1].Target){var a=et(r,-1,n[1].Target.replace(/#.*$/,""),je.HLINK);fe(e,494,aC(n,a))}}),delete t["!links"]}function bC(e,t,r,n){if(t["!comments"].length>0){var a=et(n,-1,"../drawings/vmlDrawing"+(r+1)+".vml",je.VML);fe(e,551,Kl("rId"+a)),t["!legacy"]=a}}function SC(e,t,r,n){if(t["!autofilter"]){var a=t["!autofilter"],i=typeof a.ref=="string"?a.ref:Me(a.ref);r.Workbook||(r.Workbook={Sheets:[]}),r.Workbook.Names||(r.Workbook.Names=[]);var s=r.Workbook.Names,o=hr(i);o.s.r==o.e.r&&(o.e.r=hr(t["!ref"]).e.r,i=Me(o));for(var c=0;c<s.length;++c){var f=s[c];if(f.Name=="_xlnm._FilterDatabase"&&f.Sheet==n){f.Ref="'"+r.SheetNames[n]+"'!"+i;break}}c==s.length&&s.push({Name:"_xlnm._FilterDatabase",Sheet:n,Ref:"'"+r.SheetNames[n]+"'!"+i}),fe(e,161,Ya(Ye(i))),fe(e,162)}}function TC(e,t,r){fe(e,133),fe(e,137,hC(t,r)),fe(e,138),fe(e,134)}function FC(e,t){t["!protect"]&&fe(e,535,mC(t["!protect"]))}function CC(e,t,r,n){var a=ur(),i=r.SheetNames[e],s=r.Sheets[i]||{},o=i;try{r&&r.Workbook&&(o=r.Workbook.Sheets[e].CodeName||o)}catch{}var c=Ye(s["!ref"]||"A1");if(c.e.c>16383||c.e.r>1048575){if(t.WTF)throw new Error("Range "+(s["!ref"]||"A1")+" exceeds format limit A1:XFD1048576");c.e.c=Math.min(c.e.c,16383),c.e.r=Math.min(c.e.c,1048575)}return s["!links"]=[],s["!comments"]=[],fe(a,129),(r.vbaraw||s["!outline"])&&fe(a,147,yF(o,s["!outline"])),fe(a,148,vF(c)),TC(a,s,r.Workbook),yC(a,s),wC(a,s,e,t),FC(a,s),SC(a,s,r,e),_C(a,s),EC(a,s,n),s["!margins"]&&fe(a,476,fC(s["!margins"])),(!t||t.ignoreEC||t.ignoreEC==null)&&kC(a,s),bC(a,s,e,n),fe(a,130),a.end()}function AC(e){var t=[],r=e.match(/^<c:numCache>/),n;(e.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(i){var s=i.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);s&&(t[+s[1]]=r?+s[2]:s[2])});var a=Ke((e.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/)||["","General"])[1]);return(e.match(/<c:f>(.*?)<\/c:f>/mg)||[]).forEach(function(i){n=i.replace(/<.*?>/g,"")}),[t,a,n]}function DC(e,t,r,n,a,i){var s=i||{"!type":"chart"};if(!e)return i;var o=0,c=0,f="A",u={s:{r:2e6,c:2e6},e:{r:0,c:0}};return(e.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(h){var d=AC(h);u.s.r=u.s.c=0,u.e.c=o,f=ut(o),d[0].forEach(function(p,g){s[f+yt(g)]={t:"n",v:p,z:d[1]},c=g}),u.e.r<c&&(u.e.r=c),++o}),o>0&&(s["!ref"]=Me(u)),s}function RC(e,t,r,n,a){if(!e)return e;n||(n={"!id":{}});var i={"!type":"chart","!drawel":null,"!rel":""},s,o=e.match(am);return o&&_c(o[0],i,a,r),(s=e.match(/drawing r:id="(.*?)"/))&&(i["!rel"]=s[1]),n["!id"][i["!rel"]]&&(i["!drawel"]=n["!id"][i["!rel"]]),i}function OC(e,t){e.l+=10;var r=Yt(e);return{name:r}}function BC(e,t,r,n,a){if(!e)return e;n||(n={"!id":{}});var i={"!type":"chart","!drawel":null,"!rel":""},s=!1;return Sn(e,function(c,f,u){switch(u){case 550:i["!rel"]=c;break;case 651:a.Sheets[r]||(a.Sheets[r]={}),c.name&&(a.Sheets[r].CodeName=c.name);break;case 562:case 652:case 669:case 679:case 551:case 552:case 476:case 3072:break;case 35:s=!0;break;case 36:s=!1;break;case 37:break;case 38:break;default:if(!(f.T>0)){if(!(f.T<0)){if(!s||t.WTF)throw new Error("Unexpected record 0x"+u.toString(16))}}}},t),n["!id"][i["!rel"]]&&(i["!drawel"]=n["!id"][i["!rel"]]),i}var yc=[["allowRefreshQuery",!1,"bool"],["autoCompressPictures",!0,"bool"],["backupFile",!1,"bool"],["checkCompatibility",!1,"bool"],["CodeName",""],["date1904",!1,"bool"],["defaultThemeVersion",0,"int"],["filterPrivacy",!1,"bool"],["hidePivotFieldList",!1,"bool"],["promptedSolutions",!1,"bool"],["publishItems",!1,"bool"],["refreshAllConnections",!1,"bool"],["saveExternalLinkValues",!0,"bool"],["showBorderUnselectedTables",!0,"bool"],["showInkAnnotation",!0,"bool"],["showObjects","all"],["showPivotChartFilter",!1,"bool"],["updateLinks","userSet"]],NC=[["activeTab",0,"int"],["autoFilterDateGrouping",!0,"bool"],["firstSheet",0,"int"],["minimized",!1,"bool"],["showHorizontalScroll",!0,"bool"],["showSheetTabs",!0,"bool"],["showVerticalScroll",!0,"bool"],["tabRatio",600,"int"],["visibility","visible"]],PC=[],IC=[["calcCompleted","true"],["calcMode","auto"],["calcOnSave","true"],["concurrentCalc","true"],["fullCalcOnLoad","false"],["fullPrecision","true"],["iterate","false"],["iterateCount","100"],["iterateDelta","0.001"],["refMode","A1"]];function lm(e,t){for(var r=0;r!=e.length;++r)for(var n=e[r],a=0;a!=t.length;++a){var i=t[a];if(n[i[0]]==null)n[i[0]]=i[1];else switch(i[2]){case"bool":typeof n[i[0]]=="string"&&(n[i[0]]=ot(n[i[0]]));break;case"int":typeof n[i[0]]=="string"&&(n[i[0]]=parseInt(n[i[0]],10));break}}}function cm(e,t){for(var r=0;r!=t.length;++r){var n=t[r];if(e[n[0]]==null)e[n[0]]=n[1];else switch(n[2]){case"bool":typeof e[n[0]]=="string"&&(e[n[0]]=ot(e[n[0]]));break;case"int":typeof e[n[0]]=="string"&&(e[n[0]]=parseInt(e[n[0]],10));break}}}function fm(e){cm(e.WBProps,yc),cm(e.CalcPr,IC),lm(e.WBView,NC),lm(e.Sheets,PC),ti.date1904=ot(e.WBProps.date1904)}function LC(e){return!e.Workbook||!e.Workbook.WBProps?"false":ot(e.Workbook.WBProps.date1904)?"true":"false"}var MC="][*?/\\".split("");function um(e,t){if(e.length>31){if(t)return!1;throw new Error("Sheet names cannot exceed 31 chars")}var r=!0;return MC.forEach(function(n){if(e.indexOf(n)!=-1){if(!t)throw new Error("Sheet name cannot contain : \\ / ? * [ ]");r=!1}}),r}function VC(e,t,r){e.forEach(function(n,a){um(n);for(var i=0;i<a;++i)if(n==e[i])throw new Error("Duplicate Sheet Name: "+n);if(r){var s=t&&t[a]&&t[a].CodeName||n;if(s.charCodeAt(0)==95&&s.length>22)throw new Error("Bad Code Name: Worksheet"+s)}})}function UC(e){if(!e||!e.SheetNames||!e.Sheets)throw new Error("Invalid Workbook");if(!e.SheetNames.length)throw new Error("Workbook is empty");var t=e.Workbook&&e.Workbook.Sheets||[];VC(e.SheetNames,t,!!e.vbaraw);for(var r=0;r<e.SheetNames.length;++r)LT(e.Sheets[e.SheetNames[r]],e.SheetNames[r],r)}var $C=/<\w+:workbook/;function WC(e,t){if(!e)throw new Error("Could not find file");var r={AppVersion:{},WBProps:{},WBView:[],Sheets:[],CalcPr:{},Names:[],xmlns:""},n=!1,a="xmlns",i={},s=0;if(e.replace(Xt,function(c,f){var u=Re(c);switch(an(u[0])){case"<?xml":break;case"<workbook":c.match($C)&&(a="xmlns"+c.match(/<(\w+):/)[1]),r.xmlns=u[a];break;case"</workbook>":break;case"<fileVersion":delete u[0],r.AppVersion=u;break;case"<fileVersion/>":case"</fileVersion>":break;case"<fileSharing":break;case"<fileSharing/>":break;case"<workbookPr":case"<workbookPr/>":yc.forEach(function(h){if(u[h[0]]!=null)switch(h[2]){case"bool":r.WBProps[h[0]]=ot(u[h[0]]);break;case"int":r.WBProps[h[0]]=parseInt(u[h[0]],10);break;default:r.WBProps[h[0]]=u[h[0]]}}),u.codeName&&(r.WBProps.CodeName=nt(u.codeName));break;case"</workbookPr>":break;case"<workbookProtection":break;case"<workbookProtection/>":break;case"<bookViews":case"<bookViews>":case"</bookViews>":break;case"<workbookView":case"<workbookView/>":delete u[0],r.WBView.push(u);break;case"</workbookView>":break;case"<sheets":case"<sheets>":case"</sheets>":break;case"<sheet":switch(u.state){case"hidden":u.Hidden=1;break;case"veryHidden":u.Hidden=2;break;default:u.Hidden=0}delete u.state,u.name=Ke(nt(u.name)),delete u[0],r.Sheets.push(u);break;case"</sheet>":break;case"<functionGroups":case"<functionGroups/>":break;case"<functionGroup":break;case"<externalReferences":case"</externalReferences>":case"<externalReferences>":break;case"<externalReference":break;case"<definedNames/>":break;case"<definedNames>":case"<definedNames":n=!0;break;case"</definedNames>":n=!1;break;case"<definedName":i={},i.Name=nt(u.name),u.comment&&(i.Comment=u.comment),u.localSheetId&&(i.Sheet=+u.localSheetId),ot(u.hidden||"0")&&(i.Hidden=!0),s=f+c.length;break;case"</definedName>":i.Ref=Ke(nt(e.slice(s,f))),r.Names.push(i);break;case"<definedName/>":break;case"<calcPr":delete u[0],r.CalcPr=u;break;case"<calcPr/>":delete u[0],r.CalcPr=u;break;case"</calcPr>":break;case"<oleSize":break;case"<customWorkbookViews>":case"</customWorkbookViews>":case"<customWorkbookViews":break;case"<customWorkbookView":case"</customWorkbookView>":break;case"<pivotCaches>":case"</pivotCaches>":case"<pivotCaches":break;case"<pivotCache":break;case"<smartTagPr":case"<smartTagPr/>":break;case"<smartTagTypes":case"<smartTagTypes>":case"</smartTagTypes>":break;case"<smartTagType":break;case"<webPublishing":case"<webPublishing/>":break;case"<fileRecoveryPr":case"<fileRecoveryPr/>":break;case"<webPublishObjects>":case"<webPublishObjects":case"</webPublishObjects>":break;case"<webPublishObject":break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;case"<ArchID":break;case"<AlternateContent":case"<AlternateContent>":n=!0;break;case"</AlternateContent>":n=!1;break;case"<revisionPtr":break;default:if(!n&&t.WTF)throw new Error("unrecognized "+u[0]+" in workbook")}return c}),da.indexOf(r.xmlns)===-1)throw new Error("Unknown Namespace: "+r.xmlns);return fm(r),r}function hm(e){var t=[_t];t[t.length]=pe("workbook",null,{xmlns:da[0],"xmlns:r":Bt.r});var r=e.Workbook&&(e.Workbook.Names||[]).length>0,n={codeName:"ThisWorkbook"};e.Workbook&&e.Workbook.WBProps&&(yc.forEach(function(o){e.Workbook.WBProps[o[0]]!=null&&e.Workbook.WBProps[o[0]]!=o[1]&&(n[o[0]]=e.Workbook.WBProps[o[0]])}),e.Workbook.WBProps.CodeName&&(n.codeName=e.Workbook.WBProps.CodeName,delete n.CodeName)),t[t.length]=pe("workbookPr",null,n);var a=e.Workbook&&e.Workbook.Sheets||[],i=0;if(a&&a[0]&&a[0].Hidden){for(t[t.length]="<bookViews>",i=0;i!=e.SheetNames.length&&!(!a[i]||!a[i].Hidden);++i);i==e.SheetNames.length&&(i=0),t[t.length]='<workbookView firstSheet="'+i+'" activeTab="'+i+'"/>',t[t.length]="</bookViews>"}for(t[t.length]="<sheets>",i=0;i!=e.SheetNames.length;++i){var s={name:Qe(e.SheetNames[i].slice(0,31))};if(s.sheetId=""+(i+1),s["r:id"]="rId"+(i+1),a[i])switch(a[i].Hidden){case 1:s.state="hidden";break;case 2:s.state="veryHidden";break}t[t.length]=pe("sheet",null,s)}return t[t.length]="</sheets>",r&&(t[t.length]="<definedNames>",e.Workbook&&e.Workbook.Names&&e.Workbook.Names.forEach(function(o){var c={name:o.Name};o.Comment&&(c.comment=o.Comment),o.Sheet!=null&&(c.localSheetId=""+o.Sheet),o.Hidden&&(c.hidden="1"),o.Ref&&(t[t.length]=pe("definedName",Qe(o.Ref),c))}),t[t.length]="</definedNames>"),t.length>2&&(t[t.length]="</workbook>",t[1]=t[1].replace("/>",">")),t.join("")}function HC(e,t){var r={};return r.Hidden=e.read_shift(4),r.iTabID=e.read_shift(4),r.strRelID=Xl(e),r.name=Yt(e),r}function jC(e,t){return t||(t=ne(127)),t.write_shift(4,e.Hidden),t.write_shift(4,e.iTabID),Kl(e.strRelID,t),Mt(e.name.slice(0,31),t),t.length>t.l?t.slice(0,t.l):t}function zC(e,t){var r={},n=e.read_shift(4);r.defaultThemeVersion=e.read_shift(4);var a=t>8?Yt(e):"";return a.length>0&&(r.CodeName=a),r.autoCompressPictures=!!(n&65536),r.backupFile=!!(n&64),r.checkCompatibility=!!(n&4096),r.date1904=!!(n&1),r.filterPrivacy=!!(n&8),r.hidePivotFieldList=!!(n&1024),r.promptedSolutions=!!(n&16),r.publishItems=!!(n&2048),r.refreshAllConnections=!!(n&262144),r.saveExternalLinkValues=!!(n&128),r.showBorderUnselectedTables=!!(n&4),r.showInkAnnotation=!!(n&32),r.showObjects=["all","placeholders","none"][n>>13&3],r.showPivotChartFilter=!!(n&32768),r.updateLinks=["userSet","never","always"][n>>8&3],r}function GC(e,t){t||(t=ne(72));var r=0;return e&&e.filterPrivacy&&(r|=8),t.write_shift(4,r),t.write_shift(4,0),Dh(e&&e.CodeName||"ThisWorkbook",t),t.slice(0,t.l)}function XC(e,t){var r={};return e.read_shift(4),r.ArchID=e.read_shift(4),e.l+=t-8,r}function KC(e,t,r){var n=e.l+t;e.l+=4,e.l+=1;var a=e.read_shift(4),i=b_(e),s=RT(e,0,r),o=Gl(e);e.l=n;var c={Name:i,Ptg:s};return a<268435455&&(c.Sheet=a),o&&(c.Comment=o),c}function YC(e,t){var r={AppVersion:{},WBProps:{},WBView:[],Sheets:[],CalcPr:{},xmlns:""},n=[],a=!1;t||(t={}),t.biff=12;var i=[],s=[[]];return s.SheetNames=[],s.XTI=[],fs[16]={n:"BrtFRTArchID$",f:XC},Sn(e,function(c,f,u){switch(u){case 156:s.SheetNames.push(c.name),r.Sheets.push(c);break;case 153:r.WBProps=c;break;case 39:c.Sheet!=null&&(t.SID=c.Sheet),c.Ref=Qt(c.Ptg,null,null,s,t),delete t.SID,delete c.Ptg,i.push(c);break;case 1036:break;case 357:case 358:case 355:case 667:s[0].length?s.push([u,c]):s[0]=[u,c],s[s.length-1].XTI=[];break;case 362:s.length===0&&(s[0]=[],s[0].XTI=[]),s[s.length-1].XTI=s[s.length-1].XTI.concat(c),s.XTI=s.XTI.concat(c);break;case 361:break;case 2071:case 158:case 143:case 664:case 353:break;case 3072:case 3073:case 534:case 677:case 157:case 610:case 2050:case 155:case 548:case 676:case 128:case 665:case 2128:case 2125:case 549:case 2053:case 596:case 2076:case 2075:case 2082:case 397:case 154:case 1117:case 553:case 2091:break;case 35:n.push(u),a=!0;break;case 36:n.pop(),a=!1;break;case 37:n.push(u),a=!0;break;case 38:n.pop(),a=!1;break;case 16:break;default:if(!f.T){if(!a||t.WTF&&n[n.length-1]!=37&&n[n.length-1]!=35)throw new Error("Unexpected record 0x"+u.toString(16))}}},t),fm(r),r.Names=i,r.supbooks=s,r}function qC(e,t){fe(e,143);for(var r=0;r!=t.SheetNames.length;++r){var n=t.Workbook&&t.Workbook.Sheets&&t.Workbook.Sheets[r]&&t.Workbook.Sheets[r].Hidden||0,a={Hidden:n,iTabID:r+1,strRelID:"rId"+(r+1),name:t.SheetNames[r]};fe(e,156,jC(a))}fe(e,144)}function JC(e,t){t||(t=ne(127));for(var r=0;r!=4;++r)t.write_shift(4,0);return Mt("SheetJS",t),Mt(Js.version,t),Mt(Js.version,t),Mt("7262",t),t.length>t.l?t.slice(0,t.l):t}function ZC(e,t){t||(t=ne(29)),t.write_shift(-4,0),t.write_shift(-4,460),t.write_shift(4,28800),t.write_shift(4,17600),t.write_shift(4,500),t.write_shift(4,e),t.write_shift(4,e);var r=120;return t.write_shift(1,r),t.length>t.l?t.slice(0,t.l):t}function QC(e,t){if(!(!t.Workbook||!t.Workbook.Sheets)){for(var r=t.Workbook.Sheets,n=0,a=-1,i=-1;n<r.length;++n)!r[n]||!r[n].Hidden&&a==-1?a=n:r[n].Hidden==1&&i==-1&&(i=n);i>a||(fe(e,135),fe(e,158,ZC(a)),fe(e,136))}}function e4(e,t){var r=ur();return fe(r,131),fe(r,128,JC()),fe(r,153,GC(e.Workbook&&e.Workbook.WBProps||null)),QC(r,e),qC(r,e),fe(r,132),r.end()}function t4(e,t,r){return t.slice(-4)===".bin"?YC(e,r):WC(e,r)}function r4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?xC(e,n,r,a,i,s,o):KT(e,n,r,a,i,s,o)}function n4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?BC(e,n,r,a,i):RC(e,n,r,a,i)}function a4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?sS():oS()}function i4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?aS():iS()}function s4(e,t,r,n){return t.slice(-4)===".bin"?tb(e,r,n):HE(e,r,n)}function o4(e,t,r){return Md(e,r)}function l4(e,t,r){return t.slice(-4)===".bin"?lE(e,r):iE(e,r)}function c4(e,t,r){return t.slice(-4)===".bin"?Qb(e,r):jb(e,r)}function f4(e,t,r){return t.slice(-4)===".bin"?$b(e):Vb(e)}function u4(e,t,r,n){return r.slice(-4)===".bin"?Wb(e,t,r,n):void 0}function h4(e,t,r){return t.slice(-4)===".bin"?Ib(e,t,r):Mb(e,t,r)}function d4(e,t,r){return(t.slice(-4)===".bin"?e4:hm)(e)}function m4(e,t,r,n,a){return(t.slice(-4)===".bin"?CC:im)(e,r,n,a)}function p4(e,t,r){return(t.slice(-4)===".bin"?ub:Pd)(e,r)}function g4(e,t,r){return(t.slice(-4)===".bin"?uE:Fd)(e,r)}function x4(e,t,r){return(t.slice(-4)===".bin"?eS:Wd)(e)}function v4(e){return(e.slice(-4)===".bin"?Lb:Vd)()}var dm=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g,mm=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;function Gr(e,t){var r=e.split(/\s+/),n=[];if(t||(n[0]=r[0]),r.length===1)return n;var a=e.match(dm),i,s,o,c;if(a)for(c=0;c!=a.length;++c)i=a[c].match(mm),(s=i[1].indexOf(":"))===-1?n[i[1]]=i[2].slice(1,i[2].length-1):(i[1].slice(0,6)==="xmlns:"?o="xmlns"+i[1].slice(6):o=i[1].slice(s+1),n[o]=i[2].slice(1,i[2].length-1));return n}function w4(e){var t=e.split(/\s+/),r={};if(t.length===1)return r;var n=e.match(dm),a,i,s,o;if(n)for(o=0;o!=n.length;++o)a=n[o].match(mm),(i=a[1].indexOf(":"))===-1?r[a[1]]=a[2].slice(1,a[2].length-1):(a[1].slice(0,6)==="xmlns:"?s="xmlns"+a[1].slice(6):s=a[1].slice(i+1),r[s]=a[2].slice(1,a[2].length-1));return r}var ls;function _4(e,t){var r=ls[e]||Ke(e);return r==="General"?fa(t):yr(r,t)}function y4(e,t,r,n){var a=n;switch((r[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]){case"boolean":a=ot(n);break;case"i2":case"int":a=parseInt(n,10);break;case"r4":case"float":a=parseFloat(n);break;case"date":case"dateTime.tz":a=it(n);break;case"i8":case"string":case"fixed":case"uuid":case"bin.base64":break;default:throw new Error("bad custprop:"+r[0])}e[Ke(t)]=a}function k4(e,t,r){if(e.t!=="z"){if(!r||r.cellText!==!1)try{e.t==="e"?e.w=e.w||Fn[e.v]:t==="General"?e.t==="n"?(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Li(e.v):e.w=fa(e.v):e.w=_4(t||"General",e.v)}catch(i){if(r.WTF)throw i}try{var n=ls[t]||t||"General";if(r.cellNF&&(e.z=n),r.cellDates&&e.t=="n"&&ua(n)){var a=Xn(e.v);a&&(e.t="d",e.v=new Date(a.y,a.m-1,a.d,a.H,a.M,a.S,a.u))}}catch(i){if(r.WTF)throw i}}}function E4(e,t,r){if(r.cellStyles&&t.Interior){var n=t.Interior;n.Pattern&&(n.patternType=PE[n.Pattern]||n.Pattern)}e[t.ID]=t}function b4(e,t,r,n,a,i,s,o,c,f){var u="General",h=n.StyleID,d={};f=f||{};var p=[],g=0;for(h===void 0&&o&&(h=o.StyleID),h===void 0&&s&&(h=s.StyleID);i[h]!==void 0&&(i[h].nf&&(u=i[h].nf),i[h].Interior&&p.push(i[h].Interior),!!i[h].Parent);)h=i[h].Parent;switch(r.Type){case"Boolean":n.t="b",n.v=ot(e);break;case"String":n.t="s",n.r=nh(Ke(e)),n.v=e.indexOf("<")>-1?Ke(t||e).replace(/<.*?>/g,""):n.r;break;case"DateTime":e.slice(-1)!="Z"&&(e+="Z"),n.v=(it(e)-new Date(Date.UTC(1899,11,30)))/(24*60*60*1e3),n.v!==n.v?n.v=Ke(e):n.v<60&&(n.v=n.v-1),(!u||u=="General")&&(u="yyyy-mm-dd");case"Number":n.v===void 0&&(n.v=+e),n.t||(n.t="n");break;case"Error":n.t="e",n.v=Lh[e],f.cellText!==!1&&(n.w=e);break;default:e==""&&t==""?n.t="z":(n.t="s",n.v=nh(t||e));break}if(k4(n,u,f),f.cellFormula!==!1)if(n.Formula){var m=Ke(n.Formula);m.charCodeAt(0)==61&&(m=m.slice(1)),n.f=ei(m,a),delete n.Formula,n.ArrayRange=="RC"?n.F=ei("RC:RC",a):n.ArrayRange&&(n.F=ei(n.ArrayRange,a),c.push([Ye(n.F),n.F]))}else for(g=0;g<c.length;++g)a.r>=c[g][0].s.r&&a.r<=c[g][0].e.r&&a.c>=c[g][0].s.c&&a.c<=c[g][0].e.c&&(n.F=c[g][1]);f.cellStyles&&(p.forEach(function(x){!d.patternType&&x.patternType&&(d.patternType=x.patternType)}),n.s=d),n.StyleID!==void 0&&(n.ixfe=n.StyleID)}function S4(e){e.t=e.v||"",e.t=e.t.replace(/\r\n/g,`
`).replace(/\r/g,`
`),e.v=e.w=e.ixfe=void 0}function kc(e,t){var r=t||{};za();var n=Ni(Vl(e));(r.type=="binary"||r.type=="array"||r.type=="base64")&&(n=nt(n));var a=n.slice(0,1024).toLowerCase(),i=!1;if(a=a.replace(/".*?"/g,""),(a.indexOf(">")&1023)>Math.min(a.indexOf(",")&1023,a.indexOf(";")&1023)){var s=st(r);return s.type="string",Ja.to_workbook(n,s)}if(a.indexOf("<?xml")==-1&&["html","table","head","meta","script","style","div"].forEach(function(Et){a.indexOf("<"+Et)>=0&&(i=!0)}),i)return fA(n,r);ls={"General Number":"General","General Date":Se[22],"Long Date":"dddd, mmmm dd, yyyy","Medium Date":Se[15],"Short Date":Se[14],"Long Time":Se[19],"Medium Time":Se[18],"Short Time":Se[20],Currency:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',Fixed:Se[2],Standard:Se[4],Percent:Se[10],Scientific:Se[11],"Yes/No":'"Yes";"Yes";"No";@',"True/False":'"True";"True";"False";@',"On/Off":'"Yes";"Yes";"No";@'};var o,c=[],f,u={},h=[],d=r.dense?[]:{},p="",g={},m={},x=Gr('<Data ss:Type="String">'),v=0,k=0,w=0,S={s:{r:2e6,c:2e6},e:{r:0,c:0}},b={},T={},y="",O=0,B=[],H={},j={},I=0,X=[],q=[],te={},ae=[],oe,ue=!1,z=[],W=[],A={},_=0,F=0,D={Sheets:[],WBProps:{date1904:!1}},M={};Hi.lastIndex=0,n=n.replace(/<!--([\s\S]*?)-->/mg,"");for(var K="";o=Hi.exec(n);)switch(o[3]=(K=o[3]).toLowerCase()){case"data":if(K=="data"){if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break}if(c[c.length-1][1])break;o[1]==="/"?b4(n.slice(v,o.index),y,x,c[c.length-1][0]=="comment"?te:g,{c:k,r:w},b,ae[k],m,z,r):(y="",x=Gr(o[0]),v=o.index+o[0].length);break;case"cell":if(o[1]==="/")if(q.length>0&&(g.c=q),(!r.sheetRows||r.sheetRows>w)&&g.v!==void 0&&(r.dense?(d[w]||(d[w]=[]),d[w][k]=g):d[ut(k)+yt(w)]=g),g.HRef&&(g.l={Target:Ke(g.HRef)},g.HRefScreenTip&&(g.l.Tooltip=g.HRefScreenTip),delete g.HRef,delete g.HRefScreenTip),(g.MergeAcross||g.MergeDown)&&(_=k+(parseInt(g.MergeAcross,10)|0),F=w+(parseInt(g.MergeDown,10)|0),B.push({s:{c:k,r:w},e:{c:_,r:F}})),!r.sheetStubs)g.MergeAcross?k=_+1:++k;else if(g.MergeAcross||g.MergeDown){for(var J=k;J<=_;++J)for(var re=w;re<=F;++re)(J>k||re>w)&&(r.dense?(d[re]||(d[re]=[]),d[re][J]={t:"z"}):d[ut(J)+yt(re)]={t:"z"});k=_+1}else++k;else g=w4(o[0]),g.Index&&(k=+g.Index-1),k<S.s.c&&(S.s.c=k),k>S.e.c&&(S.e.c=k),o[0].slice(-2)==="/>"&&++k,q=[];break;case"row":o[1]==="/"||o[0].slice(-2)==="/>"?(w<S.s.r&&(S.s.r=w),w>S.e.r&&(S.e.r=w),o[0].slice(-2)==="/>"&&(m=Gr(o[0]),m.Index&&(w=+m.Index-1)),k=0,++w):(m=Gr(o[0]),m.Index&&(w=+m.Index-1),A={},(m.AutoFitHeight=="0"||m.Height)&&(A.hpx=parseInt(m.Height,10),A.hpt=ts(A.hpx),W[w]=A),m.Hidden=="1"&&(A.hidden=!0,W[w]=A));break;case"worksheet":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"));h.push(p),S.s.r<=S.e.r&&S.s.c<=S.e.c&&(d["!ref"]=Me(S),r.sheetRows&&r.sheetRows<=S.e.r&&(d["!fullref"]=d["!ref"],S.e.r=r.sheetRows-1,d["!ref"]=Me(S))),B.length&&(d["!merges"]=B),ae.length>0&&(d["!cols"]=ae),W.length>0&&(d["!rows"]=W),u[p]=d}else S={s:{r:2e6,c:2e6},e:{r:0,c:0}},w=k=0,c.push([o[3],!1]),f=Gr(o[0]),p=Ke(f.Name),d=r.dense?[]:{},B=[],z=[],W=[],M={name:p,Hidden:0},D.Sheets.push(M);break;case"table":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else{if(o[0].slice(-2)=="/>")break;c.push([o[3],!1]),ae=[],ue=!1}break;case"style":o[1]==="/"?E4(b,T,r):T=Gr(o[0]);break;case"numberformat":T.nf=Ke(Gr(o[0]).Format||"General"),ls[T.nf]&&(T.nf=ls[T.nf]);for(var le=0;le!=392&&Se[le]!=T.nf;++le);if(le==392){for(le=57;le!=392;++le)if(Se[le]==null){nn(T.nf,le);break}}break;case"column":if(c[c.length-1][0]!=="table")break;if(oe=Gr(o[0]),oe.Hidden&&(oe.hidden=!0,delete oe.Hidden),oe.Width&&(oe.wpx=parseInt(oe.Width,10)),!ue&&oe.wpx>10){ue=!0,Zt=Bd;for(var ce=0;ce<ae.length;++ce)ae[ce]&&Jn(ae[ce])}ue&&Jn(oe),ae[oe.Index-1||ae.length]=oe;for(var Be=0;Be<+oe.Span;++Be)ae[ae.length]=st(oe);break;case"namedrange":if(o[1]==="/")break;D.Names||(D.Names=[]);var V=Re(o[0]),We={Name:V.Name,Ref:ei(V.RefersTo.slice(1),{r:0,c:0})};D.Sheets.length>0&&(We.Sheet=D.Sheets.length-1),D.Names.push(We);break;case"namedcell":break;case"b":break;case"i":break;case"u":break;case"s":break;case"em":break;case"h2":break;case"h3":break;case"sub":break;case"sup":break;case"span":break;case"alignment":break;case"borders":break;case"border":break;case"font":if(o[0].slice(-2)==="/>")break;o[1]==="/"?y+=n.slice(O,o.index):O=o.index+o[0].length;break;case"interior":if(!r.cellStyles)break;T.Interior=Gr(o[0]);break;case"protection":break;case"author":case"title":case"description":case"created":case"keywords":case"subject":case"category":case"company":case"lastauthor":case"lastsaved":case"lastprinted":case"version":case"revision":case"totaltime":case"hyperlinkbase":case"manager":case"contentstatus":case"identifier":case"language":case"appname":if(o[0].slice(-2)==="/>")break;o[1]==="/"?Y_(H,K,n.slice(I,o.index)):I=o.index+o[0].length;break;case"paragraphs":break;case"styles":case"workbook":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else c.push([o[3],!1]);break;case"comment":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"));S4(te),q.push(te)}else c.push([o[3],!1]),f=Gr(o[0]),te={a:f.Author};break;case"autofilter":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else if(o[0].charAt(o[0].length-2)!=="/"){var Oe=Gr(o[0]);d["!autofilter"]={ref:ei(Oe.Range).replace(/\$/g,"")},c.push([o[3],!0])}break;case"name":break;case"datavalidation":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break;case"pixelsperinch":break;case"componentoptions":case"documentproperties":case"customdocumentproperties":case"officedocumentsettings":case"pivottable":case"pivotcache":case"names":case"mapinfo":case"pagebreaks":case"querytable":case"sorting":case"schema":case"conditionalformatting":case"smarttagtype":case"smarttags":case"excelworkbook":case"workbookoptions":case"worksheetoptions":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break;case"null":break;default:if(c.length==0&&o[3]=="document"||c.length==0&&o[3]=="uof")return Tm(n,r);var Ue=!0;switch(c[c.length-1][0]){case"officedocumentsettings":switch(o[3]){case"allowpng":break;case"removepersonalinformation":break;case"downloadcomponents":break;case"locationofcomponents":break;case"colors":break;case"color":break;case"index":break;case"rgb":break;case"targetscreensize":break;case"readonlyrecommended":break;default:Ue=!1}break;case"componentoptions":switch(o[3]){case"toolbar":break;case"hideofficelogo":break;case"spreadsheetautofit":break;case"label":break;case"caption":break;case"maxheight":break;case"maxwidth":break;case"nextsheetnumber":break;default:Ue=!1}break;case"excelworkbook":switch(o[3]){case"date1904":D.WBProps.date1904=!0;break;case"windowheight":break;case"windowwidth":break;case"windowtopx":break;case"windowtopy":break;case"tabratio":break;case"protectstructure":break;case"protectwindow":break;case"protectwindows":break;case"activesheet":break;case"displayinknotes":break;case"firstvisiblesheet":break;case"supbook":break;case"sheetname":break;case"sheetindex":break;case"sheetindexfirst":break;case"sheetindexlast":break;case"dll":break;case"acceptlabelsinformulas":break;case"donotsavelinkvalues":break;case"iteration":break;case"maxiterations":break;case"maxchange":break;case"path":break;case"xct":break;case"count":break;case"selectedsheets":break;case"calculation":break;case"uncalced":break;case"startupprompt":break;case"crn":break;case"externname":break;case"formula":break;case"colfirst":break;case"collast":break;case"wantadvise":break;case"boolean":break;case"error":break;case"text":break;case"ole":break;case"noautorecover":break;case"publishobjects":break;case"donotcalculatebeforesave":break;case"number":break;case"refmoder1c1":break;case"embedsavesmarttags":break;default:Ue=!1}break;case"workbookoptions":switch(o[3]){case"owcversion":break;case"height":break;case"width":break;default:Ue=!1}break;case"worksheetoptions":switch(o[3]){case"visible":if(o[0].slice(-2)!=="/>")if(o[1]==="/")switch(n.slice(I,o.index)){case"SheetHidden":M.Hidden=1;break;case"SheetVeryHidden":M.Hidden=2;break}else I=o.index+o[0].length;break;case"header":d["!margins"]||Ta(d["!margins"]={},"xlml"),isNaN(+Re(o[0]).Margin)||(d["!margins"].header=+Re(o[0]).Margin);break;case"footer":d["!margins"]||Ta(d["!margins"]={},"xlml"),isNaN(+Re(o[0]).Margin)||(d["!margins"].footer=+Re(o[0]).Margin);break;case"pagemargins":var Pe=Re(o[0]);d["!margins"]||Ta(d["!margins"]={},"xlml"),isNaN(+Pe.Top)||(d["!margins"].top=+Pe.Top),isNaN(+Pe.Left)||(d["!margins"].left=+Pe.Left),isNaN(+Pe.Right)||(d["!margins"].right=+Pe.Right),isNaN(+Pe.Bottom)||(d["!margins"].bottom=+Pe.Bottom);break;case"displayrighttoleft":D.Views||(D.Views=[]),D.Views[0]||(D.Views[0]={}),D.Views[0].RTL=!0;break;case"freezepanes":break;case"frozennosplit":break;case"splithorizontal":case"splitvertical":break;case"donotdisplaygridlines":break;case"activerow":break;case"activecol":break;case"toprowbottompane":break;case"leftcolumnrightpane":break;case"unsynced":break;case"print":break;case"printerrors":break;case"panes":break;case"scale":break;case"pane":break;case"number":break;case"layout":break;case"pagesetup":break;case"selected":break;case"protectobjects":break;case"enableselection":break;case"protectscenarios":break;case"validprinterinfo":break;case"horizontalresolution":break;case"verticalresolution":break;case"numberofcopies":break;case"activepane":break;case"toprowvisible":break;case"leftcolumnvisible":break;case"fittopage":break;case"rangeselection":break;case"papersizeindex":break;case"pagelayoutzoom":break;case"pagebreakzoom":break;case"filteron":break;case"fitwidth":break;case"fitheight":break;case"commentslayout":break;case"zoom":break;case"lefttoright":break;case"gridlines":break;case"allowsort":break;case"allowfilter":break;case"allowinsertrows":break;case"allowdeleterows":break;case"allowinsertcols":break;case"allowdeletecols":break;case"allowinserthyperlinks":break;case"allowformatcells":break;case"allowsizecols":break;case"allowsizerows":break;case"nosummaryrowsbelowdetail":d["!outline"]||(d["!outline"]={}),d["!outline"].above=!0;break;case"tabcolorindex":break;case"donotdisplayheadings":break;case"showpagelayoutzoom":break;case"nosummarycolumnsrightdetail":d["!outline"]||(d["!outline"]={}),d["!outline"].left=!0;break;case"blackandwhite":break;case"donotdisplayzeros":break;case"displaypagebreak":break;case"rowcolheadings":break;case"donotdisplayoutline":break;case"noorientation":break;case"allowusepivottables":break;case"zeroheight":break;case"viewablerange":break;case"selection":break;case"protectcontents":break;default:Ue=!1}break;case"pivottable":case"pivotcache":switch(o[3]){case"immediateitemsondrop":break;case"showpagemultipleitemlabel":break;case"compactrowindent":break;case"location":break;case"pivotfield":break;case"orientation":break;case"layoutform":break;case"layoutsubtotallocation":break;case"layoutcompactrow":break;case"position":break;case"pivotitem":break;case"datatype":break;case"datafield":break;case"sourcename":break;case"parentfield":break;case"ptlineitems":break;case"ptlineitem":break;case"countofsameitems":break;case"item":break;case"itemtype":break;case"ptsource":break;case"cacheindex":break;case"consolidationreference":break;case"filename":break;case"reference":break;case"nocolumngrand":break;case"norowgrand":break;case"blanklineafteritems":break;case"hidden":break;case"subtotal":break;case"basefield":break;case"mapchilditems":break;case"function":break;case"refreshonfileopen":break;case"printsettitles":break;case"mergelabels":break;case"defaultversion":break;case"refreshname":break;case"refreshdate":break;case"refreshdatecopy":break;case"versionlastrefresh":break;case"versionlastupdate":break;case"versionupdateablemin":break;case"versionrefreshablemin":break;case"calculation":break;default:Ue=!1}break;case"pagebreaks":switch(o[3]){case"colbreaks":break;case"colbreak":break;case"rowbreaks":break;case"rowbreak":break;case"colstart":break;case"colend":break;case"rowend":break;default:Ue=!1}break;case"autofilter":switch(o[3]){case"autofiltercolumn":break;case"autofiltercondition":break;case"autofilterand":break;case"autofilteror":break;default:Ue=!1}break;case"querytable":switch(o[3]){case"id":break;case"autoformatfont":break;case"autoformatpattern":break;case"querysource":break;case"querytype":break;case"enableredirections":break;case"refreshedinxl9":break;case"urlstring":break;case"htmltables":break;case"connection":break;case"commandtext":break;case"refreshinfo":break;case"notitles":break;case"nextid":break;case"columninfo":break;case"overwritecells":break;case"donotpromptforfile":break;case"textwizardsettings":break;case"source":break;case"number":break;case"decimal":break;case"thousandseparator":break;case"trailingminusnumbers":break;case"formatsettings":break;case"fieldtype":break;case"delimiters":break;case"tab":break;case"comma":break;case"autoformatname":break;case"versionlastedit":break;case"versionlastrefresh":break;default:Ue=!1}break;case"datavalidation":switch(o[3]){case"range":break;case"type":break;case"min":break;case"max":break;case"sort":break;case"descending":break;case"order":break;case"casesensitive":break;case"value":break;case"errorstyle":break;case"errormessage":break;case"errortitle":break;case"inputmessage":break;case"inputtitle":break;case"combohide":break;case"inputhide":break;case"condition":break;case"qualifier":break;case"useblank":break;case"value1":break;case"value2":break;case"format":break;case"cellrangelist":break;default:Ue=!1}break;case"sorting":case"conditionalformatting":switch(o[3]){case"range":break;case"type":break;case"min":break;case"max":break;case"sort":break;case"descending":break;case"order":break;case"casesensitive":break;case"value":break;case"errorstyle":break;case"errormessage":break;case"errortitle":break;case"cellrangelist":break;case"inputmessage":break;case"inputtitle":break;case"combohide":break;case"inputhide":break;case"condition":break;case"qualifier":break;case"useblank":break;case"value1":break;case"value2":break;case"format":break;default:Ue=!1}break;case"mapinfo":case"schema":case"data":switch(o[3]){case"map":break;case"entry":break;case"range":break;case"xpath":break;case"field":break;case"xsdtype":break;case"filteron":break;case"aggregate":break;case"elementtype":break;case"attributetype":break;case"schema":case"element":case"complextype":case"datatype":case"all":case"attribute":case"extends":break;case"row":break;default:Ue=!1}break;case"smarttags":break;default:Ue=!1;break}if(Ue||o[3].match(/!\[CDATA/))break;if(!c[c.length-1][1])throw"Unrecognized tag: "+o[3]+"|"+c.join("|");if(c[c.length-1][0]==="customdocumentproperties"){if(o[0].slice(-2)==="/>")break;o[1]==="/"?y4(j,K,X,n.slice(I,o.index)):(X=o,I=o.index+o[0].length);break}if(r.WTF)throw"Unrecognized tag: "+o[3]+"|"+c.join("|")}var we={};return!r.bookSheets&&!r.bookProps&&(we.Sheets=u),we.SheetNames=h,we.Workbook=D,we.SSF=st(Se),we.Props=H,we.Custprops=j,we}function Ec(e,t){switch(Dc(t=t||{}),t.type||"base64"){case"base64":return kc(wr(e),t);case"binary":case"buffer":case"file":return kc(e,t);case"array":return kc(Gn(e),t)}}function T4(e,t){var r=[];return e.Props&&r.push(q_(e.Props,t)),e.Custprops&&r.push(J_(e.Props,e.Custprops)),r.join("")}function F4(){return""}function C4(e,t){var r=['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];return t.cellXfs.forEach(function(n,a){var i=[];i.push(pe("NumberFormat",null,{"ss:Format":Qe(Se[n.numFmtId])}));var s={"ss:ID":"s"+(21+a)};r.push(pe("Style",i.join(""),s))}),pe("Styles",r.join(""))}function pm(e){return pe("NamedRange",null,{"ss:Name":e.Name,"ss:RefersTo":"="+pc(e.Ref,{r:0,c:0})})}function A4(e){if(!((e||{}).Workbook||{}).Names)return"";for(var t=e.Workbook.Names,r=[],n=0;n<t.length;++n){var a=t[n];a.Sheet==null&&(a.Name.match(/^_xlfn\./)||r.push(pm(a)))}return pe("Names",r.join(""))}function D4(e,t,r,n){if(!e||!((n||{}).Workbook||{}).Names)return"";for(var a=n.Workbook.Names,i=[],s=0;s<a.length;++s){var o=a[s];o.Sheet==r&&(o.Name.match(/^_xlfn\./)||i.push(pm(o)))}return i.join("")}function R4(e,t,r,n){if(!e)return"";var a=[];if(e["!margins"]&&(a.push("<PageSetup>"),e["!margins"].header&&a.push(pe("Header",null,{"x:Margin":e["!margins"].header})),e["!margins"].footer&&a.push(pe("Footer",null,{"x:Margin":e["!margins"].footer})),a.push(pe("PageMargins",null,{"x:Bottom":e["!margins"].bottom||"0.75","x:Left":e["!margins"].left||"0.7","x:Right":e["!margins"].right||"0.7","x:Top":e["!margins"].top||"0.75"})),a.push("</PageSetup>")),n&&n.Workbook&&n.Workbook.Sheets&&n.Workbook.Sheets[r])if(n.Workbook.Sheets[r].Hidden)a.push(pe("Visible",n.Workbook.Sheets[r].Hidden==1?"SheetHidden":"SheetVeryHidden",{}));else{for(var i=0;i<r&&!(n.Workbook.Sheets[i]&&!n.Workbook.Sheets[i].Hidden);++i);i==r&&a.push("<Selected/>")}return((((n||{}).Workbook||{}).Views||[])[0]||{}).RTL&&a.push("<DisplayRightToLeft/>"),e["!protect"]&&(a.push(Wt("ProtectContents","True")),e["!protect"].objects&&a.push(Wt("ProtectObjects","True")),e["!protect"].scenarios&&a.push(Wt("ProtectScenarios","True")),e["!protect"].selectLockedCells!=null&&!e["!protect"].selectLockedCells?a.push(Wt("EnableSelection","NoSelection")):e["!protect"].selectUnlockedCells!=null&&!e["!protect"].selectUnlockedCells&&a.push(Wt("EnableSelection","UnlockedCells")),[["formatCells","AllowFormatCells"],["formatColumns","AllowSizeCols"],["formatRows","AllowSizeRows"],["insertColumns","AllowInsertCols"],["insertRows","AllowInsertRows"],["insertHyperlinks","AllowInsertHyperlinks"],["deleteColumns","AllowDeleteCols"],["deleteRows","AllowDeleteRows"],["sort","AllowSort"],["autoFilter","AllowFilter"],["pivotTables","AllowUsePivotTables"]].forEach(function(s){e["!protect"][s[0]]&&a.push("<"+s[1]+"/>")})),a.length==0?"":pe("WorksheetOptions",a.join(""),{xmlns:Er.x})}function O4(e){return e.map(function(t){var r=Q2(t.t||""),n=pe("ss:Data",r,{xmlns:"http://www.w3.org/TR/REC-html40"});return pe("Comment",n,{"ss:Author":t.a})}).join("")}function B4(e,t,r,n,a,i,s){if(!e||e.v==null&&e.f==null)return"";var o={};if(e.f&&(o["ss:Formula"]="="+Qe(pc(e.f,s))),e.F&&e.F.slice(0,t.length)==t){var c=ht(e.F.slice(t.length+1));o["ss:ArrayRange"]="RC:R"+(c.r==s.r?"":"["+(c.r-s.r)+"]")+"C"+(c.c==s.c?"":"["+(c.c-s.c)+"]")}if(e.l&&e.l.Target&&(o["ss:HRef"]=Qe(e.l.Target),e.l.Tooltip&&(o["x:HRefScreenTip"]=Qe(e.l.Tooltip))),r["!merges"])for(var f=r["!merges"],u=0;u!=f.length;++u)f[u].s.c!=s.c||f[u].s.r!=s.r||(f[u].e.c>f[u].s.c&&(o["ss:MergeAcross"]=f[u].e.c-f[u].s.c),f[u].e.r>f[u].s.r&&(o["ss:MergeDown"]=f[u].e.r-f[u].s.r));var h="",d="";switch(e.t){case"z":if(!n.sheetStubs)return"";break;case"n":h="Number",d=String(e.v);break;case"b":h="Boolean",d=e.v?"1":"0";break;case"e":h="Error",d=Fn[e.v];break;case"d":h="DateTime",d=new Date(e.v).toISOString(),e.z==null&&(e.z=e.z||Se[14]);break;case"s":h="String",d=Z2(e.v||"");break}var p=Qn(n.cellXfs,e,n);o["ss:StyleID"]="s"+(21+p),o["ss:Index"]=s.c+1;var g=e.v!=null?d:"",m=e.t=="z"?"":'<Data ss:Type="'+h+'">'+g+"</Data>";return(e.c||[]).length>0&&(m+=O4(e.c)),pe("Cell",m,o)}function N4(e,t){var r='<Row ss:Index="'+(e+1)+'"';return t&&(t.hpt&&!t.hpx&&(t.hpx=Za(t.hpt)),t.hpx&&(r+=' ss:AutoFitHeight="0" ss:Height="'+t.hpx+'"'),t.hidden&&(r+=' ss:Hidden="1"')),r+">"}function P4(e,t,r,n){if(!e["!ref"])return"";var a=Ye(e["!ref"]),i=e["!merges"]||[],s=0,o=[];e["!cols"]&&e["!cols"].forEach(function(x,v){Jn(x);var k=!!x.width,w=To(v,x),S={"ss:Index":v+1};k&&(S["ss:Width"]=Qi(w.width)),x.hidden&&(S["ss:Hidden"]="1"),o.push(pe("Column",null,S))});for(var c=Array.isArray(e),f=a.s.r;f<=a.e.r;++f){for(var u=[N4(f,(e["!rows"]||[])[f])],h=a.s.c;h<=a.e.c;++h){var d=!1;for(s=0;s!=i.length;++s)if(!(i[s].s.c>h)&&!(i[s].s.r>f)&&!(i[s].e.c<h)&&!(i[s].e.r<f)){(i[s].s.c!=h||i[s].s.r!=f)&&(d=!0);break}if(!d){var p={r:f,c:h},g=Ce(p),m=c?(e[f]||[])[h]:e[g];u.push(B4(m,g,e,t,r,n,p))}}u.push("</Row>"),u.length>2&&o.push(u.join(""))}return o.join("")}function I4(e,t,r){var n=[],a=r.SheetNames[e],i=r.Sheets[a],s=i?D4(i,t,e,r):"";return s.length>0&&n.push("<Names>"+s+"</Names>"),s=i?P4(i,t,e,r):"",s.length>0&&n.push("<Table>"+s+"</Table>"),n.push(R4(i,t,e,r)),n.join("")}function L4(e,t){t||(t={}),e.SSF||(e.SSF=st(Se)),e.SSF&&(za(),Mi(e.SSF),t.revssf=ao(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF,t.cellXfs=[],Qn(t.cellXfs,{},{revssf:{General:0}}));var r=[];r.push(T4(e,t)),r.push(F4()),r.push(""),r.push("");for(var n=0;n<e.SheetNames.length;++n)r.push(pe("Worksheet",I4(n,t,e),{"ss:Name":Qe(e.SheetNames[n])}));return r[2]=C4(e,t),r[3]=A4(e),_t+pe("Workbook",r.join(""),{xmlns:Er.ss,"xmlns:o":Er.o,"xmlns:x":Er.x,"xmlns:ss":Er.ss,"xmlns:dt":Er.dt,"xmlns:html":Er.html})}function M4(e){var t={},r=e.content;if(r.l=28,t.AnsiUserType=r.read_shift(0,"lpstr-ansi"),t.AnsiClipboardFormat=A_(r),r.length-r.l<=4)return t;var n=r.read_shift(4);if(n==0||n>40||(r.l-=4,t.Reserved1=r.read_shift(0,"lpstr-ansi"),r.length-r.l<=4)||(n=r.read_shift(4),n!==1907505652)||(t.UnicodeClipboardFormat=D_(r),n=r.read_shift(4),n==0||n>40))return t;r.l-=4,t.Reserved2=r.read_shift(0,"lpwstr")}var V4=[60,1084,2066,2165,2175];function U4(e,t,r,n,a){var i=n,s=[],o=r.slice(r.l,r.l+i);if(a&&a.enc&&a.enc.insitu&&o.length>0)switch(e){case 9:case 521:case 1033:case 2057:case 47:case 405:case 225:case 406:case 312:case 404:case 10:break;case 133:break;default:a.enc.insitu(o)}s.push(o),r.l+=i;for(var c=bn(r,r.l),f=bc[c],u=0;f!=null&&V4.indexOf(c)>-1;)i=bn(r,r.l+2),u=r.l+4,c==2066?u+=4:(c==2165||c==2175)&&(u+=12),o=r.slice(u,r.l+4+i),s.push(o),r.l+=4+i,f=bc[c=bn(r,r.l)];var h=Lt(s);Ht(h,0);var d=0;h.lens=[];for(var p=0;p<s.length;++p)h.lens.push(d),d+=s[p].length;if(h.length<n)throw"XLS Record 0x"+e.toString(16)+" Truncated: "+h.length+" < "+n;return t.f(h,h.length,a)}function ln(e,t,r){if(e.t!=="z"&&e.XF){var n=0;try{n=e.z||e.XF.numFmtId||0,t.cellNF&&(e.z=Se[n])}catch(i){if(t.WTF)throw i}if(!t||t.cellText!==!1)try{e.t==="e"?e.w=e.w||Fn[e.v]:n===0||n=="General"?e.t==="n"?(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Li(e.v):e.w=fa(e.v):e.w=yr(n,e.v,{date1904:!!r,dateNF:t&&t.dateNF})}catch(i){if(t.WTF)throw i}if(t.cellDates&&n&&e.t=="n"&&ua(Se[n]||String(n))){var a=Xn(e.v);a&&(e.t="d",e.v=new Date(a.y,a.m-1,a.d,a.H,a.M,a.S,a.u))}}}function Fo(e,t,r){return{v:e,ixfe:t,t:r}}function $4(e,t){var r={opts:{}},n={},a=t.dense?[]:{},i={},s={},o=null,c=[],f="",u={},h,d="",p,g,m,x,v={},k=[],w,S,b=[],T=[],y={Sheets:[],WBProps:{date1904:!1},Views:[{}]},O={},B=function(ze){return ze<8?_a[ze]:ze<64&&T[ze-8]||_a[ze]},H=function(ze,bt,Vr){var It=bt.XF.data;if(!(!It||!It.patternType||!Vr||!Vr.cellStyles)){bt.s={},bt.s.patternType=It.patternType;var Oa;(Oa=Zi(B(It.icvFore)))&&(bt.s.fgColor={rgb:Oa}),(Oa=Zi(B(It.icvBack)))&&(bt.s.bgColor={rgb:Oa})}},j=function(ze,bt,Vr){if(!(A>1)&&!(Vr.sheetRows&&ze.r>=Vr.sheetRows)){if(Vr.cellStyles&&bt.XF&&bt.XF.data&&H(ze,bt,Vr),delete bt.ixfe,delete bt.XF,h=ze,d=Ce(ze),(!s||!s.s||!s.e)&&(s={s:{r:0,c:0},e:{r:0,c:0}}),ze.r<s.s.r&&(s.s.r=ze.r),ze.c<s.s.c&&(s.s.c=ze.c),ze.r+1>s.e.r&&(s.e.r=ze.r+1),ze.c+1>s.e.c&&(s.e.c=ze.c+1),Vr.cellFormula&&bt.f){for(var It=0;It<k.length;++It)if(!(k[It][0].s.c>ze.c||k[It][0].s.r>ze.r)&&!(k[It][0].e.c<ze.c||k[It][0].e.r<ze.r)){bt.F=Me(k[It][0]),(k[It][0].s.c!=ze.c||k[It][0].s.r!=ze.r)&&delete bt.f,bt.f&&(bt.f=""+Qt(k[It][1],s,ze,z,I));break}}Vr.dense?(a[ze.r]||(a[ze.r]=[]),a[ze.r][ze.c]=bt):a[d]=bt}},I={enc:!1,sbcch:0,snames:[],sharedf:v,arrayf:k,rrtabid:[],lastuser:"",biff:8,codepage:0,winlocked:0,cellStyles:!!t&&!!t.cellStyles,WTF:!!t&&!!t.wtf};t.password&&(I.password=t.password);var X,q=[],te=[],ae=[],oe=[],ue=!1,z=[];z.SheetNames=I.snames,z.sharedf=I.sharedf,z.arrayf=I.arrayf,z.names=[],z.XTI=[];var W=0,A=0,_=0,F=[],D=[],M;I.codepage=1200,Wr(1200);for(var K=!1;e.l<e.length-1;){var J=e.l,re=e.read_shift(2);if(re===0&&W===10)break;var le=e.l===e.length?0:e.read_shift(2),ce=bc[re];if(ce&&ce.f){if(t.bookSheets&&W===133&&re!==133)break;if(W=re,ce.r===2||ce.r==12){var Be=e.read_shift(2);if(le-=2,!I.enc&&Be!==re&&((Be&255)<<8|Be>>8)!==re)throw new Error("rt mismatch: "+Be+"!="+re);ce.r==12&&(e.l+=10,le-=10)}var V={};if(re===10?V=ce.f(e,le,I):V=U4(re,ce,e,le,I),A==0&&[9,521,1033,2057].indexOf(W)===-1)continue;switch(re){case 34:r.opts.Date1904=y.WBProps.date1904=V;break;case 134:r.opts.WriteProtect=!0;break;case 47:if(I.enc||(e.l=0),I.enc=V,!t.password)throw new Error("File is password-protected");if(V.valid==null)throw new Error("Encryption scheme unsupported");if(!V.valid)throw new Error("Password is incorrect");break;case 92:I.lastuser=V;break;case 66:var We=Number(V);switch(We){case 21010:We=1200;break;case 32768:We=1e4;break;case 32769:We=1252;break}Wr(I.codepage=We),K=!0;break;case 317:I.rrtabid=V;break;case 25:I.winlocked=V;break;case 439:r.opts.RefreshAll=V;break;case 12:r.opts.CalcCount=V;break;case 16:r.opts.CalcDelta=V;break;case 17:r.opts.CalcIter=V;break;case 13:r.opts.CalcMode=V;break;case 14:r.opts.CalcPrecision=V;break;case 95:r.opts.CalcSaveRecalc=V;break;case 15:I.CalcRefMode=V;break;case 2211:r.opts.FullCalc=V;break;case 129:V.fDialog&&(a["!type"]="dialog"),V.fBelow||((a["!outline"]||(a["!outline"]={})).above=!0),V.fRight||((a["!outline"]||(a["!outline"]={})).left=!0);break;case 224:b.push(V);break;case 430:z.push([V]),z[z.length-1].XTI=[];break;case 35:case 547:z[z.length-1].push(V);break;case 24:case 536:M={Name:V.Name,Ref:Qt(V.rgce,s,null,z,I)},V.itab>0&&(M.Sheet=V.itab-1),z.names.push(M),z[0]||(z[0]=[],z[0].XTI=[]),z[z.length-1].push(V),V.Name=="_xlnm._FilterDatabase"&&V.itab>0&&V.rgce&&V.rgce[0]&&V.rgce[0][0]&&V.rgce[0][0][0]=="PtgArea3d"&&(D[V.itab-1]={ref:Me(V.rgce[0][0][1][2])});break;case 22:I.ExternCount=V;break;case 23:z.length==0&&(z[0]=[],z[0].XTI=[]),z[z.length-1].XTI=z[z.length-1].XTI.concat(V),z.XTI=z.XTI.concat(V);break;case 2196:if(I.biff<8)break;M!=null&&(M.Comment=V[1]);break;case 18:a["!protect"]=V;break;case 19:V!==0&&I.WTF&&console.error("Password verifier: "+V);break;case 133:i[V.pos]=V,I.snames.push(V.name);break;case 10:{if(--A)break;if(s.e){if(s.e.r>0&&s.e.c>0){if(s.e.r--,s.e.c--,a["!ref"]=Me(s),t.sheetRows&&t.sheetRows<=s.e.r){var Oe=s.e.r;s.e.r=t.sheetRows-1,a["!fullref"]=a["!ref"],a["!ref"]=Me(s),s.e.r=Oe}s.e.r++,s.e.c++}q.length>0&&(a["!merges"]=q),te.length>0&&(a["!objects"]=te),ae.length>0&&(a["!cols"]=ae),oe.length>0&&(a["!rows"]=oe),y.Sheets.push(O)}f===""?u=a:n[f]=a,a=t.dense?[]:{}}break;case 9:case 521:case 1033:case 2057:{if(I.biff===8&&(I.biff={9:2,521:3,1033:4}[re]||{512:2,768:3,1024:4,1280:5,1536:8,2:2,7:2}[V.BIFFVer]||8),I.biffguess=V.BIFFVer==0,V.BIFFVer==0&&V.dt==4096&&(I.biff=5,K=!0,Wr(I.codepage=28591)),I.biff==8&&V.BIFFVer==0&&V.dt==16&&(I.biff=2),A++)break;if(a=t.dense?[]:{},I.biff<8&&!K&&(K=!0,Wr(I.codepage=t.codepage||1252)),I.biff<5||V.BIFFVer==0&&V.dt==4096){f===""&&(f="Sheet1"),s={s:{r:0,c:0},e:{r:0,c:0}};var Ue={pos:e.l-le,name:f};i[Ue.pos]=Ue,I.snames.push(f)}else f=(i[J]||{name:""}).name;V.dt==32&&(a["!type"]="chart"),V.dt==64&&(a["!type"]="macro"),q=[],te=[],I.arrayf=k=[],ae=[],oe=[],ue=!1,O={Hidden:(i[J]||{hs:0}).hs,name:f}}break;case 515:case 3:case 2:a["!type"]=="chart"&&(t.dense?(a[V.r]||[])[V.c]:a[Ce({c:V.c,r:V.r})])&&++V.c,w={ixfe:V.ixfe,XF:b[V.ixfe]||{},v:V.val,t:"n"},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t);break;case 5:case 517:w={ixfe:V.ixfe,XF:b[V.ixfe],v:V.val,t:V.t},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t);break;case 638:w={ixfe:V.ixfe,XF:b[V.ixfe],v:V.rknum,t:"n"},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t);break;case 189:for(var Pe=V.c;Pe<=V.C;++Pe){var we=V.rkrec[Pe-V.c][0];w={ixfe:we,XF:b[we],v:V.rkrec[Pe-V.c][1],t:"n"},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:Pe,r:V.r},w,t)}break;case 6:case 518:case 1030:{if(V.val=="String"){o=V;break}if(w=Fo(V.val,V.cell.ixfe,V.tt),w.XF=b[w.ixfe],t.cellFormula){var Et=V.formula;if(Et&&Et[0]&&Et[0][0]&&Et[0][0][0]=="PtgExp"){var Mr=Et[0][0][1][0],mn=Et[0][0][1][1],On=Ce({r:Mr,c:mn});v[On]?w.f=""+Qt(V.formula,s,V.cell,z,I):w.F=((t.dense?(a[Mr]||[])[mn]:a[On])||{}).F}else w.f=""+Qt(V.formula,s,V.cell,z,I)}_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j(V.cell,w,t),o=V}break;case 7:case 519:if(o)o.val=V,w=Fo(V,o.cell.ixfe,"s"),w.XF=b[w.ixfe],t.cellFormula&&(w.f=""+Qt(o.formula,s,o.cell,z,I)),_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j(o.cell,w,t),o=null;else throw new Error("String record expects Formula");break;case 33:case 545:{k.push(V);var ws=Ce(V[0].s);if(p=t.dense?(a[V[0].s.r]||[])[V[0].s.c]:a[ws],t.cellFormula&&p){if(!o||!ws||!p)break;p.f=""+Qt(V[1],s,V[0],z,I),p.F=Me(V[0])}}break;case 1212:{if(!t.cellFormula)break;if(d){if(!o)break;v[Ce(o.cell)]=V[0],p=t.dense?(a[o.cell.r]||[])[o.cell.c]:a[Ce(o.cell)],(p||{}).f=""+Qt(V[0],s,h,z,I)}}break;case 253:w=Fo(c[V.isst].t,V.ixfe,"s"),c[V.isst].h&&(w.h=c[V.isst].h),w.XF=b[w.ixfe],_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t);break;case 513:t.sheetStubs&&(w={ixfe:V.ixfe,XF:b[V.ixfe],t:"z"},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t));break;case 190:if(t.sheetStubs)for(var ra=V.c;ra<=V.C;++ra){var Cr=V.ixfe[ra-V.c];w={ixfe:Cr,XF:b[Cr],t:"z"},_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:ra,r:V.r},w,t)}break;case 214:case 516:case 4:w=Fo(V.val,V.ixfe,"s"),w.XF=b[w.ixfe],_>0&&(w.z=F[w.ixfe>>8&63]),ln(w,t,r.opts.Date1904),j({c:V.c,r:V.r},w,t);break;case 0:case 512:A===1&&(s=V);break;case 252:c=V;break;case 1054:if(I.biff==4){F[_++]=V[1];for(var Bn=0;Bn<_+163&&Se[Bn]!=V[1];++Bn);Bn>=163&&nn(V[1],_+163)}else nn(V[1],V[0]);break;case 30:{F[_++]=V;for(var na=0;na<_+163&&Se[na]!=V;++na);na>=163&&nn(V,_+163)}break;case 229:q=q.concat(V);break;case 93:te[V.cmo[0]]=I.lastobj=V;break;case 438:I.lastobj.TxO=V;break;case 127:I.lastobj.ImData=V;break;case 440:for(x=V[0].s.r;x<=V[0].e.r;++x)for(m=V[0].s.c;m<=V[0].e.c;++m)p=t.dense?(a[x]||[])[m]:a[Ce({c:m,r:x})],p&&(p.l=V[1]);break;case 2048:for(x=V[0].s.r;x<=V[0].e.r;++x)for(m=V[0].s.c;m<=V[0].e.c;++m)p=t.dense?(a[x]||[])[m]:a[Ce({c:m,r:x})],p&&p.l&&(p.l.Tooltip=V[1]);break;case 28:{if(I.biff<=5&&I.biff>=2)break;p=t.dense?(a[V[0].r]||[])[V[0].c]:a[Ce(V[0])];var _s=te[V[2]];p||(t.dense?(a[V[0].r]||(a[V[0].r]=[]),p=a[V[0].r][V[0].c]={t:"z"}):p=a[Ce(V[0])]={t:"z"},s.e.r=Math.max(s.e.r,V[0].r),s.s.r=Math.min(s.s.r,V[0].r),s.e.c=Math.max(s.e.c,V[0].c),s.s.c=Math.min(s.s.c,V[0].c)),p.c||(p.c=[]),g={a:V[1],t:_s.TxO.t},p.c.push(g)}break;case 2173:Cb(b[V.ixfe],V.ext);break;case 125:{if(!I.cellStyles)break;for(;V.e>=V.s;)ae[V.e--]={width:V.w/256,level:V.level||0,hidden:!!(V.flags&1)},ue||(ue=!0,uc(V.w/256)),Jn(ae[V.e+1])}break;case 520:{var cr={};V.level!=null&&(oe[V.r]=cr,cr.level=V.level),V.hidden&&(oe[V.r]=cr,cr.hidden=!0),V.hpt&&(oe[V.r]=cr,cr.hpt=V.hpt,cr.hpx=Za(V.hpt))}break;case 38:case 39:case 40:case 41:a["!margins"]||Ta(a["!margins"]={}),a["!margins"][{38:"left",39:"right",40:"top",41:"bottom"}[re]]=V;break;case 161:a["!margins"]||Ta(a["!margins"]={}),a["!margins"].header=V.header,a["!margins"].footer=V.footer;break;case 574:V.RTL&&(y.Views[0].RTL=!0);break;case 146:T=V;break;case 2198:X=V;break;case 140:S=V;break;case 442:f?O.CodeName=V||O.name:y.WBProps.CodeName=V||"ThisWorkbook";break}}else ce||console.error("Missing Info for XLS Record 0x"+re.toString(16)),e.l+=le}return r.SheetNames=xt(i).sort(function(pn,ze){return Number(pn)-Number(ze)}).map(function(pn){return i[pn].name}),t.bookSheets||(r.Sheets=n),!r.SheetNames.length&&u["!ref"]?(r.SheetNames.push("Sheet1"),r.Sheets&&(r.Sheets.Sheet1=u)):r.Preamble=u,r.Sheets&&D.forEach(function(pn,ze){r.Sheets[r.SheetNames[ze]]["!autofilter"]=pn}),r.Strings=c,r.SSF=st(Se),I.enc&&(r.Encryption=I.enc),X&&(r.Themes=X),r.Metadata={},S!==void 0&&(r.Metadata.Country=S),z.names.length>0&&(y.Names=z.names),r.Workbook=y,r}var cs={SI:"e0859ff2f94f6810ab9108002b27b3d9",DSI:"02d5cdd59c2e1b10939708002b2cf9ae",UDI:"05d5cdd59c2e1b10939708002b2cf9ae"};function W4(e,t,r){var n=Ee.find(e,"/!DocumentSummaryInformation");if(n&&n.size>0)try{var a=rd(n,Jl,cs.DSI);for(var i in a)t[i]=a[i]}catch(f){if(r.WTF)throw f}var s=Ee.find(e,"/!SummaryInformation");if(s&&s.size>0)try{var o=rd(s,Zl,cs.SI);for(var c in o)t[c]==null&&(t[c]=o[c])}catch(f){if(r.WTF)throw f}t.HeadingPairs&&t.TitlesOfParts&&(jh(t.HeadingPairs,t.TitlesOfParts,t,r),delete t.HeadingPairs,delete t.TitlesOfParts)}function H4(e,t){var r=[],n=[],a=[],i=0,s,o=Hu(Jl,"n"),c=Hu(Zl,"n");if(e.Props)for(s=xt(e.Props),i=0;i<s.length;++i)(Object.prototype.hasOwnProperty.call(o,s[i])?r:Object.prototype.hasOwnProperty.call(c,s[i])?n:a).push([s[i],e.Props[s[i]]]);if(e.Custprops)for(s=xt(e.Custprops),i=0;i<s.length;++i)Object.prototype.hasOwnProperty.call(e.Props||{},s[i])||(Object.prototype.hasOwnProperty.call(o,s[i])?r:Object.prototype.hasOwnProperty.call(c,s[i])?n:a).push([s[i],e.Custprops[s[i]]]);var f=[];for(i=0;i<a.length;++i)ed.indexOf(a[i][0])>-1||Hh.indexOf(a[i][0])>-1||a[i][1]!=null&&f.push(a[i]);n.length&&Ee.utils.cfb_add(t,"/SummaryInformation",nd(n,cs.SI,c,Zl)),(r.length||f.length)&&Ee.utils.cfb_add(t,"/DocumentSummaryInformation",nd(r,cs.DSI,o,Jl,f.length?f:null,cs.UDI))}function gm(e,t){t||(t={}),Dc(t),Fl(),t.codepage&&Tl(t.codepage);var r,n;if(e.FullPaths){if(Ee.find(e,"/encryption"))throw new Error("File is password-protected");r=Ee.find(e,"!CompObj"),n=Ee.find(e,"/Workbook")||Ee.find(e,"/Book")}else{switch(t.type){case"base64":e=_r(wr(e));break;case"binary":e=_r(e);break;case"buffer":break;case"array":Array.isArray(e)||(e=Array.prototype.slice.call(e));break}Ht(e,0),n={content:e}}var a,i;if(r&&M4(r),t.bookProps&&!t.bookSheets)a={};else{var s=He?"buffer":"array";if(n&&n.content)a=$4(n.content,t);else if((i=Ee.find(e,"PerfectOffice_MAIN"))&&i.content)a=Sa.to_workbook(i.content,(t.type=s,t));else if((i=Ee.find(e,"NativeContent_MAIN"))&&i.content)a=Sa.to_workbook(i.content,(t.type=s,t));else throw(i=Ee.find(e,"MN0"))&&i.content?new Error("Unsupported Works 4 for Mac file"):new Error("Cannot find Workbook stream");t.bookVBA&&e.FullPaths&&Ee.find(e,"/_VBA_PROJECT_CUR/VBA/dir")&&(a.vbaraw=rS(e))}var o={};return e.FullPaths&&W4(e,o,t),a.Props=a.Custprops=o,t.bookFiles&&(a.cfb=e),a}function j4(e,t){var r=t||{},n=Ee.utils.cfb_new({root:"R"}),a="/Workbook";switch(r.bookType||"xls"){case"xls":r.bookType="biff8";case"xla":r.bookType||(r.bookType="xla");case"biff8":a="/Workbook",r.biff=8;break;case"biff5":a="/Book",r.biff=5;break;default:throw new Error("invalid type "+r.bookType+" for XLS CFB")}return Ee.utils.cfb_add(n,a,xm(e,r)),r.biff==8&&(e.Props||e.Custprops)&&H4(e,n),r.biff==8&&e.vbaraw&&nS(n,Ee.read(e.vbaraw,{type:typeof e.vbaraw=="string"?"binary":"buffer"})),n}var fs={0:{f:mF},1:{f:kF},2:{f:$F},3:{f:DF},4:{f:TF},5:{f:MF},6:{f:GF},7:{f:NF},8:{f:QF},9:{f:ZF},10:{f:qF},11:{f:JF},12:{f:bF},13:{f:HF},14:{f:OF},15:{f:CF},16:{f:sm},17:{f:KF},18:{f:IF},19:{f:zl},20:{},21:{},22:{},23:{},24:{},25:{},26:{},27:{},28:{},29:{},30:{},31:{},32:{},33:{},34:{},35:{T:1},36:{T:-1},37:{T:1},38:{T:-1},39:{f:KC},40:{},42:{},43:{f:GE},44:{f:jE},45:{f:YE},46:{f:JE},47:{f:qE},48:{},49:{f:x_},50:{},51:{f:Rb},52:{T:1},53:{T:-1},54:{T:1},55:{T:-1},56:{T:1},57:{T:-1},58:{},59:{},60:{f:Ed},62:{f:zF},63:{f:Ub},64:{f:pC},65:{},66:{},67:{},68:{},69:{},70:{},128:{},129:{T:1},130:{T:-1},131:{T:1,f:Kt,p:0},132:{T:-1},133:{T:1},134:{T:-1},135:{T:1},136:{T:-1},137:{T:1,f:uC},138:{T:-1},139:{T:1},140:{T:-1},141:{T:1},142:{T:-1},143:{T:1},144:{T:-1},145:{T:1},146:{T:-1},147:{f:_F},148:{f:xF,p:16},151:{f:iC},152:{},153:{f:zC},154:{},155:{},156:{f:HC},157:{},158:{},159:{T:1,f:oE},160:{T:-1},161:{T:1,f:va},162:{T:-1},163:{T:1},164:{T:-1},165:{T:1},166:{T:-1},167:{},168:{},169:{},170:{},171:{},172:{T:1},173:{T:-1},174:{},175:{},176:{f:eC},177:{T:1},178:{T:-1},179:{T:1},180:{T:-1},181:{T:1},182:{T:-1},183:{T:1},184:{T:-1},185:{T:1},186:{T:-1},187:{T:1},188:{T:-1},189:{T:1},190:{T:-1},191:{T:1},192:{T:-1},193:{T:1},194:{T:-1},195:{T:1},196:{T:-1},197:{T:1},198:{T:-1},199:{T:1},200:{T:-1},201:{T:1},202:{T:-1},203:{T:1},204:{T:-1},205:{T:1},206:{T:-1},207:{T:1},208:{T:-1},209:{T:1},210:{T:-1},211:{T:1},212:{T:-1},213:{T:1},214:{T:-1},215:{T:1},216:{T:-1},217:{T:1},218:{T:-1},219:{T:1},220:{T:-1},221:{T:1},222:{T:-1},223:{T:1},224:{T:-1},225:{T:1},226:{T:-1},227:{T:1},228:{T:-1},229:{T:1},230:{T:-1},231:{T:1},232:{T:-1},233:{T:1},234:{T:-1},235:{T:1},236:{T:-1},237:{T:1},238:{T:-1},239:{T:1},240:{T:-1},241:{T:1},242:{T:-1},243:{T:1},244:{T:-1},245:{T:1},246:{T:-1},247:{T:1},248:{T:-1},249:{T:1},250:{T:-1},251:{T:1},252:{T:-1},253:{T:1},254:{T:-1},255:{T:1},256:{T:-1},257:{T:1},258:{T:-1},259:{T:1},260:{T:-1},261:{T:1},262:{T:-1},263:{T:1},264:{T:-1},265:{T:1},266:{T:-1},267:{T:1},268:{T:-1},269:{T:1},270:{T:-1},271:{T:1},272:{T:-1},273:{T:1},274:{T:-1},275:{T:1},276:{T:-1},277:{},278:{T:1},279:{T:-1},280:{T:1},281:{T:-1},282:{T:1},283:{T:1},284:{T:-1},285:{T:1},286:{T:-1},287:{T:1},288:{T:-1},289:{T:1},290:{T:-1},291:{T:1},292:{T:-1},293:{T:1},294:{T:-1},295:{T:1},296:{T:-1},297:{T:1},298:{T:-1},299:{T:1},300:{T:-1},301:{T:1},302:{T:-1},303:{T:1},304:{T:-1},305:{T:1},306:{T:-1},307:{T:1},308:{T:-1},309:{T:1},310:{T:-1},311:{T:1},312:{T:-1},313:{T:-1},314:{T:1},315:{T:-1},316:{T:1},317:{T:-1},318:{T:1},319:{T:-1},320:{T:1},321:{T:-1},322:{T:1},323:{T:-1},324:{T:1},325:{T:-1},326:{T:1},327:{T:-1},328:{T:1},329:{T:-1},330:{T:1},331:{T:-1},332:{T:1},333:{T:-1},334:{T:1},335:{f:Ab},336:{T:-1},337:{f:Nb,T:1},338:{T:-1},339:{T:1},340:{T:-1},341:{T:1},342:{T:-1},343:{T:1},344:{T:-1},345:{T:1},346:{T:-1},347:{T:1},348:{T:-1},349:{T:1},350:{T:-1},351:{},352:{},353:{T:1},354:{T:-1},355:{f:Xl},357:{},358:{},359:{},360:{T:1},361:{},362:{f:yd},363:{},364:{},366:{},367:{},368:{},369:{},370:{},371:{},372:{T:1},373:{T:-1},374:{T:1},375:{T:-1},376:{T:1},377:{T:-1},378:{T:1},379:{T:-1},380:{T:1},381:{T:-1},382:{T:1},383:{T:-1},384:{T:1},385:{T:-1},386:{T:1},387:{T:-1},388:{T:1},389:{T:-1},390:{T:1},391:{T:-1},392:{T:1},393:{T:-1},394:{T:1},395:{T:-1},396:{},397:{},398:{},399:{},400:{},401:{T:1},403:{},404:{},405:{},406:{},407:{},408:{},409:{},410:{},411:{},412:{},413:{},414:{},415:{},416:{},417:{},418:{},419:{},420:{},421:{},422:{T:1},423:{T:1},424:{T:-1},425:{T:-1},426:{f:sC},427:{f:oC},428:{},429:{T:1},430:{T:-1},431:{T:1},432:{T:-1},433:{T:1},434:{T:-1},435:{T:1},436:{T:-1},437:{T:1},438:{T:-1},439:{T:1},440:{T:-1},441:{T:1},442:{T:-1},443:{T:1},444:{T:-1},445:{T:1},446:{T:-1},447:{T:1},448:{T:-1},449:{T:1},450:{T:-1},451:{T:1},452:{T:-1},453:{T:1},454:{T:-1},455:{T:1},456:{T:-1},457:{T:1},458:{T:-1},459:{T:1},460:{T:-1},461:{T:1},462:{T:-1},463:{T:1},464:{T:-1},465:{T:1},466:{T:-1},467:{T:1},468:{T:-1},469:{T:1},470:{T:-1},471:{},472:{},473:{T:1},474:{T:-1},475:{},476:{f:cC},477:{},478:{},479:{T:1},480:{T:-1},481:{T:1},482:{T:-1},483:{T:1},484:{T:-1},485:{f:wF},486:{T:1},487:{T:-1},488:{T:1},489:{T:-1},490:{T:1},491:{T:-1},492:{T:1},493:{T:-1},494:{f:nC},495:{T:1},496:{T:-1},497:{T:1},498:{T:-1},499:{},500:{T:1},501:{T:-1},502:{T:1},503:{T:-1},504:{},505:{T:1},506:{T:-1},507:{},508:{T:1},509:{T:-1},510:{T:1},511:{T:-1},512:{},513:{},514:{T:1},515:{T:-1},516:{T:1},517:{T:-1},518:{T:1},519:{T:-1},520:{T:1},521:{T:-1},522:{},523:{},524:{},525:{},526:{},527:{},528:{T:1},529:{T:-1},530:{T:1},531:{T:-1},532:{T:1},533:{T:-1},534:{},535:{},536:{},537:{},538:{T:1},539:{T:-1},540:{T:1},541:{T:-1},542:{T:1},548:{},549:{},550:{f:Xl},551:{},552:{},553:{},554:{T:1},555:{T:-1},556:{T:1},557:{T:-1},558:{T:1},559:{T:-1},560:{T:1},561:{T:-1},562:{},564:{},565:{T:1},566:{T:-1},569:{T:1},570:{T:-1},572:{},573:{T:1},574:{T:-1},577:{},578:{},579:{},580:{},581:{},582:{},583:{},584:{},585:{},586:{},587:{},588:{T:-1},589:{},590:{T:1},591:{T:-1},592:{T:1},593:{T:-1},594:{T:1},595:{T:-1},596:{},597:{T:1},598:{T:-1},599:{T:1},600:{T:-1},601:{T:1},602:{T:-1},603:{T:1},604:{T:-1},605:{T:1},606:{T:-1},607:{},608:{T:1},609:{T:-1},610:{},611:{T:1},612:{T:-1},613:{T:1},614:{T:-1},615:{T:1},616:{T:-1},617:{T:1},618:{T:-1},619:{T:1},620:{T:-1},625:{},626:{T:1},627:{T:-1},628:{T:1},629:{T:-1},630:{T:1},631:{T:-1},632:{f:Jb},633:{T:1},634:{T:-1},635:{T:1,f:Yb},636:{T:-1},637:{f:y_},638:{T:1},639:{},640:{T:-1},641:{T:1},642:{T:-1},643:{T:1},644:{},645:{T:-1},646:{T:1},648:{T:1},649:{},650:{T:-1},651:{f:OC},652:{},653:{T:1},654:{T:-1},655:{T:1},656:{T:-1},657:{T:1},658:{T:-1},659:{},660:{T:1},661:{},662:{T:-1},663:{},664:{T:1},665:{},666:{T:-1},667:{},668:{},669:{},671:{T:1},672:{T:-1},673:{T:1},674:{T:-1},675:{},676:{},677:{},678:{},679:{},680:{},681:{},1024:{},1025:{},1026:{T:1},1027:{T:-1},1028:{T:1},1029:{T:-1},1030:{},1031:{T:1},1032:{T:-1},1033:{T:1},1034:{T:-1},1035:{},1036:{},1037:{},1038:{T:1},1039:{T:-1},1040:{},1041:{T:1},1042:{T:-1},1043:{},1044:{},1045:{},1046:{T:1},1047:{T:-1},1048:{T:1},1049:{T:-1},1050:{},1051:{T:1},1052:{T:1},1053:{f:gC},1054:{T:1},1055:{},1056:{T:1},1057:{T:-1},1058:{T:1},1059:{T:-1},1061:{},1062:{T:1},1063:{T:-1},1064:{T:1},1065:{T:-1},1066:{T:1},1067:{T:-1},1068:{T:1},1069:{T:-1},1070:{T:1},1071:{T:-1},1072:{T:1},1073:{T:-1},1075:{T:1},1076:{T:-1},1077:{T:1},1078:{T:-1},1079:{T:1},1080:{T:-1},1081:{T:1},1082:{T:-1},1083:{T:1},1084:{T:-1},1085:{},1086:{T:1},1087:{T:-1},1088:{T:1},1089:{T:-1},1090:{T:1},1091:{T:-1},1092:{T:1},1093:{T:-1},1094:{T:1},1095:{T:-1},1096:{},1097:{T:1},1098:{},1099:{T:-1},1100:{T:1},1101:{T:-1},1102:{},1103:{},1104:{},1105:{},1111:{},1112:{},1113:{T:1},1114:{T:-1},1115:{T:1},1116:{T:-1},1117:{},1118:{T:1},1119:{T:-1},1120:{T:1},1121:{T:-1},1122:{T:1},1123:{T:-1},1124:{T:1},1125:{T:-1},1126:{},1128:{T:1},1129:{T:-1},1130:{},1131:{T:1},1132:{T:-1},1133:{T:1},1134:{T:-1},1135:{T:1},1136:{T:-1},1137:{T:1},1138:{T:-1},1139:{T:1},1140:{T:-1},1141:{},1142:{T:1},1143:{T:-1},1144:{T:1},1145:{T:-1},1146:{},1147:{T:1},1148:{T:-1},1149:{T:1},1150:{T:-1},1152:{T:1},1153:{T:-1},1154:{T:-1},1155:{T:-1},1156:{T:-1},1157:{T:1},1158:{T:-1},1159:{T:1},1160:{T:-1},1161:{T:1},1162:{T:-1},1163:{T:1},1164:{T:-1},1165:{T:1},1166:{T:-1},1167:{T:1},1168:{T:-1},1169:{T:1},1170:{T:-1},1171:{},1172:{T:1},1173:{T:-1},1177:{},1178:{T:1},1180:{},1181:{},1182:{},2048:{T:1},2049:{T:-1},2050:{},2051:{T:1},2052:{T:-1},2053:{},2054:{},2055:{T:1},2056:{T:-1},2057:{T:1},2058:{T:-1},2060:{},2067:{},2068:{T:1},2069:{T:-1},2070:{},2071:{},2072:{T:1},2073:{T:-1},2075:{},2076:{},2077:{T:1},2078:{T:-1},2079:{},2080:{T:1},2081:{T:-1},2082:{},2083:{T:1},2084:{T:-1},2085:{T:1},2086:{T:-1},2087:{T:1},2088:{T:-1},2089:{T:1},2090:{T:-1},2091:{},2092:{},2093:{T:1},2094:{T:-1},2095:{},2096:{T:1},2097:{T:-1},2098:{T:1},2099:{T:-1},2100:{T:1},2101:{T:-1},2102:{},2103:{T:1},2104:{T:-1},2105:{},2106:{T:1},2107:{T:-1},2108:{},2109:{T:1},2110:{T:-1},2111:{T:1},2112:{T:-1},2113:{T:1},2114:{T:-1},2115:{},2116:{},2117:{},2118:{T:1},2119:{T:-1},2120:{},2121:{T:1},2122:{T:-1},2123:{T:1},2124:{T:-1},2125:{},2126:{T:1},2127:{T:-1},2128:{},2129:{T:1},2130:{T:-1},2131:{T:1},2132:{T:-1},2133:{T:1},2134:{},2135:{},2136:{},2137:{T:1},2138:{T:-1},2139:{T:1},2140:{T:-1},2141:{},3072:{},3073:{},4096:{T:1},4097:{T:-1},5002:{T:1},5003:{T:-1},5081:{T:1},5082:{T:-1},5083:{},5084:{T:1},5085:{T:-1},5086:{T:1},5087:{T:-1},5088:{},5089:{},5090:{},5092:{T:1},5093:{T:-1},5094:{},5095:{T:1},5096:{T:-1},5097:{},5099:{},65535:{n:""}},bc={6:{f:xc},10:{f:qn},12:{f:Ft},13:{f:Ft},14:{f:kt},15:{f:kt},16:{f:qt},17:{f:kt},18:{f:kt},19:{f:Ft},20:{f:vd},21:{f:vd},23:{f:yd},24:{f:_d},25:{f:kt},26:{},27:{},28:{f:gk},29:{},34:{f:kt},35:{f:wd},38:{f:qt},39:{f:qt},40:{f:qt},41:{f:qt},42:{f:kt},43:{f:kt},47:{f:CE},49:{f:Hy},51:{f:Ft},60:{},61:{f:My},64:{f:kt},65:{f:Wy},66:{f:Ft},77:{},80:{},81:{},82:{},85:{f:Ft},89:{},90:{},91:{},92:{f:Fy},93:{f:wk},94:{},95:{f:kt},96:{},97:{},99:{f:kt},125:{f:Ed},128:{f:ak},129:{f:Ay},130:{f:Ft},131:{f:kt},132:{f:kt},133:{f:Dy},134:{},140:{f:Fk},141:{f:Ft},144:{},146:{f:Dk},151:{},152:{},153:{},154:{},155:{},156:{f:Ft},157:{},158:{},160:{f:Lk},161:{f:Bk},174:{},175:{},176:{},177:{},178:{},180:{},181:{},182:{},184:{},185:{},189:{f:ek},190:{f:tk},193:{f:qn},197:{},198:{},199:{},200:{},201:{},202:{f:kt},203:{},204:{},205:{},206:{},207:{},208:{},209:{},210:{},211:{},213:{},215:{},216:{},217:{},218:{f:Ft},220:{},221:{f:kt},222:{},224:{f:nk},225:{f:Ty},226:{f:qn},227:{},229:{f:xk},233:{},235:{},236:{},237:{},239:{},240:{},241:{},242:{},244:{},245:{},246:{},247:{},248:{},249:{},251:{},252:{f:Oy},253:{f:zy},255:{f:Ny},256:{},259:{},290:{},311:{},312:{},315:{},317:{f:ad},318:{},319:{},320:{},330:{},331:{},333:{},334:{},335:{},336:{},337:{},338:{},339:{},340:{},351:{},352:{f:kt},353:{f:qn},401:{},402:{},403:{},404:{},405:{},406:{},407:{},408:{},425:{},426:{},427:{},428:{},429:{},430:{f:ck},431:{f:kt},432:{},433:{},434:{},437:{},438:{f:kk},439:{f:kt},440:{f:Ek},441:{},442:{f:Ji},443:{},444:{f:Ft},445:{},446:{},448:{f:qn},449:{f:Ly,r:2},450:{f:qn},512:{f:pd},513:{f:Ik},515:{f:ok},516:{f:Xy},517:{f:xd},519:{f:Mk},520:{f:Py},523:{},545:{f:kd},549:{f:md},566:{},574:{f:Uy},638:{f:Qy},659:{},1048:{},1054:{f:Yy},1084:{},1212:{f:dk},2048:{f:Sk},2049:{},2050:{},2051:{},2052:{},2053:{},2054:{},2055:{},2056:{},2057:{f:wo},2058:{},2059:{},2060:{},2061:{},2062:{},2063:{},2064:{},2066:{},2067:{},2128:{},2129:{},2130:{},2131:{},2132:{},2133:{},2134:{},2135:{},2136:{},2137:{},2138:{},2146:{},2147:{r:12},2148:{},2149:{},2150:{},2151:{f:qn},2152:{},2154:{},2155:{},2156:{},2161:{},2162:{},2164:{},2165:{},2166:{},2167:{},2168:{},2169:{},2170:{},2171:{},2172:{f:Rk,r:12},2173:{f:Fb,r:12},2174:{},2175:{},2180:{},2181:{},2182:{},2183:{},2184:{},2185:{},2186:{},2187:{},2188:{f:kt,r:12},2189:{},2190:{r:12},2191:{},2192:{},2194:{},2195:{},2196:{f:hk,r:12},2197:{},2198:{f:yb,r:12},2199:{},2200:{},2201:{},2202:{f:mk,r:12},2203:{f:qn},2204:{},2205:{},2206:{},2207:{},2211:{f:Iy},2212:{},2213:{},2214:{},2215:{},4097:{},4098:{},4099:{},4102:{},4103:{},4105:{},4106:{},4107:{},4108:{},4109:{},4116:{},4117:{},4118:{},4119:{},4120:{},4121:{},4122:{},4123:{},4124:{},4125:{},4126:{},4127:{},4128:{},4129:{},4130:{},4132:{},4133:{},4134:{f:Ft},4135:{},4146:{},4147:{},4148:{},4149:{},4154:{},4156:{},4157:{},4158:{},4159:{},4160:{},4161:{},4163:{},4164:{f:Nk},4165:{},4166:{},4168:{},4170:{},4171:{},4174:{},4175:{},4176:{},4177:{},4187:{},4188:{f:Ak},4189:{},4191:{},4192:{},4193:{},4194:{},4195:{},4196:{},4197:{},4198:{},4199:{},4200:{},0:{f:pd},1:{},2:{f:Hk},3:{f:$k},4:{f:Uk},5:{f:xd},7:{f:zk},8:{},9:{f:wo},11:{},22:{f:Ft},30:{f:Jy},31:{},32:{},33:{f:kd},36:{},37:{f:md},50:{f:Gk},62:{},52:{},67:{},68:{f:Ft},69:{},86:{},126:{},127:{f:Vk},135:{},136:{},137:{},145:{},148:{},149:{},150:{},169:{},171:{},188:{},191:{},192:{},194:{},195:{},214:{f:Xk},223:{},234:{},354:{},421:{},518:{f:xc},521:{f:wo},536:{f:_d},547:{f:wd},561:{},579:{},1030:{f:xc},1033:{f:wo},1091:{},2157:{},2163:{},2177:{},2240:{},2241:{},2242:{},2243:{},2244:{},2245:{},2246:{},2247:{},2248:{},2249:{},2250:{},2251:{},2262:{r:12},29282:{}};function ge(e,t,r,n){var a=t;if(!isNaN(a)){var i=n||(r||[]).length||0,s=e.next(4);s.write_shift(2,a),s.write_shift(2,i),i>0&&$l(r)&&e.push(r)}}function z4(e,t,r,n){var a=n||(r||[]).length||0;if(a<=8224)return ge(e,t,r,a);var i=t;if(!isNaN(i)){for(var s=r.parts||[],o=0,c=0,f=0;f+(s[o]||8224)<=8224;)f+=s[o]||8224,o++;var u=e.next(4);for(u.write_shift(2,i),u.write_shift(2,f),e.push(r.slice(c,c+f)),c+=f;c<a;){for(u=e.next(4),u.write_shift(2,60),f=0;f+(s[o]||8224)<=8224;)f+=s[o]||8224,o++;u.write_shift(2,f),e.push(r.slice(c,c+f)),c+=f}}}function us(e,t,r){return e||(e=ne(7)),e.write_shift(2,t),e.write_shift(2,r),e.write_shift(2,0),e.write_shift(1,0),e}function G4(e,t,r,n){var a=ne(9);return us(a,e,t),id(r,n||"b",a),a}function X4(e,t,r){var n=ne(8+2*r.length);return us(n,e,t),n.write_shift(1,r.length),n.write_shift(r.length,r,"sbcs"),n.l<n.length?n.slice(0,n.l):n}function K4(e,t,r,n){if(t.v!=null)switch(t.t){case"d":case"n":var a=t.t=="d"?Ot(it(t.v)):t.v;a==(a|0)&&a>=0&&a<65536?ge(e,2,jk(r,n,a)):ge(e,3,Wk(r,n,a));return;case"b":case"e":ge(e,5,G4(r,n,t.v,t.t));return;case"s":case"str":ge(e,4,X4(r,n,(t.v||"").slice(0,255)));return}ge(e,1,us(null,r,n))}function Y4(e,t,r,n){var a=Array.isArray(t),i=Ye(t["!ref"]||"A1"),s,o="",c=[];if(i.e.c>255||i.e.r>16383){if(n.WTF)throw new Error("Range "+(t["!ref"]||"A1")+" exceeds format limit A1:IV16384");i.e.c=Math.min(i.e.c,255),i.e.r=Math.min(i.e.c,16383),s=Me(i)}for(var f=i.s.r;f<=i.e.r;++f){o=yt(f);for(var u=i.s.c;u<=i.e.c;++u){f===i.s.r&&(c[u]=ut(u)),s=c[u]+o;var h=a?(t[f]||[])[u]:t[s];h&&K4(e,h,f,u)}}}function q4(e,t){for(var r=t||{},n=ur(),a=0,i=0;i<e.SheetNames.length;++i)e.SheetNames[i]==r.sheet&&(a=i);if(a==0&&r.sheet&&e.SheetNames[0]!=r.sheet)throw new Error("Sheet not found: "+r.sheet);return ge(n,r.biff==4?1033:r.biff==3?521:9,sc(e,16,r)),Y4(n,e.Sheets[e.SheetNames[a]],a,r),ge(n,10),n.end()}function J4(e,t,r){ge(e,49,jy({sz:12,color:{theme:1},name:"Arial",family:2,scheme:"minor"},r))}function Z4(e,t,r){t&&[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&ge(e,1054,qy(a,t[a],r))})}function Q4(e,t){var r=ne(19);r.write_shift(4,2151),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(2,3),r.write_shift(1,1),r.write_shift(4,0),ge(e,2151,r),r=ne(39),r.write_shift(4,2152),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(2,3),r.write_shift(1,0),r.write_shift(4,0),r.write_shift(2,1),r.write_shift(4,4),r.write_shift(2,0),ud(Ye(t["!ref"]||"A1"),r),r.write_shift(4,4),ge(e,2152,r)}function eA(e,t){for(var r=0;r<16;++r)ge(e,224,gd({numFmtId:0,style:!0},0,t));t.cellXfs.forEach(function(n){ge(e,224,gd(n,0,t))})}function tA(e,t){for(var r=0;r<t["!links"].length;++r){var n=t["!links"][r];ge(e,440,bk(n)),n[1].Tooltip&&ge(e,2048,Tk(n))}delete t["!links"]}function rA(e,t){if(t){var r=0;t.forEach(function(n,a){++r<=256&&n&&ge(e,125,Ok(To(a,n),a))})}}function nA(e,t,r,n,a){var i=16+Qn(a.cellXfs,t,a);if(t.v==null&&!t.bf){ge(e,513,ba(r,n,i));return}if(t.bf)ge(e,6,AT(t,r,n,a,i));else switch(t.t){case"d":case"n":var s=t.t=="d"?Ot(it(t.v)):t.v;ge(e,515,lk(r,n,s,i));break;case"b":case"e":ge(e,517,sk(r,n,t.v,i,a,t.t));break;case"s":case"str":if(a.bookSST){var o=wc(a.Strings,t.v,a.revStrings);ge(e,253,Gy(r,n,o,i))}else ge(e,516,Ky(r,n,(t.v||"").slice(0,255),i,a));break;default:ge(e,513,ba(r,n,i))}}function aA(e,t,r){var n=ur(),a=r.SheetNames[e],i=r.Sheets[a]||{},s=(r||{}).Workbook||{},o=(s.Sheets||[])[e]||{},c=Array.isArray(i),f=t.biff==8,u,h="",d=[],p=Ye(i["!ref"]||"A1"),g=f?65536:16384;if(p.e.c>255||p.e.r>=g){if(t.WTF)throw new Error("Range "+(i["!ref"]||"A1")+" exceeds format limit A1:IV16384");p.e.c=Math.min(p.e.c,255),p.e.r=Math.min(p.e.c,g-1)}ge(n,2057,sc(r,16,t)),ge(n,13,Nr(1)),ge(n,12,Nr(100)),ge(n,15,or(!0)),ge(n,17,or(!1)),ge(n,16,wa(.001)),ge(n,95,or(!0)),ge(n,42,or(!1)),ge(n,43,or(!1)),ge(n,130,Nr(1)),ge(n,128,ik([0,0])),ge(n,131,or(!1)),ge(n,132,or(!1)),f&&rA(n,i["!cols"]),ge(n,512,Zy(p,t)),f&&(i["!links"]=[]);for(var m=p.s.r;m<=p.e.r;++m){h=yt(m);for(var x=p.s.c;x<=p.e.c;++x){m===p.s.r&&(d[x]=ut(x)),u=d[x]+h;var v=c?(i[m]||[])[x]:i[u];v&&(nA(n,v,m,x,t),f&&v.l&&i["!links"].push([u,v.l]))}}var k=o.CodeName||o.name||a;return f&&ge(n,574,$y((s.Views||[])[0])),f&&(i["!merges"]||[]).length&&ge(n,229,vk(i["!merges"])),f&&tA(n,i),ge(n,442,sd(k)),f&&Q4(n,i),ge(n,10),n.end()}function iA(e,t,r){var n=ur(),a=(e||{}).Workbook||{},i=a.Sheets||[],s=a.WBProps||{},o=r.biff==8,c=r.biff==5;if(ge(n,2057,sc(e,5,r)),r.bookType=="xla"&&ge(n,135),ge(n,225,o?Nr(1200):null),ge(n,193,sy(2)),c&&ge(n,191),c&&ge(n,192),ge(n,226),ge(n,92,Cy("SheetJS",r)),ge(n,66,Nr(o?1200:1252)),o&&ge(n,353,Nr(0)),o&&ge(n,448),ge(n,317,Pk(e.SheetNames.length)),o&&e.vbaraw&&ge(n,211),o&&e.vbaraw){var f=s.CodeName||"ThisWorkbook";ge(n,442,sd(f))}ge(n,156,Nr(17)),ge(n,25,or(!1)),ge(n,18,or(!1)),ge(n,19,Nr(0)),o&&ge(n,431,or(!1)),o&&ge(n,444,Nr(0)),ge(n,61,Vy()),ge(n,64,or(!1)),ge(n,141,Nr(0)),ge(n,34,or(LC(e)=="true")),ge(n,14,or(!0)),o&&ge(n,439,or(!1)),ge(n,218,Nr(0)),J4(n,e,r),Z4(n,e.SSF,r),eA(n,r),o&&ge(n,352,or(!1));var u=n.end(),h=ur();o&&ge(h,140,Ck()),o&&r.Strings&&z4(h,252,By(r.Strings)),ge(h,10);var d=h.end(),p=ur(),g=0,m=0;for(m=0;m<e.SheetNames.length;++m)g+=(o?12:11)+(o?2:1)*e.SheetNames[m].length;var x=u.length+g+d.length;for(m=0;m<e.SheetNames.length;++m){var v=i[m]||{};ge(p,133,Ry({pos:x,hs:v.Hidden||0,dt:0,name:e.SheetNames[m]},r)),x+=t[m].length}var k=p.end();if(g!=k.length)throw new Error("BS8 "+g+" != "+k.length);var w=[];return u.length&&w.push(u),k.length&&w.push(k),d.length&&w.push(d),Lt(w)}function sA(e,t){var r=t||{},n=[];e&&!e.SSF&&(e.SSF=st(Se)),e&&e.SSF&&(za(),Mi(e.SSF),r.revssf=ao(e.SSF),r.revssf[e.SSF[65535]]=0,r.ssf=e.SSF),r.Strings=[],r.Strings.Count=0,r.Strings.Unique=0,Rc(r),r.cellXfs=[],Qn(r.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={});for(var a=0;a<e.SheetNames.length;++a)n[n.length]=aA(a,r,e);return n.unshift(iA(e,n,r)),Lt(n)}function xm(e,t){for(var r=0;r<=e.SheetNames.length;++r){var n=e.Sheets[e.SheetNames[r]];if(!(!n||!n["!ref"])){var a=hr(n["!ref"]);a.e.c>255&&typeof console<"u"&&console.error&&console.error("Worksheet '"+e.SheetNames[r]+"' extends beyond column IV (255).  Data may be lost.")}}var i=t||{};switch(i.biff||2){case 8:case 5:return sA(e,t);case 4:case 3:case 2:return q4(e,t)}throw new Error("invalid type "+i.bookType+" for BIFF")}function vm(e,t){var r=t||{},n=r.dense?[]:{};e=e.replace(/<!--.*?-->/g,"");var a=e.match(/<table/i);if(!a)throw new Error("Invalid HTML: could not find <table>");var i=e.match(/<\/table/i),s=a.index,o=i&&i.index||e.length,c=z2(e.slice(s,o),/(:?<tr[^>]*>)/i,"<tr>"),f=-1,u=0,h=0,d=0,p={s:{r:1e7,c:1e7},e:{r:0,c:0}},g=[];for(s=0;s<c.length;++s){var m=c[s].trim(),x=m.slice(0,3).toLowerCase();if(x=="<tr"){if(++f,r.sheetRows&&r.sheetRows<=f){--f;break}u=0;continue}if(!(x!="<td"&&x!="<th")){var v=m.split(/<\/t[dh]>/i);for(o=0;o<v.length;++o){var k=v[o].trim();if(k.match(/<t[dh]/i)){for(var w=k,S=0;w.charAt(0)=="<"&&(S=w.indexOf(">"))>-1;)w=w.slice(S+1);for(var b=0;b<g.length;++b){var T=g[b];T.s.c==u&&T.s.r<f&&f<=T.e.r&&(u=T.e.c+1,b=-1)}var y=Re(k.slice(0,k.indexOf(">")));d=y.colspan?+y.colspan:1,((h=+y.rowspan)>1||d>1)&&g.push({s:{r:f,c:u},e:{r:f+(h||1)-1,c:u+d-1}});var O=y.t||y["data-t"]||"";if(!w.length){u+=d;continue}if(w=sh(w),p.s.r>f&&(p.s.r=f),p.e.r<f&&(p.e.r=f),p.s.c>u&&(p.s.c=u),p.e.c<u&&(p.e.c=u),!w.length){u+=d;continue}var B={t:"s",v:w};r.raw||!w.trim().length||O=="s"||(w==="TRUE"?B={t:"b",v:!0}:w==="FALSE"?B={t:"b",v:!1}:isNaN(jr(w))?isNaN(Ga(w).getDate())||(B={t:"d",v:it(w)},r.cellDates||(B={t:"n",v:Ot(B.v)}),B.z=r.dateNF||Se[14]):B={t:"n",v:jr(w)}),r.dense?(n[f]||(n[f]=[]),n[f][u]=B):n[Ce({r:f,c:u})]=B,u+=d}}}}return n["!ref"]=Me(p),g.length&&(n["!merges"]=g),n}function oA(e,t,r,n){for(var a=e["!merges"]||[],i=[],s=t.s.c;s<=t.e.c;++s){for(var o=0,c=0,f=0;f<a.length;++f)if(!(a[f].s.r>r||a[f].s.c>s)&&!(a[f].e.r<r||a[f].e.c<s)){if(a[f].s.r<r||a[f].s.c<s){o=-1;break}o=a[f].e.r-a[f].s.r+1,c=a[f].e.c-a[f].s.c+1;break}if(!(o<0)){var u=Ce({r,c:s}),h=n.dense?(e[r]||[])[s]:e[u],d=h&&h.v!=null&&(h.h||Il(h.w||(Tn(h),h.w)||""))||"",p={};o>1&&(p.rowspan=o),c>1&&(p.colspan=c),n.editable?d='<span contenteditable="true">'+d+"</span>":h&&(p["data-t"]=h&&h.t||"z",h.v!=null&&(p["data-v"]=h.v),h.z!=null&&(p["data-z"]=h.z),h.l&&(h.l.Target||"#").charAt(0)!="#"&&(d='<a href="'+h.l.Target+'">'+d+"</a>")),p.id=(n.id||"sjs")+"-"+u,i.push(pe("td",d,p))}}var g="<tr>";return g+i.join("")+"</tr>"}var lA='<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>',cA="</body></html>";function fA(e,t){var r=e.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);if(!r||r.length==0)throw new Error("Invalid HTML: could not find <table>");if(r.length==1)return Yn(vm(r[0],t),t);var n=Ic();return r.forEach(function(a,i){Lc(n,vm(a,t),"Sheet"+(i+1))}),n}function uA(e,t,r){var n=[];return n.join("")+"<table"+(r&&r.id?' id="'+r.id+'"':"")+">"}function wm(e,t){var r=t||{},n=r.header!=null?r.header:lA,a=r.footer!=null?r.footer:cA,i=[n],s=hr(e["!ref"]);r.dense=Array.isArray(e),i.push(uA(e,s,r));for(var o=s.s.r;o<=s.e.r;++o)i.push(oA(e,s,o,r));return i.push("</table>"+a),i.join("")}function _m(e,t,r){var n=r||{},a=0,i=0;if(n.origin!=null)if(typeof n.origin=="number")a=n.origin;else{var s=typeof n.origin=="string"?ht(n.origin):n.origin;a=s.r,i=s.c}var o=t.getElementsByTagName("tr"),c=Math.min(n.sheetRows||1e7,o.length),f={s:{r:0,c:0},e:{r:a,c:i}};if(e["!ref"]){var u=hr(e["!ref"]);f.s.r=Math.min(f.s.r,u.s.r),f.s.c=Math.min(f.s.c,u.s.c),f.e.r=Math.max(f.e.r,u.e.r),f.e.c=Math.max(f.e.c,u.e.c),a==-1&&(f.e.r=a=u.e.r+1)}var h=[],d=0,p=e["!rows"]||(e["!rows"]=[]),g=0,m=0,x=0,v=0,k=0,w=0;for(e["!cols"]||(e["!cols"]=[]);g<o.length&&m<c;++g){var S=o[g];if(km(S)){if(n.display)continue;p[m]={hidden:!0}}var b=S.children;for(x=v=0;x<b.length;++x){var T=b[x];if(!(n.display&&km(T))){var y=T.hasAttribute("data-v")?T.getAttribute("data-v"):T.hasAttribute("v")?T.getAttribute("v"):sh(T.innerHTML),O=T.getAttribute("data-z")||T.getAttribute("z");for(d=0;d<h.length;++d){var B=h[d];B.s.c==v+i&&B.s.r<m+a&&m+a<=B.e.r&&(v=B.e.c+1-i,d=-1)}w=+T.getAttribute("colspan")||1,((k=+T.getAttribute("rowspan")||1)>1||w>1)&&h.push({s:{r:m+a,c:v+i},e:{r:m+a+(k||1)-1,c:v+i+(w||1)-1}});var H={t:"s",v:y},j=T.getAttribute("data-t")||T.getAttribute("t")||"";y!=null&&(y.length==0?H.t=j||"z":n.raw||y.trim().length==0||j=="s"||(y==="TRUE"?H={t:"b",v:!0}:y==="FALSE"?H={t:"b",v:!1}:isNaN(jr(y))?isNaN(Ga(y).getDate())||(H={t:"d",v:it(y)},n.cellDates||(H={t:"n",v:Ot(H.v)}),H.z=n.dateNF||Se[14]):H={t:"n",v:jr(y)})),H.z===void 0&&O!=null&&(H.z=O);var I="",X=T.getElementsByTagName("A");if(X&&X.length)for(var q=0;q<X.length&&!(X[q].hasAttribute("href")&&(I=X[q].getAttribute("href"),I.charAt(0)!="#"));++q);I&&I.charAt(0)!="#"&&(H.l={Target:I}),n.dense?(e[m+a]||(e[m+a]=[]),e[m+a][v+i]=H):e[Ce({c:v+i,r:m+a})]=H,f.e.c<v+i&&(f.e.c=v+i),v+=w}}++m}return h.length&&(e["!merges"]=(e["!merges"]||[]).concat(h)),f.e.r=Math.max(f.e.r,m-1+a),e["!ref"]=Me(f),m>=c&&(e["!fullref"]=Me((f.e.r=o.length-g+m-1+a,f))),e}function ym(e,t){var r=t||{},n=r.dense?[]:{};return _m(n,e,t)}function hA(e,t){return Yn(ym(e,t),t)}function km(e){var t="",r=dA(e);return r&&(t=r(e).getPropertyValue("display")),t||(t=e.style&&e.style.display),t==="none"}function dA(e){return e.ownerDocument.defaultView&&typeof e.ownerDocument.defaultView.getComputedStyle=="function"?e.ownerDocument.defaultView.getComputedStyle:typeof getComputedStyle=="function"?getComputedStyle:null}function mA(e){var t=e.replace(/[\t\r\n]/g," ").trim().replace(/ +/g," ").replace(/<text:s\/>/g," ").replace(/<text:s text:c="(\d+)"\/>/g,function(n,a){return Array(parseInt(a,10)+1).join(" ")}).replace(/<text:tab[^>]*\/>/g,"	").replace(/<text:line-break\/>/g,`
`),r=Ke(t.replace(/<[^>]*>/g,""));return[r]}var Em={day:["d","dd"],month:["m","mm"],year:["y","yy"],hours:["h","hh"],minutes:["m","mm"],seconds:["s","ss"],"am-pm":["A/P","AM/PM"],"day-of-week":["ddd","dddd"],era:["e","ee"],quarter:["\\Qm",'m\\"th quarter"']};function bm(e,t){var r=t||{},n=Vl(e),a=[],i,s,o={name:""},c="",f=0,u,h,d={},p=[],g=r.dense?[]:{},m,x,v={value:""},k="",w=0,S=[],b=-1,T=-1,y={s:{r:1e6,c:1e7},e:{r:0,c:0}},O=0,B={},H=[],j={},I=0,X=0,q=[],te=1,ae=1,oe=[],ue={Names:[]},z={},W=["",""],A=[],_={},F="",D=0,M=!1,K=!1,J=0;for(Hi.lastIndex=0,n=n.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");m=Hi.exec(n);)switch(m[3]=m[3].replace(/_.*$/,"")){case"table":case"工作表":m[1]==="/"?(y.e.c>=y.s.c&&y.e.r>=y.s.r?g["!ref"]=Me(y):g["!ref"]="A1:A1",r.sheetRows>0&&r.sheetRows<=y.e.r&&(g["!fullref"]=g["!ref"],y.e.r=r.sheetRows-1,g["!ref"]=Me(y)),H.length&&(g["!merges"]=H),q.length&&(g["!rows"]=q),u.name=u.名称||u.name,typeof JSON<"u"&&JSON.stringify(u),p.push(u.name),d[u.name]=g,K=!1):m[0].charAt(m[0].length-2)!=="/"&&(u=Re(m[0],!1),b=T=-1,y.s.r=y.s.c=1e7,y.e.r=y.e.c=0,g=r.dense?[]:{},H=[],q=[],K=!0);break;case"table-row-group":m[1]==="/"?--O:++O;break;case"table-row":case"行":if(m[1]==="/"){b+=te,te=1;break}if(h=Re(m[0],!1),h.行号?b=h.行号-1:b==-1&&(b=0),te=+h["number-rows-repeated"]||1,te<10)for(J=0;J<te;++J)O>0&&(q[b+J]={level:O});T=-1;break;case"covered-table-cell":m[1]!=="/"&&++T,r.sheetStubs&&(r.dense?(g[b]||(g[b]=[]),g[b][T]={t:"z"}):g[Ce({r:b,c:T})]={t:"z"}),k="",S=[];break;case"table-cell":case"数据":if(m[0].charAt(m[0].length-2)==="/")++T,v=Re(m[0],!1),ae=parseInt(v["number-columns-repeated"]||"1",10),x={t:"z",v:null},v.formula&&r.cellFormula!=!1&&(x.f=rm(Ke(v.formula))),(v.数据类型||v["value-type"])=="string"&&(x.t="s",x.v=Ke(v["string-value"]||""),r.dense?(g[b]||(g[b]=[]),g[b][T]=x):g[Ce({r:b,c:T})]=x),T+=ae-1;else if(m[1]!=="/"){++T,k="",w=0,S=[],ae=1;var re=te?b+te-1:b;if(T>y.e.c&&(y.e.c=T),T<y.s.c&&(y.s.c=T),b<y.s.r&&(y.s.r=b),re>y.e.r&&(y.e.r=re),v=Re(m[0],!1),A=[],_={},x={t:v.数据类型||v["value-type"],v:null},r.cellFormula)if(v.formula&&(v.formula=Ke(v.formula)),v["number-matrix-columns-spanned"]&&v["number-matrix-rows-spanned"]&&(I=parseInt(v["number-matrix-rows-spanned"],10)||0,X=parseInt(v["number-matrix-columns-spanned"],10)||0,j={s:{r:b,c:T},e:{r:b+I-1,c:T+X-1}},x.F=Me(j),oe.push([j,x.F])),v.formula)x.f=rm(v.formula);else for(J=0;J<oe.length;++J)b>=oe[J][0].s.r&&b<=oe[J][0].e.r&&T>=oe[J][0].s.c&&T<=oe[J][0].e.c&&(x.F=oe[J][1]);switch((v["number-columns-spanned"]||v["number-rows-spanned"])&&(I=parseInt(v["number-rows-spanned"],10)||0,X=parseInt(v["number-columns-spanned"],10)||0,j={s:{r:b,c:T},e:{r:b+I-1,c:T+X-1}},H.push(j)),v["number-columns-repeated"]&&(ae=parseInt(v["number-columns-repeated"],10)),x.t){case"boolean":x.t="b",x.v=ot(v["boolean-value"]);break;case"float":x.t="n",x.v=parseFloat(v.value);break;case"percentage":x.t="n",x.v=parseFloat(v.value);break;case"currency":x.t="n",x.v=parseFloat(v.value);break;case"date":x.t="d",x.v=it(v["date-value"]),r.cellDates||(x.t="n",x.v=Ot(x.v)),x.z="m/d/yy";break;case"time":x.t="n",x.v=W2(v["time-value"])/86400,r.cellDates&&(x.t="d",x.v=so(x.v)),x.z="HH:MM:SS";break;case"number":x.t="n",x.v=parseFloat(v.数据数值);break;default:if(x.t==="string"||x.t==="text"||!x.t)x.t="s",v["string-value"]!=null&&(k=Ke(v["string-value"]),S=[]);else throw new Error("Unsupported value type "+x.t)}}else{if(M=!1,x.t==="s"&&(x.v=k||"",S.length&&(x.R=S),M=w==0),z.Target&&(x.l=z),A.length>0&&(x.c=A,A=[]),k&&r.cellText!==!1&&(x.w=k),M&&(x.t="z",delete x.v),(!M||r.sheetStubs)&&!(r.sheetRows&&r.sheetRows<=b))for(var le=0;le<te;++le){if(ae=parseInt(v["number-columns-repeated"]||"1",10),r.dense)for(g[b+le]||(g[b+le]=[]),g[b+le][T]=le==0?x:st(x);--ae>0;)g[b+le][T+ae]=st(x);else for(g[Ce({r:b+le,c:T})]=x;--ae>0;)g[Ce({r:b+le,c:T+ae})]=st(x);y.e.c<=T&&(y.e.c=T)}ae=parseInt(v["number-columns-repeated"]||"1",10),T+=ae-1,ae=0,x={},k="",S=[]}z={};break;case"document":case"document-content":case"电子表格文档":case"spreadsheet":case"主体":case"scripts":case"styles":case"font-face-decls":case"master-styles":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!0]);break;case"annotation":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i;_.t=k,S.length&&(_.R=S),_.a=F,A.push(_)}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!1]);F="",D=0,k="",w=0,S=[];break;case"creator":m[1]==="/"?F=n.slice(D,m.index):D=m.index+m[0].length;break;case"meta":case"元数据":case"settings":case"config-item-set":case"config-item-map-indexed":case"config-item-map-entry":case"config-item-map-named":case"shapes":case"frame":case"text-box":case"image":case"data-pilot-tables":case"list-style":case"form":case"dde-links":case"event-listeners":case"chart":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!1]);k="",w=0,S=[];break;case"scientific-number":break;case"currency-symbol":break;case"currency-style":break;case"number-style":case"percentage-style":case"date-style":case"time-style":if(m[1]==="/"){if(B[o.name]=c,(i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&(c="",o=Re(m[0],!1),a.push([m[3],!0]));break;case"script":break;case"libraries":break;case"automatic-styles":break;case"default-style":case"page-layout":break;case"style":break;case"map":break;case"font-face":break;case"paragraph-properties":break;case"table-properties":break;case"table-column-properties":break;case"table-row-properties":break;case"table-cell-properties":break;case"number":switch(a[a.length-1][0]){case"time-style":case"date-style":s=Re(m[0],!1),c+=Em[m[3]][s.style==="long"?1:0];break}break;case"fraction":break;case"day":case"month":case"year":case"era":case"day-of-week":case"week-of-year":case"quarter":case"hours":case"minutes":case"seconds":case"am-pm":switch(a[a.length-1][0]){case"time-style":case"date-style":s=Re(m[0],!1),c+=Em[m[3]][s.style==="long"?1:0];break}break;case"boolean-style":break;case"boolean":break;case"text-style":break;case"text":if(m[0].slice(-2)==="/>")break;if(m[1]==="/")switch(a[a.length-1][0]){case"number-style":case"date-style":case"time-style":c+=n.slice(f,m.index);break}else f=m.index+m[0].length;break;case"named-range":s=Re(m[0],!1),W=vc(s["cell-range-address"]);var ce={Name:s.name,Ref:W[0]+"!"+W[1]};K&&(ce.Sheet=p.length),ue.Names.push(ce);break;case"text-content":break;case"text-properties":break;case"embedded-text":break;case"body":case"电子表格":break;case"forms":break;case"table-column":break;case"table-header-rows":break;case"table-rows":break;case"table-column-group":break;case"table-header-columns":break;case"table-columns":break;case"null-date":break;case"graphic-properties":break;case"calculation-settings":break;case"named-expressions":break;case"label-range":break;case"label-ranges":break;case"named-expression":break;case"sort":break;case"sort-by":break;case"sort-groups":break;case"tab":break;case"line-break":break;case"span":break;case"p":case"文本串":if(["master-styles"].indexOf(a[a.length-1][0])>-1)break;if(m[1]==="/"&&(!v||!v["string-value"])){var Be=mA(n.slice(w,m.index));k=(k.length>0?k+`
`:"")+Be[0]}else Re(m[0],!1),w=m.index+m[0].length;break;case"s":break;case"database-range":if(m[1]==="/")break;try{W=vc(Re(m[0])["target-range-address"]),d[W[0]]["!autofilter"]={ref:W[1]}}catch{}break;case"date":break;case"object":break;case"title":case"标题":break;case"desc":break;case"binary-data":break;case"table-source":break;case"scenario":break;case"iteration":break;case"content-validations":break;case"content-validation":break;case"help-message":break;case"error-message":break;case"database-ranges":break;case"filter":break;case"filter-and":break;case"filter-or":break;case"filter-condition":break;case"list-level-style-bullet":break;case"list-level-style-number":break;case"list-level-properties":break;case"sender-firstname":case"sender-lastname":case"sender-initials":case"sender-title":case"sender-position":case"sender-email":case"sender-phone-private":case"sender-fax":case"sender-company":case"sender-phone-work":case"sender-street":case"sender-city":case"sender-postal-code":case"sender-country":case"sender-state-or-province":case"author-name":case"author-initials":case"chapter":case"file-name":case"template-name":case"sheet-name":break;case"event-listener":break;case"initial-creator":case"creation-date":case"print-date":case"generator":case"document-statistic":case"user-defined":case"editing-duration":case"editing-cycles":break;case"config-item":break;case"page-number":break;case"page-count":break;case"time":break;case"cell-range-source":break;case"detective":break;case"operation":break;case"highlighted-range":break;case"data-pilot-table":case"source-cell-range":case"source-service":case"data-pilot-field":case"data-pilot-level":case"data-pilot-subtotals":case"data-pilot-subtotal":case"data-pilot-members":case"data-pilot-member":case"data-pilot-display-info":case"data-pilot-sort-info":case"data-pilot-layout-info":case"data-pilot-field-reference":case"data-pilot-groups":case"data-pilot-group":case"data-pilot-group-member":break;case"rect":break;case"dde-connection-decls":case"dde-connection-decl":case"dde-link":case"dde-source":break;case"properties":break;case"property":break;case"a":if(m[1]!=="/"){if(z=Re(m[0],!1),!z.href)break;z.Target=Ke(z.href),delete z.href,z.Target.charAt(0)=="#"&&z.Target.indexOf(".")>-1?(W=vc(z.Target.slice(1)),z.Target="#"+W[0]+"!"+W[1]):z.Target.match(/^\.\.[\\\/]/)&&(z.Target=z.Target.slice(3))}break;case"table-protection":break;case"data-pilot-grand-total":break;case"office-document-common-attrs":break;default:switch(m[2]){case"dc:":case"calcext:":case"loext:":case"ooo:":case"chartooo:":case"draw:":case"style:":case"chart:":case"form:":case"uof:":case"表:":case"字:":break;default:if(r.WTF)throw new Error(m)}}var V={Sheets:d,SheetNames:p,Workbook:ue};return r.bookSheets&&delete V.Sheets,V}function Sm(e,t){t=t||{},Rr(e,"META-INF/manifest.xml")&&$_(Tt(e,"META-INF/manifest.xml"),t);var r=kr(e,"content.xml");if(!r)throw new Error("Missing content.xml in ODS / UOF file");var n=bm(nt(r),t);return Rr(e,"meta.xml")&&(n.Props=$h(Tt(e,"meta.xml"))),n}function Tm(e,t){return bm(e,t)}var pA=function(){var e=["<office:master-styles>",'<style:master-page style:name="mp1" style:page-layout-name="mp1">',"<style:header/>",'<style:header-left style:display="false"/>',"<style:footer/>",'<style:footer-left style:display="false"/>',"</style:master-page>","</office:master-styles>"].join(""),t="<office:document-styles "+Wi({"xmlns:office":"urn:oasis:names:tc:opendocument:xmlns:office:1.0","xmlns:table":"urn:oasis:names:tc:opendocument:xmlns:table:1.0","xmlns:style":"urn:oasis:names:tc:opendocument:xmlns:style:1.0","xmlns:text":"urn:oasis:names:tc:opendocument:xmlns:text:1.0","xmlns:draw":"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0","xmlns:fo":"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:dc":"http://purl.org/dc/elements/1.1/","xmlns:number":"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0","xmlns:svg":"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0","xmlns:of":"urn:oasis:names:tc:opendocument:xmlns:of:1.2","office:version":"1.2"})+">"+e+"</office:document-styles>";return function(){return _t+t}}(),Fm=function(){var e=function(i){return Qe(i).replace(/  +/g,function(s){return'<text:s text:c="'+s.length+'"/>'}).replace(/\t/g,"<text:tab/>").replace(/\n/g,"</text:p><text:p>").replace(/^ /,"<text:s/>").replace(/ $/,"<text:s/>")},t=`          <table:table-cell />
`,r=`          <table:covered-table-cell/>
`,n=function(i,s,o){var c=[];c.push('      <table:table table:name="'+Qe(s.SheetNames[o])+`" table:style-name="ta1">
`);var f=0,u=0,h=hr(i["!ref"]||"A1"),d=i["!merges"]||[],p=0,g=Array.isArray(i);if(i["!cols"])for(u=0;u<=h.e.c;++u)c.push("        <table:table-column"+(i["!cols"][u]?' table:style-name="co'+i["!cols"][u].ods+'"':"")+`></table:table-column>
`);var m="",x=i["!rows"]||[];for(f=0;f<h.s.r;++f)m=x[f]?' table:style-name="ro'+x[f].ods+'"':"",c.push("        <table:table-row"+m+`></table:table-row>
`);for(;f<=h.e.r;++f){for(m=x[f]?' table:style-name="ro'+x[f].ods+'"':"",c.push("        <table:table-row"+m+`>
`),u=0;u<h.s.c;++u)c.push(t);for(;u<=h.e.c;++u){var v=!1,k={},w="";for(p=0;p!=d.length;++p)if(!(d[p].s.c>u)&&!(d[p].s.r>f)&&!(d[p].e.c<u)&&!(d[p].e.r<f)){(d[p].s.c!=u||d[p].s.r!=f)&&(v=!0),k["table:number-columns-spanned"]=d[p].e.c-d[p].s.c+1,k["table:number-rows-spanned"]=d[p].e.r-d[p].s.r+1;break}if(v){c.push(r);continue}var S=Ce({r:f,c:u}),b=g?(i[f]||[])[u]:i[S];if(b&&b.f&&(k["table:formula"]=Qe(PT(b.f)),b.F&&b.F.slice(0,S.length)==S)){var T=hr(b.F);k["table:number-matrix-columns-spanned"]=T.e.c-T.s.c+1,k["table:number-matrix-rows-spanned"]=T.e.r-T.s.r+1}if(!b){c.push(t);continue}switch(b.t){case"b":w=b.v?"TRUE":"FALSE",k["office:value-type"]="boolean",k["office:boolean-value"]=b.v?"true":"false";break;case"n":w=b.w||String(b.v||0),k["office:value-type"]="float",k["office:value"]=b.v||0;break;case"s":case"str":w=b.v==null?"":b.v,k["office:value-type"]="string";break;case"d":w=b.w||it(b.v).toISOString(),k["office:value-type"]="date",k["office:date-value"]=it(b.v).toISOString(),k["table:style-name"]="ce1";break;default:c.push(t);continue}var y=e(w);if(b.l&&b.l.Target){var O=b.l.Target;O=O.charAt(0)=="#"?"#"+IT(O.slice(1)):O,O.charAt(0)!="#"&&!O.match(/^\w+:/)&&(O="../"+O),y=pe("text:a",y,{"xlink:href":O.replace(/&/g,"&amp;")})}c.push("          "+pe("table:table-cell",pe("text:p",y,{}),k)+`
`)}c.push(`        </table:table-row>
`)}return c.push(`      </table:table>
`),c.join("")},a=function(i,s){i.push(` <office:automatic-styles>
`),i.push(`  <number:date-style style:name="N37" number:automatic-order="true">
`),i.push(`   <number:month number:style="long"/>
`),i.push(`   <number:text>/</number:text>
`),i.push(`   <number:day number:style="long"/>
`),i.push(`   <number:text>/</number:text>
`),i.push(`   <number:year/>
`),i.push(`  </number:date-style>
`);var o=0;s.SheetNames.map(function(f){return s.Sheets[f]}).forEach(function(f){if(f&&f["!cols"]){for(var u=0;u<f["!cols"].length;++u)if(f["!cols"][u]){var h=f["!cols"][u];if(h.width==null&&h.wpx==null&&h.wch==null)continue;Jn(h),h.ods=o;var d=f["!cols"][u].wpx+"px";i.push('  <style:style style:name="co'+o+`" style:family="table-column">
`),i.push('   <style:table-column-properties fo:break-before="auto" style:column-width="'+d+`"/>
`),i.push(`  </style:style>
`),++o}}});var c=0;s.SheetNames.map(function(f){return s.Sheets[f]}).forEach(function(f){if(f&&f["!rows"]){for(var u=0;u<f["!rows"].length;++u)if(f["!rows"][u]){f["!rows"][u].ods=c;var h=f["!rows"][u].hpx+"px";i.push('  <style:style style:name="ro'+c+`" style:family="table-row">
`),i.push('   <style:table-row-properties fo:break-before="auto" style:row-height="'+h+`"/>
`),i.push(`  </style:style>
`),++c}}}),i.push(`  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">
`),i.push(`   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>
`),i.push(`  </style:style>
`),i.push(`  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>
`),i.push(` </office:automatic-styles>
`)};return function(s,o){var c=[_t],f=Wi({"xmlns:office":"urn:oasis:names:tc:opendocument:xmlns:office:1.0","xmlns:table":"urn:oasis:names:tc:opendocument:xmlns:table:1.0","xmlns:style":"urn:oasis:names:tc:opendocument:xmlns:style:1.0","xmlns:text":"urn:oasis:names:tc:opendocument:xmlns:text:1.0","xmlns:draw":"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0","xmlns:fo":"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:dc":"http://purl.org/dc/elements/1.1/","xmlns:meta":"urn:oasis:names:tc:opendocument:xmlns:meta:1.0","xmlns:number":"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0","xmlns:presentation":"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0","xmlns:svg":"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0","xmlns:chart":"urn:oasis:names:tc:opendocument:xmlns:chart:1.0","xmlns:dr3d":"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0","xmlns:math":"http://www.w3.org/1998/Math/MathML","xmlns:form":"urn:oasis:names:tc:opendocument:xmlns:form:1.0","xmlns:script":"urn:oasis:names:tc:opendocument:xmlns:script:1.0","xmlns:ooo":"http://openoffice.org/2004/office","xmlns:ooow":"http://openoffice.org/2004/writer","xmlns:oooc":"http://openoffice.org/2004/calc","xmlns:dom":"http://www.w3.org/2001/xml-events","xmlns:xforms":"http://www.w3.org/2002/xforms","xmlns:xsd":"http://www.w3.org/2001/XMLSchema","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xmlns:sheet":"urn:oasis:names:tc:opendocument:sh33tjs:1.0","xmlns:rpt":"http://openoffice.org/2005/report","xmlns:of":"urn:oasis:names:tc:opendocument:xmlns:of:1.2","xmlns:xhtml":"http://www.w3.org/1999/xhtml","xmlns:grddl":"http://www.w3.org/2003/g/data-view#","xmlns:tableooo":"http://openoffice.org/2009/table","xmlns:drawooo":"http://openoffice.org/2010/draw","xmlns:calcext":"urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0","xmlns:loext":"urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0","xmlns:field":"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0","xmlns:formx":"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0","xmlns:css3t":"http://www.w3.org/TR/css3-text/","office:version":"1.2"}),u=Wi({"xmlns:config":"urn:oasis:names:tc:opendocument:xmlns:config:1.0","office:mimetype":"application/vnd.oasis.opendocument.spreadsheet"});o.bookType=="fods"?(c.push("<office:document"+f+u+`>
`),c.push(Uh().replace(/office:document-meta/g,"office:meta"))):c.push("<office:document-content"+f+`>
`),a(c,s),c.push(`  <office:body>
`),c.push(`    <office:spreadsheet>
`);for(var h=0;h!=s.SheetNames.length;++h)c.push(n(s.Sheets[s.SheetNames[h]],s,h));return c.push(`    </office:spreadsheet>
`),c.push(`  </office:body>
`),o.bookType=="fods"?c.push("</office:document>"):c.push("</office:document-content>"),c.join("")}}();function Cm(e,t){if(t.bookType=="fods")return Fm(e,t);var r=Bl(),n="",a=[],i=[];return n="mimetype",Ve(r,n,"application/vnd.oasis.opendocument.spreadsheet"),n="content.xml",Ve(r,n,Fm(e,t)),a.push([n,"text/xml"]),i.push([n,"ContentFile"]),n="styles.xml",Ve(r,n,pA(e,t)),a.push([n,"text/xml"]),i.push([n,"StylesFile"]),n="meta.xml",Ve(r,n,_t+Uh()),a.push([n,"text/xml"]),i.push([n,"MetadataFile"]),n="manifest.rdf",Ve(r,n,j_(i)),a.push([n,"application/rdf+xml"]),n="META-INF/manifest.xml",Ve(r,n,W_(a)),r}/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */function Fa(e){return new DataView(e.buffer,e.byteOffset,e.byteLength)}function Sc(e){return typeof TextDecoder<"u"?new TextDecoder().decode(e):nt(Gn(e))}function gA(e){return typeof TextEncoder<"u"?new TextEncoder().encode(e):_r(sn(e))}function xA(e,t){e:for(var r=0;r<=e.length-t.length;++r){for(var n=0;n<t.length;++n)if(e[r+n]!=t[n])continue e;return!0}return!1}function ea(e){var t=e.reduce(function(a,i){return a+i.length},0),r=new Uint8Array(t),n=0;return e.forEach(function(a){r.set(a,n),n+=a.length}),r}function Am(e){return e-=e>>1&1431655765,e=(e&858993459)+(e>>2&858993459),(e+(e>>4)&252645135)*16843009>>>24}function vA(e,t){for(var r=(e[t+15]&127)<<7|e[t+14]>>1,n=e[t+14]&1,a=t+13;a>=t;--a)n=n*256+e[a];return(e[t+15]&128?-n:n)*Math.pow(10,r-6176)}function wA(e,t,r){var n=Math.floor(r==0?0:Math.LOG10E*Math.log(Math.abs(r)))+6176-20,a=r/Math.pow(10,n-6176);e[t+15]|=n>>7,e[t+14]|=(n&127)<<1;for(var i=0;a>=1;++i,a/=256)e[t+i]=a&255;e[t+15]|=r>=0?0:128}function hs(e,t){var r=t?t[0]:0,n=e[r]&127;e:if(e[r++]>=128&&(n|=(e[r]&127)<<7,e[r++]<128||(n|=(e[r]&127)<<14,e[r++]<128)||(n|=(e[r]&127)<<21,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,28),++r,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,35),++r,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,42),++r,e[r++]<128)))break e;return t&&(t[0]=r),n}function tt(e){var t=new Uint8Array(7);t[0]=e&127;var r=1;e:if(e>127){if(t[r-1]|=128,t[r]=e>>7&127,++r,e<=16383||(t[r-1]|=128,t[r]=e>>14&127,++r,e<=2097151)||(t[r-1]|=128,t[r]=e>>21&127,++r,e<=268435455)||(t[r-1]|=128,t[r]=e/256>>>21&127,++r,e<=34359738367)||(t[r-1]|=128,t[r]=e/65536>>>21&127,++r,e<=4398046511103))break e;t[r-1]|=128,t[r]=e/16777216>>>21&127,++r}return t.slice(0,r)}function wt(e){var t=0,r=e[t]&127;e:if(e[t++]>=128){if(r|=(e[t]&127)<<7,e[t++]<128||(r|=(e[t]&127)<<14,e[t++]<128)||(r|=(e[t]&127)<<21,e[t++]<128))break e;r|=(e[t]&127)<<28}return r}function qe(e){for(var t=[],r=[0];r[0]<e.length;){var n=r[0],a=hs(e,r),i=a&7;a=Math.floor(a/8);var s=0,o;if(a==0)break;switch(i){case 0:{for(var c=r[0];e[r[0]++]>=128;);o=e.slice(c,r[0])}break;case 5:s=4,o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 1:s=8,o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 2:s=hs(e,r),o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 3:case 4:default:throw new Error("PB Type ".concat(i," for Field ").concat(a," at offset ").concat(n))}var f={data:o,type:i};t[a]==null?t[a]=[f]:t[a].push(f)}return t}function jt(e){var t=[];return e.forEach(function(r,n){r.forEach(function(a){a.data&&(t.push(tt(n*8+a.type)),a.type==2&&t.push(tt(a.data.length)),t.push(a.data))})}),ea(t)}function Tc(e,t){return(e==null?void 0:e.map(function(r){return t(r.data)}))||[]}function Pr(e){for(var t,r=[],n=[0];n[0]<e.length;){var a=hs(e,n),i=qe(e.slice(n[0],n[0]+a));n[0]+=a;var s={id:wt(i[1][0].data),messages:[]};i[2].forEach(function(o){var c=qe(o.data),f=wt(c[3][0].data);s.messages.push({meta:c,data:e.slice(n[0],n[0]+f)}),n[0]+=f}),(t=i[3])!=null&&t[0]&&(s.merge=wt(i[3][0].data)>>>0>0),r.push(s)}return r}function ri(e){var t=[];return e.forEach(function(r){var n=[];n[1]=[{data:tt(r.id),type:0}],n[2]=[],r.merge!=null&&(n[3]=[{data:tt(+!!r.merge),type:0}]);var a=[];r.messages.forEach(function(s){a.push(s.data),s.meta[3]=[{type:0,data:tt(s.data.length)}],n[2].push({data:jt(s.meta),type:2})});var i=jt(n);t.push(tt(i.length)),t.push(i),a.forEach(function(s){return t.push(s)})}),ea(t)}function _A(e,t){if(e!=0)throw new Error("Unexpected Snappy chunk type ".concat(e));for(var r=[0],n=hs(t,r),a=[];r[0]<t.length;){var i=t[r[0]]&3;if(i==0){var s=t[r[0]++]>>2;if(s<60)++s;else{var o=s-59;s=t[r[0]],o>1&&(s|=t[r[0]+1]<<8),o>2&&(s|=t[r[0]+2]<<16),o>3&&(s|=t[r[0]+3]<<24),s>>>=0,s++,r[0]+=o}a.push(t.slice(r[0],r[0]+s)),r[0]+=s;continue}else{var c=0,f=0;if(i==1?(f=(t[r[0]]>>2&7)+4,c=(t[r[0]++]&224)<<3,c|=t[r[0]++]):(f=(t[r[0]++]>>2)+1,i==2?(c=t[r[0]]|t[r[0]+1]<<8,r[0]+=2):(c=(t[r[0]]|t[r[0]+1]<<8|t[r[0]+2]<<16|t[r[0]+3]<<24)>>>0,r[0]+=4)),a=[ea(a)],c==0)throw new Error("Invalid offset 0");if(c>a[0].length)throw new Error("Invalid offset beyond length");if(f>=c)for(a.push(a[0].slice(-c)),f-=c;f>=a[a.length-1].length;)a.push(a[a.length-1]),f-=a[a.length-1].length;a.push(a[0].slice(-c,-c+f))}}var u=ea(a);if(u.length!=n)throw new Error("Unexpected length: ".concat(u.length," != ").concat(n));return u}function Ir(e){for(var t=[],r=0;r<e.length;){var n=e[r++],a=e[r]|e[r+1]<<8|e[r+2]<<16;r+=3,t.push(_A(n,e.slice(r,r+a))),r+=a}if(r!==e.length)throw new Error("data is not a valid framed stream!");return ea(t)}function ni(e){for(var t=[],r=0;r<e.length;){var n=Math.min(e.length-r,268435455),a=new Uint8Array(4);t.push(a);var i=tt(n),s=i.length;t.push(i),n<=60?(s++,t.push(new Uint8Array([n-1<<2]))):n<=256?(s+=2,t.push(new Uint8Array([240,n-1&255]))):n<=65536?(s+=3,t.push(new Uint8Array([244,n-1&255,n-1>>8&255]))):n<=16777216?(s+=4,t.push(new Uint8Array([248,n-1&255,n-1>>8&255,n-1>>16&255]))):n<=4294967296&&(s+=5,t.push(new Uint8Array([252,n-1&255,n-1>>8&255,n-1>>16&255,n-1>>>24&255]))),t.push(e.slice(r,r+n)),s+=n,a[0]=0,a[1]=s&255,a[2]=s>>8&255,a[3]=s>>16&255,r+=n}return ea(t)}function yA(e,t,r,n){var a=Fa(e),i=a.getUint32(4,!0),s=(n>1?12:8)+Am(i&(n>1?3470:398))*4,o=-1,c=-1,f=NaN,u=new Date(2001,0,1);i&512&&(o=a.getUint32(s,!0),s+=4),s+=Am(i&(n>1?12288:4096))*4,i&16&&(c=a.getUint32(s,!0),s+=4),i&32&&(f=a.getFloat64(s,!0),s+=8),i&64&&(u.setTime(u.getTime()+a.getFloat64(s,!0)*1e3),s+=8);var h;switch(e[2]){case 0:break;case 2:h={t:"n",v:f};break;case 3:h={t:"s",v:t[c]};break;case 5:h={t:"d",v:u};break;case 6:h={t:"b",v:f>0};break;case 7:h={t:"n",v:f/86400};break;case 8:h={t:"e",v:0};break;case 9:if(o>-1)h={t:"s",v:r[o]};else if(c>-1)h={t:"s",v:t[c]};else if(!isNaN(f))h={t:"n",v:f};else throw new Error("Unsupported cell type ".concat(e.slice(0,4)));break;default:throw new Error("Unsupported cell type ".concat(e.slice(0,4)))}return h}function kA(e,t,r){var n=Fa(e),a=n.getUint32(8,!0),i=12,s=-1,o=-1,c=NaN,f=NaN,u=new Date(2001,0,1);a&1&&(c=vA(e,i),i+=16),a&2&&(f=n.getFloat64(i,!0),i+=8),a&4&&(u.setTime(u.getTime()+n.getFloat64(i,!0)*1e3),i+=8),a&8&&(o=n.getUint32(i,!0),i+=4),a&16&&(s=n.getUint32(i,!0),i+=4);var h;switch(e[1]){case 0:break;case 2:h={t:"n",v:c};break;case 3:h={t:"s",v:t[o]};break;case 5:h={t:"d",v:u};break;case 6:h={t:"b",v:f>0};break;case 7:h={t:"n",v:f/86400};break;case 8:h={t:"e",v:0};break;case 9:if(s>-1)h={t:"s",v:r[s]};else throw new Error("Unsupported cell type ".concat(e[1]," : ").concat(a&31," : ").concat(e.slice(0,4)));break;case 10:h={t:"n",v:c};break;default:throw new Error("Unsupported cell type ".concat(e[1]," : ").concat(a&31," : ").concat(e.slice(0,4)))}return h}function Fc(e,t){var r=new Uint8Array(32),n=Fa(r),a=12,i=0;switch(r[0]=5,e.t){case"n":r[1]=2,wA(r,a,e.v),i|=1,a+=16;break;case"b":r[1]=6,n.setFloat64(a,e.v?1:0,!0),i|=2,a+=8;break;case"s":if(t.indexOf(e.v)==-1)throw new Error("Value ".concat(e.v," missing from SST!"));r[1]=3,n.setUint32(a,t.indexOf(e.v),!0),i|=8,a+=4;break;default:throw"unsupported cell type "+e.t}return n.setUint32(8,i,!0),r.slice(0,a)}function Cc(e,t){var r=new Uint8Array(32),n=Fa(r),a=12,i=0;switch(r[0]=3,e.t){case"n":r[2]=2,n.setFloat64(a,e.v,!0),i|=32,a+=8;break;case"b":r[2]=6,n.setFloat64(a,e.v?1:0,!0),i|=32,a+=8;break;case"s":if(t.indexOf(e.v)==-1)throw new Error("Value ".concat(e.v," missing from SST!"));r[2]=3,n.setUint32(a,t.indexOf(e.v),!0),i|=16,a+=4;break;default:throw"unsupported cell type "+e.t}return n.setUint32(4,i,!0),r.slice(0,a)}function EA(e,t,r){switch(e[0]){case 0:case 1:case 2:case 3:return yA(e,t,r,e[0]);case 5:return kA(e,t,r);default:throw new Error("Unsupported payload version ".concat(e[0]))}}function er(e){var t=qe(e);return hs(t[1][0].data)}function Dm(e,t){var r=qe(t.data),n=wt(r[1][0].data),a=r[3],i=[];return(a||[]).forEach(function(s){var o=qe(s.data),c=wt(o[1][0].data)>>>0;switch(n){case 1:i[c]=Sc(o[3][0].data);break;case 8:{var f=e[er(o[9][0].data)][0],u=qe(f.data),h=e[er(u[1][0].data)][0],d=wt(h.meta[1][0].data);if(d!=2001)throw new Error("2000 unexpected reference to ".concat(d));var p=qe(h.data);i[c]=p[3].map(function(g){return Sc(g.data)}).join("")}break}}),i}function bA(e,t){var r,n,a,i,s,o,c,f,u,h,d,p,g,m,x=qe(e),v=wt(x[1][0].data)>>>0,k=wt(x[2][0].data)>>>0,w=((n=(r=x[8])==null?void 0:r[0])==null?void 0:n.data)&&wt(x[8][0].data)>0||!1,S,b;if((i=(a=x[7])==null?void 0:a[0])!=null&&i.data&&t!=0)S=(o=(s=x[7])==null?void 0:s[0])==null?void 0:o.data,b=(f=(c=x[6])==null?void 0:c[0])==null?void 0:f.data;else if((h=(u=x[4])==null?void 0:u[0])!=null&&h.data&&t!=1)S=(p=(d=x[4])==null?void 0:d[0])==null?void 0:p.data,b=(m=(g=x[3])==null?void 0:g[0])==null?void 0:m.data;else throw"NUMBERS Tile missing ".concat(t," cell storage");for(var T=w?4:1,y=Fa(S),O=[],B=0;B<S.length/2;++B){var H=y.getUint16(B*2,!0);H<65535&&O.push([B,H])}if(O.length!=k)throw"Expected ".concat(k," cells, found ").concat(O.length);var j=[];for(B=0;B<O.length-1;++B)j[O[B][0]]=b.subarray(O[B][1]*T,O[B+1][1]*T);return O.length>=1&&(j[O[O.length-1][0]]=b.subarray(O[O.length-1][1]*T)),{R:v,cells:j}}function SA(e,t){var r,n=qe(t.data),a=(r=n==null?void 0:n[7])!=null&&r[0]?wt(n[7][0].data)>>>0>0?1:0:-1,i=Tc(n[5],function(s){return bA(s,a)});return{nrows:wt(n[4][0].data)>>>0,data:i.reduce(function(s,o){return s[o.R]||(s[o.R]=[]),o.cells.forEach(function(c,f){if(s[o.R][f])throw new Error("Duplicate cell r=".concat(o.R," c=").concat(f));s[o.R][f]=c}),s},[])}}function TA(e,t,r){var n,a=qe(t.data),i={s:{r:0,c:0},e:{r:0,c:0}};if(i.e.r=(wt(a[6][0].data)>>>0)-1,i.e.r<0)throw new Error("Invalid row varint ".concat(a[6][0].data));if(i.e.c=(wt(a[7][0].data)>>>0)-1,i.e.c<0)throw new Error("Invalid col varint ".concat(a[7][0].data));r["!ref"]=Me(i);var s=qe(a[4][0].data),o=Dm(e,e[er(s[4][0].data)][0]),c=(n=s[17])!=null&&n[0]?Dm(e,e[er(s[17][0].data)][0]):[],f=qe(s[3][0].data),u=0;f[1].forEach(function(h){var d=qe(h.data),p=e[er(d[2][0].data)][0],g=wt(p.meta[1][0].data);if(g!=6002)throw new Error("6001 unexpected reference to ".concat(g));var m=SA(e,p);m.data.forEach(function(x,v){x.forEach(function(k,w){var S=Ce({r:u+v,c:w}),b=EA(k,o,c);b&&(r[S]=b)})}),u+=m.nrows})}function FA(e,t){var r=qe(t.data),n={"!ref":"A1"},a=e[er(r[2][0].data)],i=wt(a[0].meta[1][0].data);if(i!=6001)throw new Error("6000 unexpected reference to ".concat(i));return TA(e,a[0],n),n}function CA(e,t){var r,n=qe(t.data),a={name:(r=n[1])!=null&&r[0]?Sc(n[1][0].data):"",sheets:[]},i=Tc(n[2],er);return i.forEach(function(s){e[s].forEach(function(o){var c=wt(o.meta[1][0].data);c==6e3&&a.sheets.push(FA(e,o))})}),a}function AA(e,t){var r=Ic(),n=qe(t.data),a=Tc(n[1],er);if(a.forEach(function(i){e[i].forEach(function(s){var o=wt(s.meta[1][0].data);if(o==2){var c=CA(e,s);c.sheets.forEach(function(f,u){Lc(r,f,u==0?c.name:c.name+"_"+u,!0)})}})}),r.SheetNames.length==0)throw new Error("Empty NUMBERS file");return r}function Ac(e){var t,r,n,a,i={},s=[];if(e.FullPaths.forEach(function(c){if(c.match(/\.iwpv2/))throw new Error("Unsupported password protection")}),e.FileIndex.forEach(function(c){if(c.name.match(/\.iwa$/)){var f;try{f=Ir(c.content)}catch(h){return console.log("?? "+c.content.length+" "+(h.message||h))}var u;try{u=Pr(f)}catch(h){return console.log("## "+(h.message||h))}u.forEach(function(h){i[h.id]=h.messages,s.push(h.id)})}}),!s.length)throw new Error("File has no messages");var o=((a=(n=(r=(t=i==null?void 0:i[1])==null?void 0:t[0])==null?void 0:r.meta)==null?void 0:n[1])==null?void 0:a[0].data)&&wt(i[1][0].meta[1][0].data)==1&&i[1][0];if(o||s.forEach(function(c){i[c].forEach(function(f){var u=wt(f.meta[1][0].data)>>>0;if(u==1)if(!o)o=f;else throw new Error("Document has multiple roots")})}),!o)throw new Error("Cannot find Document root");return AA(i,o)}function DA(e,t,r){var n,a,i,s;if(!((n=e[6])!=null&&n[0])||!((a=e[7])!=null&&a[0]))throw"Mutation only works on post-BNC storages!";var o=((s=(i=e[8])==null?void 0:i[0])==null?void 0:s.data)&&wt(e[8][0].data)>0||!1;if(o)throw"Math only works with normal offsets";for(var c=0,f=Fa(e[7][0].data),u=0,h=[],d=Fa(e[4][0].data),p=0,g=[],m=0;m<t.length;++m){if(t[m]==null){f.setUint16(m*2,65535,!0),d.setUint16(m*2,65535);continue}f.setUint16(m*2,u,!0),d.setUint16(m*2,p,!0);var x,v;switch(typeof t[m]){case"string":x=Fc({t:"s",v:t[m]},r),v=Cc({t:"s",v:t[m]},r);break;case"number":x=Fc({t:"n",v:t[m]},r),v=Cc({t:"n",v:t[m]},r);break;case"boolean":x=Fc({t:"b",v:t[m]},r),v=Cc({t:"b",v:t[m]},r);break;default:throw new Error("Unsupported value "+t[m])}h.push(x),u+=x.length,g.push(v),p+=v.length,++c}for(e[2][0].data=tt(c);m<e[7][0].data.length/2;++m)f.setUint16(m*2,65535,!0),d.setUint16(m*2,65535,!0);return e[6][0].data=ea(h),e[3][0].data=ea(g),c}function RA(e,t){if(!t||!t.numbers)throw new Error("Must pass a `numbers` option -- check the README");var r=e.Sheets[e.SheetNames[0]];e.SheetNames.length>1&&console.error("The Numbers writer currently writes only the first table");var n=hr(r["!ref"]);n.s.r=n.s.c=0;var a=!1;n.e.c>9&&(a=!0,n.e.c=9),n.e.r>49&&(a=!0,n.e.r=49),a&&console.error("The Numbers writer is currently limited to ".concat(Me(n)));var i=Ao(r,{range:n,header:1}),s=["~Sh33tJ5~"];i.forEach(function(F){return F.forEach(function(D){typeof D=="string"&&s.push(D)})});var o={},c=[],f=Ee.read(t.numbers,{type:"base64"});f.FileIndex.map(function(F,D){return[F,f.FullPaths[D]]}).forEach(function(F){var D=F[0],M=F[1];if(D.type==2&&D.name.match(/\.iwa/)){var K=D.content,J=Ir(K),re=Pr(J);re.forEach(function(le){c.push(le.id),o[le.id]={deps:[],location:M,type:wt(le.messages[0].meta[1][0].data)}})}}),c.sort(function(F,D){return F-D});var u=c.filter(function(F){return F>1}).map(function(F){return[F,tt(F)]});f.FileIndex.map(function(F,D){return[F,f.FullPaths[D]]}).forEach(function(F){var D=F[0];if(F[1],!!D.name.match(/\.iwa/)){var M=Pr(Ir(D.content));M.forEach(function(K){K.messages.forEach(function(J){u.forEach(function(re){K.messages.some(function(le){return wt(le.meta[1][0].data)!=11006&&xA(le.data,re[1])})&&o[re[0]].deps.push(K.id)})})})}});for(var h=Ee.find(f,o[1].location),d=Pr(Ir(h.content)),p,g=0;g<d.length;++g){var m=d[g];m.id==1&&(p=m)}var x=er(qe(p.messages[0].data)[1][0].data);for(h=Ee.find(f,o[x].location),d=Pr(Ir(h.content)),g=0;g<d.length;++g)m=d[g],m.id==x&&(p=m);for(x=er(qe(p.messages[0].data)[2][0].data),h=Ee.find(f,o[x].location),d=Pr(Ir(h.content)),g=0;g<d.length;++g)m=d[g],m.id==x&&(p=m);for(x=er(qe(p.messages[0].data)[2][0].data),h=Ee.find(f,o[x].location),d=Pr(Ir(h.content)),g=0;g<d.length;++g)m=d[g],m.id==x&&(p=m);var v=qe(p.messages[0].data);{v[6][0].data=tt(n.e.r+1),v[7][0].data=tt(n.e.c+1);var k=er(v[46][0].data),w=Ee.find(f,o[k].location),S=Pr(Ir(w.content));{for(var b=0;b<S.length&&S[b].id!=k;++b);if(S[b].id!=k)throw"Bad ColumnRowUIDMapArchive";var T=qe(S[b].messages[0].data);T[1]=[],T[2]=[],T[3]=[];for(var y=0;y<=n.e.c;++y){var O=[];O[1]=O[2]=[{type:0,data:tt(y+420690)}],T[1].push({type:2,data:jt(O)}),T[2].push({type:0,data:tt(y)}),T[3].push({type:0,data:tt(y)})}T[4]=[],T[5]=[],T[6]=[];for(var B=0;B<=n.e.r;++B)O=[],O[1]=O[2]=[{type:0,data:tt(B+726270)}],T[4].push({type:2,data:jt(O)}),T[5].push({type:0,data:tt(B)}),T[6].push({type:0,data:tt(B)});S[b].messages[0].data=jt(T)}w.content=ni(ri(S)),w.size=w.content.length,delete v[46];var H=qe(v[4][0].data);{H[7][0].data=tt(n.e.r+1);var j=qe(H[1][0].data),I=er(j[2][0].data);w=Ee.find(f,o[I].location),S=Pr(Ir(w.content));{if(S[0].id!=I)throw"Bad HeaderStorageBucket";var X=qe(S[0].messages[0].data);for(B=0;B<i.length;++B){var q=qe(X[2][0].data);q[1][0].data=tt(B),q[4][0].data=tt(i[B].length),X[2][B]={type:X[2][0].type,data:jt(q)}}S[0].messages[0].data=jt(X)}w.content=ni(ri(S)),w.size=w.content.length;var te=er(H[2][0].data);w=Ee.find(f,o[te].location),S=Pr(Ir(w.content));{if(S[0].id!=te)throw"Bad HeaderStorageBucket";for(X=qe(S[0].messages[0].data),y=0;y<=n.e.c;++y)q=qe(X[2][0].data),q[1][0].data=tt(y),q[4][0].data=tt(n.e.r+1),X[2][y]={type:X[2][0].type,data:jt(q)};S[0].messages[0].data=jt(X)}w.content=ni(ri(S)),w.size=w.content.length;var ae=er(H[4][0].data);(function(){for(var F=Ee.find(f,o[ae].location),D=Pr(Ir(F.content)),M,K=0;K<D.length;++K){var J=D[K];J.id==ae&&(M=J)}var re=qe(M.messages[0].data);{re[3]=[];var le=[];s.forEach(function(V,We){le[1]=[{type:0,data:tt(We)}],le[2]=[{type:0,data:tt(1)}],le[3]=[{type:2,data:gA(V)}],re[3].push({type:2,data:jt(le)})})}M.messages[0].data=jt(re);var ce=ri(D),Be=ni(ce);F.content=Be,F.size=F.content.length})();var oe=qe(H[3][0].data);{var ue=oe[1][0];delete oe[2];var z=qe(ue.data);{var W=er(z[2][0].data);(function(){for(var F=Ee.find(f,o[W].location),D=Pr(Ir(F.content)),M,K=0;K<D.length;++K){var J=D[K];J.id==W&&(M=J)}var re=qe(M.messages[0].data);{delete re[6],delete oe[7];var le=new Uint8Array(re[5][0].data);re[5]=[];for(var ce=0,Be=0;Be<=n.e.r;++Be){var V=qe(le);ce+=DA(V,i[Be],s),V[1][0].data=tt(Be),re[5].push({data:jt(V),type:2})}re[1]=[{type:0,data:tt(n.e.c+1)}],re[2]=[{type:0,data:tt(n.e.r+1)}],re[3]=[{type:0,data:tt(ce)}],re[4]=[{type:0,data:tt(n.e.r+1)}]}M.messages[0].data=jt(re);var We=ri(D),Oe=ni(We);F.content=Oe,F.size=F.content.length})()}ue.data=jt(z)}H[3][0].data=jt(oe)}v[4][0].data=jt(H)}p.messages[0].data=jt(v);var A=ri(d),_=ni(A);return h.content=_,h.size=h.content.length,f}function Rm(e){return function(r){for(var n=0;n!=e.length;++n){var a=e[n];r[a[0]]===void 0&&(r[a[0]]=a[1]),a[2]==="n"&&(r[a[0]]=Number(r[a[0]]))}}}function Dc(e){Rm([["cellNF",!1],["cellHTML",!0],["cellFormula",!0],["cellStyles",!1],["cellText",!0],["cellDates",!1],["sheetStubs",!1],["sheetRows",0,"n"],["bookDeps",!1],["bookSheets",!1],["bookProps",!1],["bookFiles",!1],["bookVBA",!1],["password",""],["WTF",!1]])(e)}function Rc(e){Rm([["cellDates",!1],["bookSST",!1],["bookType","xlsx"],["compression",!1],["WTF",!1]])(e)}function OA(e){return je.WS.indexOf(e)>-1?"sheet":e==je.CS?"chart":e==je.DS?"dialog":e==je.MS?"macro":e&&e.length?e:"sheet"}function BA(e,t){if(!e)return 0;try{e=t.map(function(n){return n.id||(n.id=n.strRelID),[n.name,e["!id"][n.id].Target,OA(e["!id"][n.id].Type)]})}catch{return null}return!e||e.length===0?null:e}function NA(e,t,r,n,a,i,s,o,c,f,u,h){try{i[n]=Yi(kr(e,r,!0),t);var d=Tt(e,t),p;switch(o){case"sheet":p=r4(d,t,a,c,i[n],f,u,h);break;case"chart":if(p=n4(d,t,a,c,i[n],f,u,h),!p||!p["!drawel"])break;var g=Ui(p["!drawel"].Target,t),m=Ki(g),x=Hb(kr(e,g,!0),Yi(kr(e,m,!0),g)),v=Ui(x,g),k=Ki(v);p=DC(kr(e,v,!0),v,c,Yi(kr(e,k,!0),v),f,p);break;case"macro":p=a4(d,t,a,c,i[n],f,u,h);break;case"dialog":p=i4(d,t,a,c,i[n],f,u,h);break;default:throw new Error("Unrecognized sheet type "+o)}s[n]=p;var w=[];i&&i[n]&&xt(i[n]).forEach(function(S){var b="";if(i[n][S].Type==je.CMNT){b=Ui(i[n][S].Target,t);var T=c4(Tt(e,b,!0),b,c);if(!T||!T.length)return;$d(p,T,!1)}i[n][S].Type==je.TCMNT&&(b=Ui(i[n][S].Target,t),w=w.concat(zb(Tt(e,b,!0),c)))}),w&&w.length&&$d(p,w,!0,c.people||[])}catch(S){if(c.WTF)throw S}}function Lr(e){return e.charAt(0)=="/"?e.slice(1):e}function PA(e,t){if(za(),t=t||{},Dc(t),Rr(e,"META-INF/manifest.xml")||Rr(e,"objectdata.xml"))return Sm(e,t);if(Rr(e,"Index/Document.iwa")){if(typeof Uint8Array>"u")throw new Error("NUMBERS file parsing requires Uint8Array support");if(typeof Ac<"u"){if(e.FileIndex)return Ac(e);var r=Ee.utils.cfb_new();return Ju(e).forEach(function(q){Ve(r,q,qu(e,q))}),Ac(r)}throw new Error("Unsupported NUMBERS file")}if(!Rr(e,"[Content_Types].xml"))throw Rr(e,"index.xml.gz")?new Error("Unsupported NUMBERS 08 file"):Rr(e,"index.xml")?new Error("Unsupported NUMBERS 09 file"):new Error("Unsupported ZIP file");var n=Ju(e),a=V_(kr(e,"[Content_Types].xml")),i=!1,s,o;if(a.workbooks.length===0&&(o="xl/workbook.xml",Tt(e,o,!0)&&a.workbooks.push(o)),a.workbooks.length===0){if(o="xl/workbook.bin",!Tt(e,o,!0))throw new Error("Could not find workbook");a.workbooks.push(o),i=!0}a.workbooks[0].slice(-3)=="bin"&&(i=!0);var c={},f={};if(!t.bookSheets&&!t.bookProps){if(ss=[],a.sst)try{ss=l4(Tt(e,Lr(a.sst)),a.sst,t)}catch(q){if(t.WTF)throw q}t.cellStyles&&a.themes.length&&(c=o4(kr(e,a.themes[0].replace(/^\//,""),!0)||"",a.themes[0],t)),a.style&&(f=s4(Tt(e,Lr(a.style)),a.style,c,t))}a.links.map(function(q){try{var te=Yi(kr(e,Ki(Lr(q))),q);return u4(Tt(e,Lr(q)),te,q,t)}catch{}});var u=t4(Tt(e,Lr(a.workbooks[0])),a.workbooks[0],t),h={},d="";a.coreprops.length&&(d=Tt(e,Lr(a.coreprops[0]),!0),d&&(h=$h(d)),a.extprops.length!==0&&(d=Tt(e,Lr(a.extprops[0]),!0),d&&G_(d,h,t)));var p={};(!t.bookSheets||t.bookProps)&&a.custprops.length!==0&&(d=kr(e,Lr(a.custprops[0]),!0),d&&(p=K_(d,t)));var g={};if((t.bookSheets||t.bookProps)&&(u.Sheets?s=u.Sheets.map(function(te){return te.name}):h.Worksheets&&h.SheetNames.length>0&&(s=h.SheetNames),t.bookProps&&(g.Props=h,g.Custprops=p),t.bookSheets&&typeof s<"u"&&(g.SheetNames=s),t.bookSheets?g.SheetNames:t.bookProps))return g;s={};var m={};t.bookDeps&&a.calcchain&&(m=f4(Tt(e,Lr(a.calcchain)),a.calcchain));var x=0,v={},k,w;{var S=u.Sheets;h.Worksheets=S.length,h.SheetNames=[];for(var b=0;b!=S.length;++b)h.SheetNames[b]=S[b].name}var T=i?"bin":"xml",y=a.workbooks[0].lastIndexOf("/"),O=(a.workbooks[0].slice(0,y+1)+"_rels/"+a.workbooks[0].slice(y+1)+".rels").replace(/^\//,"");Rr(e,O)||(O="xl/_rels/workbook."+T+".rels");var B=Yi(kr(e,O,!0),O.replace(/_rels.*/,"s5s"));(a.metadata||[]).length>=1&&(t.xlmeta=h4(Tt(e,Lr(a.metadata[0])),a.metadata[0],t)),(a.people||[]).length>=1&&(t.people=Xb(Tt(e,Lr(a.people[0])),t)),B&&(B=BA(B,u.Sheets));var H=Tt(e,"xl/worksheets/sheet.xml",!0)?1:0;e:for(x=0;x!=h.Worksheets;++x){var j="sheet";if(B&&B[x]?(k="xl/"+B[x][1].replace(/[\/]?xl\//,""),Rr(e,k)||(k=B[x][1]),Rr(e,k)||(k=O.replace(/_rels\/.*$/,"")+B[x][1]),j=B[x][2]):(k="xl/worksheets/sheet"+(x+1-H)+"."+T,k=k.replace(/sheet0\./,"sheet.")),w=k.replace(/^(.*)(\/)([^\/]*)$/,"$1/_rels/$3.rels"),t&&t.sheets!=null)switch(typeof t.sheets){case"number":if(x!=t.sheets)continue e;break;case"string":if(h.SheetNames[x].toLowerCase()!=t.sheets.toLowerCase())continue e;break;default:if(Array.isArray&&Array.isArray(t.sheets)){for(var I=!1,X=0;X!=t.sheets.length;++X)typeof t.sheets[X]=="number"&&t.sheets[X]==x&&(I=1),typeof t.sheets[X]=="string"&&t.sheets[X].toLowerCase()==h.SheetNames[x].toLowerCase()&&(I=1);if(!I)continue e}}NA(e,k,w,h.SheetNames[x],x,v,s,j,t,u,c,f)}return g={Directory:a,Workbook:u,Props:h,Custprops:p,Deps:m,Sheets:s,SheetNames:h.SheetNames,Strings:ss,Styles:f,Themes:c,SSF:st(Se)},t&&t.bookFiles&&(e.files?(g.keys=n,g.files=e.files):(g.keys=[],g.files={},e.FullPaths.forEach(function(q,te){q=q.replace(/^Root Entry[\/]/,""),g.keys.push(q),g.files[q]=e.FileIndex[te]}))),t&&t.bookVBA&&(a.vba.length>0?g.vbaraw=Tt(e,Lr(a.vba[0]),!0):a.defaults&&a.defaults.bin===tS&&(g.vbaraw=Tt(e,"xl/vbaProject.bin",!0))),g}function IA(e,t){var r=t||{},n="Workbook",a=Ee.find(e,n);try{if(n="/!DataSpaces/Version",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);if(hE(a.content),n="/!DataSpaces/DataSpaceMap",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var i=mE(a.content);if(i.length!==1||i[0].comps.length!==1||i[0].comps[0].t!==0||i[0].name!=="StrongEncryptionDataSpace"||i[0].comps[0].v!=="EncryptedPackage")throw new Error("ECMA-376 Encrypted file bad "+n);if(n="/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var s=pE(a.content);if(s.length!=1||s[0]!="StrongEncryptionTransform")throw new Error("ECMA-376 Encrypted file bad "+n);if(n="/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);xE(a.content)}catch{}if(n="/EncryptionInfo",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var o=vE(a.content);if(n="/EncryptedPackage",a=Ee.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);if(o[0]==4&&typeof decrypt_agile<"u")return decrypt_agile(o[1],a.content,r.password||"",r);if(o[0]==2&&typeof decrypt_std76<"u")return decrypt_std76(o[1],a.content,r.password||"",r);throw new Error("File is password-protected")}function LA(e,t){return t.bookType=="ods"?Cm(e,t):t.bookType=="numbers"?RA(e,t):t.bookType=="xlsb"?MA(e,t):VA(e,t)}function MA(e,t){Qa=1024,e&&!e.SSF&&(e.SSF=st(Se)),e&&e.SSF&&(za(),Mi(e.SSF),t.revssf=ao(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF),t.rels={},t.wbrels={},t.Strings=[],t.Strings.Count=0,t.Strings.Unique=0,os?t.revStrings=new Map:(t.revStrings={},t.revStrings.foo=[],delete t.revStrings.foo);var r=t.bookType=="xlsb"?"bin":"xml",n=Hd.indexOf(t.bookType)>-1,a=ec();Rc(t=t||{});var i=Bl(),s="",o=0;if(t.cellXfs=[],Qn(t.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={}),s="docProps/core.xml",Ve(i,s,Wh(e.Props,t)),a.coreprops.push(s),et(t.rels,2,s,je.CORE_PROPS),s="docProps/app.xml",!(e.Props&&e.Props.SheetNames))if(!e.Workbook||!e.Workbook.Sheets)e.Props.SheetNames=e.SheetNames;else{for(var c=[],f=0;f<e.SheetNames.length;++f)(e.Workbook.Sheets[f]||{}).Hidden!=2&&c.push(e.SheetNames[f]);e.Props.SheetNames=c}for(e.Props.Worksheets=e.Props.SheetNames.length,Ve(i,s,zh(e.Props)),a.extprops.push(s),et(t.rels,3,s,je.EXT_PROPS),e.Custprops!==e.Props&&xt(e.Custprops||{}).length>0&&(s="docProps/custom.xml",Ve(i,s,Gh(e.Custprops)),a.custprops.push(s),et(t.rels,4,s,je.CUST_PROPS)),o=1;o<=e.SheetNames.length;++o){var u={"!id":{}},h=e.Sheets[e.SheetNames[o-1]],d=(h||{})["!type"]||"sheet";switch(d){case"chart":default:s="xl/worksheets/sheet"+o+"."+r,Ve(i,s,m4(o-1,s,t,e,u)),a.sheets.push(s),et(t.wbrels,-1,"worksheets/sheet"+o+"."+r,je.WS[0])}if(h){var p=h["!comments"],g=!1,m="";p&&p.length>0&&(m="xl/comments"+o+"."+r,Ve(i,m,x4(p,m)),a.comments.push(m),et(u,-1,"../comments"+o+"."+r,je.CMNT),g=!0),h["!legacy"]&&g&&Ve(i,"xl/drawings/vmlDrawing"+o+".vml",Ud(o,h["!comments"])),delete h["!comments"],delete h["!legacy"]}u["!id"].rId1&&Ve(i,Ki(s),qa(u))}return t.Strings!=null&&t.Strings.length>0&&(s="xl/sharedStrings."+r,Ve(i,s,g4(t.Strings,s,t)),a.strs.push(s),et(t.wbrels,-1,"sharedStrings."+r,je.SST)),s="xl/workbook."+r,Ve(i,s,d4(e,s)),a.workbooks.push(s),et(t.rels,1,s,je.WB),s="xl/theme/theme1.xml",Ve(i,s,dc(e.Themes,t)),a.themes.push(s),et(t.wbrels,-1,"theme/theme1.xml",je.THEME),s="xl/styles."+r,Ve(i,s,p4(e,s,t)),a.styles.push(s),et(t.wbrels,-1,"styles."+r,je.STY),e.vbaraw&&n&&(s="xl/vbaProject.bin",Ve(i,s,e.vbaraw),a.vba.push(s),et(t.wbrels,-1,"vbaProject.bin",je.VBA)),s="xl/metadata."+r,Ve(i,s,v4(s)),a.metadata.push(s),et(t.wbrels,-1,"metadata."+r,je.XLMETA),Ve(i,"[Content_Types].xml",Mh(a,t)),Ve(i,"_rels/.rels",qa(t.rels)),Ve(i,"xl/_rels/workbook."+r+".rels",qa(t.wbrels)),delete t.revssf,delete t.ssf,i}function VA(e,t){Qa=1024,e&&!e.SSF&&(e.SSF=st(Se)),e&&e.SSF&&(za(),Mi(e.SSF),t.revssf=ao(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF),t.rels={},t.wbrels={},t.Strings=[],t.Strings.Count=0,t.Strings.Unique=0,os?t.revStrings=new Map:(t.revStrings={},t.revStrings.foo=[],delete t.revStrings.foo);var r="xml",n=Hd.indexOf(t.bookType)>-1,a=ec();Rc(t=t||{});var i=Bl(),s="",o=0;if(t.cellXfs=[],Qn(t.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={}),s="docProps/core.xml",Ve(i,s,Wh(e.Props,t)),a.coreprops.push(s),et(t.rels,2,s,je.CORE_PROPS),s="docProps/app.xml",!(e.Props&&e.Props.SheetNames))if(!e.Workbook||!e.Workbook.Sheets)e.Props.SheetNames=e.SheetNames;else{for(var c=[],f=0;f<e.SheetNames.length;++f)(e.Workbook.Sheets[f]||{}).Hidden!=2&&c.push(e.SheetNames[f]);e.Props.SheetNames=c}e.Props.Worksheets=e.Props.SheetNames.length,Ve(i,s,zh(e.Props)),a.extprops.push(s),et(t.rels,3,s,je.EXT_PROPS),e.Custprops!==e.Props&&xt(e.Custprops||{}).length>0&&(s="docProps/custom.xml",Ve(i,s,Gh(e.Custprops)),a.custprops.push(s),et(t.rels,4,s,je.CUST_PROPS));var u=["SheetJ5"];for(t.tcid=0,o=1;o<=e.SheetNames.length;++o){var h={"!id":{}},d=e.Sheets[e.SheetNames[o-1]],p=(d||{})["!type"]||"sheet";switch(p){case"chart":default:s="xl/worksheets/sheet"+o+"."+r,Ve(i,s,im(o-1,t,e,h)),a.sheets.push(s),et(t.wbrels,-1,"worksheets/sheet"+o+"."+r,je.WS[0])}if(d){var g=d["!comments"],m=!1,x="";if(g&&g.length>0){var v=!1;g.forEach(function(k){k[1].forEach(function(w){w.T==!0&&(v=!0)})}),v&&(x="xl/threadedComments/threadedComment"+o+"."+r,Ve(i,x,Gb(g,u,t)),a.threadedcomments.push(x),et(h,-1,"../threadedComments/threadedComment"+o+"."+r,je.TCMNT)),x="xl/comments"+o+"."+r,Ve(i,x,Wd(g)),a.comments.push(x),et(h,-1,"../comments"+o+"."+r,je.CMNT),m=!0}d["!legacy"]&&m&&Ve(i,"xl/drawings/vmlDrawing"+o+".vml",Ud(o,d["!comments"])),delete d["!comments"],delete d["!legacy"]}h["!id"].rId1&&Ve(i,Ki(s),qa(h))}return t.Strings!=null&&t.Strings.length>0&&(s="xl/sharedStrings."+r,Ve(i,s,Fd(t.Strings,t)),a.strs.push(s),et(t.wbrels,-1,"sharedStrings."+r,je.SST)),s="xl/workbook."+r,Ve(i,s,hm(e)),a.workbooks.push(s),et(t.rels,1,s,je.WB),s="xl/theme/theme1.xml",Ve(i,s,dc(e.Themes,t)),a.themes.push(s),et(t.wbrels,-1,"theme/theme1.xml",je.THEME),s="xl/styles."+r,Ve(i,s,Pd(e,t)),a.styles.push(s),et(t.wbrels,-1,"styles."+r,je.STY),e.vbaraw&&n&&(s="xl/vbaProject.bin",Ve(i,s,e.vbaraw),a.vba.push(s),et(t.wbrels,-1,"vbaProject.bin",je.VBA)),s="xl/metadata."+r,Ve(i,s,Vd()),a.metadata.push(s),et(t.wbrels,-1,"metadata."+r,je.XLMETA),u.length>1&&(s="xl/persons/person.xml",Ve(i,s,Kb(u)),a.people.push(s),et(t.wbrels,-1,"persons/person.xml",je.PEOPLE)),Ve(i,"[Content_Types].xml",Mh(a,t)),Ve(i,"_rels/.rels",qa(t.rels)),Ve(i,"xl/_rels/workbook."+r+".rels",qa(t.wbrels)),delete t.revssf,delete t.ssf,i}function Oc(e,t){var r="";switch((t||{}).type||"base64"){case"buffer":return[e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7]];case"base64":r=wr(e.slice(0,12));break;case"binary":r=e;break;case"array":return[e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7]];default:throw new Error("Unrecognized type "+(t&&t.type||"undefined"))}return[r.charCodeAt(0),r.charCodeAt(1),r.charCodeAt(2),r.charCodeAt(3),r.charCodeAt(4),r.charCodeAt(5),r.charCodeAt(6),r.charCodeAt(7)]}function UA(e,t){return Ee.find(e,"EncryptedPackage")?IA(e,t):gm(e,t)}function $A(e,t){var r,n=e,a=t||{};return a.type||(a.type=He&&Buffer.isBuffer(e)?"buffer":"base64"),r=Zu(n,a),PA(r,a)}function Om(e,t){var r=0;e:for(;r<e.length;)switch(e.charCodeAt(r)){case 10:case 13:case 32:++r;break;case 60:return Ec(e.slice(r),t);default:break e}return Ja.to_workbook(e,t)}function WA(e,t){var r="",n=Oc(e,t);switch(t.type){case"base64":r=wr(e);break;case"binary":r=e;break;case"buffer":r=e.toString("binary");break;case"array":r=ha(e);break;default:throw new Error("Unrecognized type "+t.type)}return n[0]==239&&n[1]==187&&n[2]==191&&(r=nt(r)),t.type="binary",Om(r,t)}function HA(e,t){var r=e;return t.type=="base64"&&(r=wr(r)),r=Hn.utils.decode(1200,r.slice(2),"str"),t.type="binary",Om(r,t)}function jA(e){return e.match(/[^\x00-\x7F]/)?sn(e):e}function Bc(e,t,r,n){return n?(r.type="string",Ja.to_workbook(e,r)):Ja.to_workbook(t,r)}function Nc(e,t){Fl();var r=t||{};if(typeof ArrayBuffer<"u"&&e instanceof ArrayBuffer)return Nc(new Uint8Array(e),(r=st(r),r.type="array",r));typeof Uint8Array<"u"&&e instanceof Uint8Array&&!r.type&&(r.type=typeof Deno<"u"?"buffer":"array");var n=e,a=[0,0,0,0],i=!1;if(r.cellStyles&&(r.cellNF=!0,r.sheetStubs=!0),ti={},r.dateNF&&(ti.dateNF=r.dateNF),r.type||(r.type=He&&Buffer.isBuffer(e)?"buffer":"base64"),r.type=="file"&&(r.type=He?"buffer":"binary",n=V2(e),typeof Uint8Array<"u"&&!He&&(r.type="array")),r.type=="string"&&(i=!0,r.type="binary",r.codepage=65001,n=jA(e)),r.type=="array"&&typeof Uint8Array<"u"&&e instanceof Uint8Array&&typeof ArrayBuffer<"u"){var s=new ArrayBuffer(3),o=new Uint8Array(s);if(o.foo="bar",!o.foo)return r=st(r),r.type="array",Nc(Cl(n),r)}switch((a=Oc(n,r))[0]){case 208:if(a[1]===207&&a[2]===17&&a[3]===224&&a[4]===161&&a[5]===177&&a[6]===26&&a[7]===225)return UA(Ee.read(n,r),r);break;case 9:if(a[1]<=8)return gm(n,r);break;case 60:return Ec(n,r);case 73:if(a[1]===73&&a[2]===42&&a[3]===0)throw new Error("TIFF Image File is not a spreadsheet");if(a[1]===68)return Yk(n,r);break;case 84:if(a[1]===65&&a[2]===66&&a[3]===76)return Sd.to_workbook(n,r);break;case 80:return a[1]===75&&a[2]<9&&a[3]<9?$A(n,r):Bc(e,n,r,i);case 239:return a[3]===60?Ec(n,r):Bc(e,n,r,i);case 255:if(a[1]===254)return HA(n,r);if(a[1]===0&&a[2]===2&&a[3]===0)return Sa.to_workbook(n,r);break;case 0:if(a[1]===0&&(a[2]>=2&&a[3]===0||a[2]===0&&(a[3]===8||a[3]===9)))return Sa.to_workbook(n,r);break;case 3:case 131:case 139:case 140:return oc.to_workbook(n,r);case 123:if(a[1]===92&&a[2]===114&&a[3]===116)return Od.to_workbook(n,r);break;case 10:case 13:case 32:return WA(n,r);case 137:if(a[1]===80&&a[2]===78&&a[3]===71)throw new Error("PNG Image File is not a spreadsheet");break}return Kk.indexOf(a[0])>-1&&a[2]<=12&&a[3]<=31?oc.to_workbook(n,r):Bc(e,n,r,i)}function Bm(e,t){switch(t.type){case"base64":case"binary":break;case"buffer":case"array":t.type="";break;case"file":return Vi(t.file,Ee.write(e,{type:He?"buffer":""}));case"string":throw new Error("'string' output type invalid for '"+t.bookType+"' files");default:throw new Error("Unrecognized type "+t.type)}return Ee.write(e,t)}function zA(e,t){var r=st(t||{}),n=LA(e,r);return GA(n,r)}function GA(e,t){var r={},n=He?"nodebuffer":typeof Uint8Array<"u"?"array":"string";if(t.compression&&(r.compression="DEFLATE"),t.password)r.type=n;else switch(t.type){case"base64":r.type="base64";break;case"binary":r.type="string";break;case"string":throw new Error("'string' output type invalid for '"+t.bookType+"' files");case"buffer":case"file":r.type=n;break;default:throw new Error("Unrecognized type "+t.type)}var a=e.FullPaths?Ee.write(e,{fileType:"zip",type:{nodebuffer:"buffer",string:"binary"}[r.type]||r.type,compression:!!t.compression}):e.generate(r);if(typeof Deno<"u"&&typeof a=="string"){if(t.type=="binary"||t.type=="base64")return a;a=new Uint8Array(Qs(a))}return t.password&&typeof encrypt_agile<"u"?Bm(encrypt_agile(a,t.password),t):t.type==="file"?Vi(t.file,a):t.type=="string"?nt(a):a}function XA(e,t){var r=t||{},n=j4(e,r);return Bm(n,r)}function cn(e,t,r){r||(r="");var n=r+e;switch(t.type){case"base64":return Pi(sn(n));case"binary":return sn(n);case"string":return e;case"file":return Vi(t.file,n,"utf8");case"buffer":return He?kn(n,"utf8"):typeof TextEncoder<"u"?new TextEncoder().encode(n):cn(n,{type:"binary"}).split("").map(function(a){return a.charCodeAt(0)})}throw new Error("Unrecognized type "+t.type)}function KA(e,t){switch(t.type){case"base64":return Pi(e);case"binary":return e;case"string":return e;case"file":return Vi(t.file,e,"binary");case"buffer":return He?kn(e,"binary"):e.split("").map(function(r){return r.charCodeAt(0)})}throw new Error("Unrecognized type "+t.type)}function Co(e,t){switch(t.type){case"string":case"base64":case"binary":for(var r="",n=0;n<e.length;++n)r+=String.fromCharCode(e[n]);return t.type=="base64"?Pi(r):t.type=="string"?nt(r):r;case"file":return Vi(t.file,e);case"buffer":return e;default:throw new Error("Unrecognized type "+t.type)}}function Nm(e,t){Fl(),UC(e);var r=st(t||{});if(r.cellStyles&&(r.cellNF=!0,r.sheetStubs=!0),r.type=="array"){r.type="binary";var n=Nm(e,r);return r.type="array",Qs(n)}var a=0;if(r.sheet&&(typeof r.sheet=="number"?a=r.sheet:a=e.SheetNames.indexOf(r.sheet),!e.SheetNames[a]))throw new Error("Sheet not found: "+r.sheet+" : "+typeof r.sheet);switch(r.bookType||"xlsb"){case"xml":case"xlml":return cn(L4(e,r),r);case"slk":case"sylk":return cn(bd.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"htm":case"html":return cn(wm(e.Sheets[e.SheetNames[a]],r),r);case"txt":return KA(Im(e.Sheets[e.SheetNames[a]],r),r);case"csv":return cn(Pc(e.Sheets[e.SheetNames[a]],r),r,"\uFEFF");case"dif":return cn(Sd.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"dbf":return Co(oc.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"prn":return cn(Ja.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"rtf":return cn(Od.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"eth":return cn(Td.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"fods":return cn(Cm(e,r),r);case"wk1":return Co(Sa.sheet_to_wk1(e.Sheets[e.SheetNames[a]],r),r);case"wk3":return Co(Sa.book_to_wk3(e,r),r);case"biff2":r.biff||(r.biff=2);case"biff3":r.biff||(r.biff=3);case"biff4":return r.biff||(r.biff=4),Co(xm(e,r),r);case"biff5":r.biff||(r.biff=5);case"biff8":case"xla":case"xls":return r.biff||(r.biff=8),XA(e,r);case"xlsx":case"xlsm":case"xlam":case"xlsb":case"numbers":case"ods":return zA(e,r);default:throw new Error("Unrecognized bookType |"+r.bookType+"|")}}function YA(e,t,r,n,a,i,s,o){var c=yt(r),f=o.defval,u=o.raw||!Object.prototype.hasOwnProperty.call(o,"raw"),h=!0,d=a===1?[]:{};if(a!==1)if(Object.defineProperty)try{Object.defineProperty(d,"__rowNum__",{value:r,enumerable:!1})}catch{d.__rowNum__=r}else d.__rowNum__=r;if(!s||e[r])for(var p=t.s.c;p<=t.e.c;++p){var g=s?e[r][p]:e[n[p]+c];if(g===void 0||g.t===void 0){if(f===void 0)continue;i[p]!=null&&(d[i[p]]=f);continue}var m=g.v;switch(g.t){case"z":if(m==null)break;continue;case"e":m=m==0?null:void 0;break;case"s":case"d":case"b":case"n":break;default:throw new Error("unrecognized type "+g.t)}if(i[p]!=null){if(m==null)if(g.t=="e"&&m===null)d[i[p]]=null;else if(f!==void 0)d[i[p]]=f;else if(u&&m===null)d[i[p]]=null;else continue;else d[i[p]]=u&&(g.t!=="n"||g.t==="n"&&o.rawNumbers!==!1)?m:Tn(g,m,o);m!=null&&(h=!1)}}return{row:d,isempty:h}}function Ao(e,t){if(e==null||e["!ref"]==null)return[];var r={t:"n",v:0},n=0,a=1,i=[],s=0,o="",c={s:{r:0,c:0},e:{r:0,c:0}},f=t||{},u=f.range!=null?f.range:e["!ref"];switch(f.header===1?n=1:f.header==="A"?n=2:Array.isArray(f.header)?n=3:f.header==null&&(n=0),typeof u){case"string":c=Ye(u);break;case"number":c=Ye(e["!ref"]),c.s.r=u;break;default:c=u}n>0&&(a=0);var h=yt(c.s.r),d=[],p=[],g=0,m=0,x=Array.isArray(e),v=c.s.r,k=0,w={};x&&!e[v]&&(e[v]=[]);var S=f.skipHidden&&e["!cols"]||[],b=f.skipHidden&&e["!rows"]||[];for(k=c.s.c;k<=c.e.c;++k)if(!(S[k]||{}).hidden)switch(d[k]=ut(k),r=x?e[v][k]:e[d[k]+h],n){case 1:i[k]=k-c.s.c;break;case 2:i[k]=d[k];break;case 3:i[k]=f.header[k-c.s.c];break;default:if(r==null&&(r={w:"__EMPTY",t:"s"}),o=s=Tn(r,null,f),m=w[s]||0,!m)w[s]=1;else{do o=s+"_"+m++;while(w[o]);w[s]=m,w[o]=1}i[k]=o}for(v=c.s.r+a;v<=c.e.r;++v)if(!(b[v]||{}).hidden){var T=YA(e,c,v,d,n,i,x,f);(T.isempty===!1||(n===1?f.blankrows!==!1:f.blankrows))&&(p[g++]=T.row)}return p.length=g,p}var Pm=/"/g;function qA(e,t,r,n,a,i,s,o){for(var c=!0,f=[],u="",h=yt(r),d=t.s.c;d<=t.e.c;++d)if(n[d]){var p=o.dense?(e[r]||[])[d]:e[n[d]+h];if(p==null)u="";else if(p.v!=null){c=!1,u=""+(o.rawNumbers&&p.t=="n"?p.v:Tn(p,null,o));for(var g=0,m=0;g!==u.length;++g)if((m=u.charCodeAt(g))===a||m===i||m===34||o.forceQuotes){u='"'+u.replace(Pm,'""')+'"';break}u=="ID"&&(u='"ID"')}else p.f!=null&&!p.F?(c=!1,u="="+p.f,u.indexOf(",")>=0&&(u='"'+u.replace(Pm,'""')+'"')):u="";f.push(u)}return o.blankrows===!1&&c?null:f.join(s)}function Pc(e,t){var r=[],n=t??{};if(e==null||e["!ref"]==null)return"";var a=Ye(e["!ref"]),i=n.FS!==void 0?n.FS:",",s=i.charCodeAt(0),o=n.RS!==void 0?n.RS:`
`,c=o.charCodeAt(0),f=new RegExp((i=="|"?"\\|":i)+"+$"),u="",h=[];n.dense=Array.isArray(e);for(var d=n.skipHidden&&e["!cols"]||[],p=n.skipHidden&&e["!rows"]||[],g=a.s.c;g<=a.e.c;++g)(d[g]||{}).hidden||(h[g]=ut(g));for(var m=0,x=a.s.r;x<=a.e.r;++x)(p[x]||{}).hidden||(u=qA(e,a,x,h,s,c,i,n),u!=null&&(n.strip&&(u=u.replace(f,"")),(u||n.blankrows!==!1)&&r.push((m++?o:"")+u)));return delete n.dense,r.join("")}function Im(e,t){t||(t={}),t.FS="	",t.RS=`
`;var r=Pc(e,t);return r}function JA(e){var t="",r,n="";if(e==null||e["!ref"]==null)return[];var a=Ye(e["!ref"]),i="",s=[],o,c=[],f=Array.isArray(e);for(o=a.s.c;o<=a.e.c;++o)s[o]=ut(o);for(var u=a.s.r;u<=a.e.r;++u)for(i=yt(u),o=a.s.c;o<=a.e.c;++o)if(t=s[o]+i,r=f?(e[u]||[])[o]:e[t],n="",r!==void 0){if(r.F!=null){if(t=r.F,!r.f)continue;n=r.f,t.indexOf(":")==-1&&(t=t+":"+t)}if(r.f!=null)n=r.f;else{if(r.t=="z")continue;if(r.t=="n"&&r.v!=null)n=""+r.v;else if(r.t=="b")n=r.v?"TRUE":"FALSE";else if(r.w!==void 0)n="'"+r.w;else{if(r.v===void 0)continue;r.t=="s"?n="'"+r.v:n=""+r.v}}c[c.length]=t+"="+n}return c}function Lm(e,t,r){var n=r||{},a=+!n.skipHeader,i=e||{},s=0,o=0;if(i&&n.origin!=null)if(typeof n.origin=="number")s=n.origin;else{var c=typeof n.origin=="string"?ht(n.origin):n.origin;s=c.r,o=c.c}var f,u={s:{c:0,r:0},e:{c:o,r:s+t.length-1+a}};if(i["!ref"]){var h=Ye(i["!ref"]);u.e.c=Math.max(u.e.c,h.e.c),u.e.r=Math.max(u.e.r,h.e.r),s==-1&&(s=h.e.r+1,u.e.r=s+t.length-1+a)}else s==-1&&(s=0,u.e.r=t.length-1+a);var d=n.header||[],p=0;t.forEach(function(m,x){xt(m).forEach(function(v){(p=d.indexOf(v))==-1&&(d[p=d.length]=v);var k=m[v],w="z",S="",b=Ce({c:o+p,r:s+x+a});f=ds(i,b),k&&typeof k=="object"&&!(k instanceof Date)?i[b]=k:(typeof k=="number"?w="n":typeof k=="boolean"?w="b":typeof k=="string"?w="s":k instanceof Date?(w="d",n.cellDates||(w="n",k=Ot(k)),S=n.dateNF||Se[14]):k===null&&n.nullError&&(w="e",k=0),f?(f.t=w,f.v=k,delete f.w,delete f.R,S&&(f.z=S)):i[b]=f={t:w,v:k},S&&(f.z=S))})}),u.e.c=Math.max(u.e.c,o+d.length-1);var g=yt(s);if(a)for(p=0;p<d.length;++p)i[ut(p+o)+g]={t:"s",v:d[p]};return i["!ref"]=Me(u),i}function ZA(e,t){return Lm(null,e,t)}function ds(e,t,r){if(typeof t=="string"){if(Array.isArray(e)){var n=ht(t);return e[n.r]||(e[n.r]=[]),e[n.r][n.c]||(e[n.r][n.c]={t:"z"})}return e[t]||(e[t]={t:"z"})}return typeof t!="number"?ds(e,Ce(t)):ds(e,Ce({r:t,c:r||0}))}function QA(e,t){if(typeof t=="number"){if(t>=0&&e.SheetNames.length>t)return t;throw new Error("Cannot find sheet # "+t)}else if(typeof t=="string"){var r=e.SheetNames.indexOf(t);if(r>-1)return r;throw new Error("Cannot find sheet name |"+t+"|")}else throw new Error("Cannot find sheet |"+t+"|")}function Ic(){return{SheetNames:[],Sheets:{}}}function Lc(e,t,r,n){var a=1;if(!r)for(;a<=65535&&e.SheetNames.indexOf(r="Sheet"+a)!=-1;++a,r=void 0);if(!r||e.SheetNames.length>=65535)throw new Error("Too many worksheets");if(n&&e.SheetNames.indexOf(r)>=0){var i=r.match(/(^.*?)(\d+)$/);a=i&&+i[2]||0;var s=i&&i[1]||r;for(++a;a<=65535&&e.SheetNames.indexOf(r=s+a)!=-1;++a);}if(um(r),e.SheetNames.indexOf(r)>=0)throw new Error("Worksheet with name |"+r+"| already exists!");return e.SheetNames.push(r),e.Sheets[r]=t,r}function e3(e,t,r){e.Workbook||(e.Workbook={}),e.Workbook.Sheets||(e.Workbook.Sheets=[]);var n=QA(e,t);switch(e.Workbook.Sheets[n]||(e.Workbook.Sheets[n]={}),r){case 0:case 1:case 2:break;default:throw new Error("Bad sheet visibility setting "+r)}e.Workbook.Sheets[n].Hidden=r}function t3(e,t){return e.z=t,e}function Mm(e,t,r){return t?(e.l={Target:t},r&&(e.l.Tooltip=r)):delete e.l,e}function r3(e,t,r){return Mm(e,"#"+t,r)}function n3(e,t,r){e.c||(e.c=[]),e.c.push({t,a:r||"SheetJS"})}function a3(e,t,r,n){for(var a=typeof t!="string"?t:Ye(t),i=typeof t=="string"?t:Me(t),s=a.s.r;s<=a.e.r;++s)for(var o=a.s.c;o<=a.e.c;++o){var c=ds(e,s,o);c.t="n",c.F=i,delete c.v,s==a.s.r&&o==a.s.c&&(c.f=r,n&&(c.D=!0))}return e}var Mc={encode_col:ut,encode_row:yt,encode_cell:Ce,encode_range:Me,decode_col:jl,decode_row:Hl,split_cell:g_,decode_cell:ht,decode_range:hr,format_cell:Tn,sheet_add_aoa:Ah,sheet_add_json:Lm,sheet_add_dom:_m,aoa_to_sheet:Ka,json_to_sheet:ZA,table_to_sheet:ym,table_to_book:hA,sheet_to_csv:Pc,sheet_to_txt:Im,sheet_to_json:Ao,sheet_to_html:wm,sheet_to_formulae:JA,sheet_to_row_object_array:Ao,sheet_get_cell:ds,book_new:Ic,book_append_sheet:Lc,book_set_sheet_visibility:e3,cell_set_number_format:t3,cell_set_hyperlink:Mm,cell_set_internal_link:r3,cell_add_comment:n3,sheet_set_array_formula:a3,consts:{SHEET_VISIBLE:0,SHEET_HIDDEN:1,SHEET_VERY_HIDDEN:2}};function i3(e,t){t&&(e+=1462);var r=Date.parse(e);return(r-new Date(Date.UTC(1899,11,30)))/(24*60*60*1e3)}function s3(e,t={}){for(var r={},n={s:{c:1e7,r:1e7},e:{c:0,r:0}},a=0;a!=e.length;++a)for(var i=0;i!=e[a].length;++i){n.s.r>a&&(n.s.r=a),n.s.c>i&&(n.s.c=i),n.e.r<a&&(n.e.r=a),n.e.c<i&&(n.e.c=i);var s={v:e[a][i]};if(s.v!=null){var o=Mc.encode_cell({c:i,r:a});typeof s.v=="number"?s.t="n":typeof s.v=="boolean"?s.t="b":s.v instanceof Date?(s.t="n",s.z=$u._table[14],s.v=i3(s.v)):s.t="s",r[o]=s}}return n.s.c<1e7&&(r["!ref"]=Mc.encode_range(n)),r}function Vc(){if(!(this instanceof Vc))return new Vc;this.SheetNames=[],this.Sheets={}}function o3(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n!=e.length;++n)r[n]=e.charCodeAt(n)&255;return t}function l3(e,t,r,n={merges:[],header:null,cols:null}){var a=t;a.unshift(e),n.header&&a.unshift([n.header]);var i="SheetJS";const s={};var o=new Vc,c=s3(a,s);let{merges:f}=n;typeof f[0]=="string"&&f.length==2&&(f=[f]),f=f.map(d=>d instanceof Array?{s:d[0],e:d[1]}:d),c["!merges"]=f,n.cols&&(c["!cols"]=n.cols),o.SheetNames.push(i),o.Sheets[i]=c;var u=Nm(o,{bookType:"xlsx",bookSST:!1,type:"binary"}),h=r||"列表";vu.saveAs(new Blob([o3(u)],{type:"application/octet-stream"}),h+".xlsx")}const c3=e=>{const t=e.split(/\r\n|\n/),r=t[0].split(/,(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)/),n=[];for(let i=1;i<t.length;i++){const s=t[i].split(/,(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)/);if(r&&s.length==r.length){const o={};for(let c=0;c<r.length;c++){let f=s[c];f.length>0&&(f[0]=='"'&&(f=f.substring(1,f.length-1)),f[f.length-1]=='"'&&(f=f.substring(f.length-2,1))),r[c]&&(o[r[c]]=f)}Object.values(o).filter(c=>c).length>0&&n.push(o)}}const a=r.map(i=>({title:i,key:i}));return{data:n,columns:a}};async function f3(e){const t=new FileReader;return new Promise((r,n)=>{t.onload=a=>{const i=a.target.result,s=Nc(i,{type:"binary"}),o=s.SheetNames[0],c=s.Sheets[o],f=Mc.sheet_to_csv(c),u=c3(f);r(u)},t.onerror=a=>{n(a)},t.readAsBinaryString(e)})}function u3(e){return e.map(t=>({prop:t.key,label:t.title}))}const Vm=Object.freeze(Object.defineProperty({__proto__:null,exportUtil:{csv(e){return new Promise((t,r)=>{const a=Object.assign({},{columns:[],data:[],filename:"table",noHeader:!1},e),i=i2(u3(a.columns),a.data,e,a.noHeader);r2.download(a.filename,i),t()})},excel(e){return new Promise((t,r)=>{const a=Object.assign({},{columns:[],data:[],filename:"table",header:null,merges:[]},e),i=a.columns.map(c=>c.title),s=a.data.map(c=>a.columns.map(f=>c[f.key])),o=a.columns.map(c=>{const f={...c};return delete f.title,delete f.key,f});l3(i,s,a.filename,{merges:a.merges,header:a.header,cols:o}),t()})},txt(e){return new Promise((t,r)=>{const a=Object.assign({},{text:"",filename:"文本"},e),i=new Blob([a.text],{type:"text/plain;charset=utf-8"});vu.saveAs(i,a.filename+".txt"),t()})}},importUtil:{async csv(e){return await f3(e)}}},Symbol.toStringTag,{value:"Module"}));Object.defineProperty(se,"uiContext",{enumerable:!0,get:()=>de.uiContext}),Object.defineProperty(se,"useUi",{enumerable:!0,get:()=>de.useUi}),se.AsyncComputeValue=Ts,se.ColumnsFilterProvideKey=nl,se.ComputeValue=mi,se.Dict=Ko,se.FastCrud=gu,se.FsActionbar=x0,se.FsBox=Yf,se.FsButton=Hf,se.FsCell=m0,se.FsColumnsFilterLayoutDefault=Q0,se.FsComponentRender=Jf,se.FsContainer=Uf,se.FsCrud=n0,se.FsDateFormat=hu,se.FsDictCascader=cu,se.FsDictCascaderFormat=lu,se.FsDictCheckbox=fu,se.FsDictRadio=iu,se.FsDictSelect=su,se.FsDictSwitch=uu,se.FsDictTree=du,se.FsEditable=g0,se.FsEditableCell=p0,se.FsForm=Qf,se.FsFormHelper=t0,se.FsFormItem=e0,se.FsFormProvider=r0,se.FsFormWrapper=Pa,se.FsIcon=jf,se.FsIconSvg=Gf,se.FsIconify=zf,se.FsLabel=Xf,se.FsLayoutCard=Wf,se.FsLayoutDefault=$f,se.FsLoading=Kf,se.FsPage=ff,se.FsRender=Yo,se.FsRowHandle=a0,se.FsSearch=tu,se.FsSearchLayoutDefault=nu,se.FsSearchV1=ru,se.FsSlotRender=Zf,se.FsTable=d0,se.FsTableSelect=mu,se.FsTabsFilter=au,se.FsToolbar=v0,se.FsValuesFormat=ou,se.GlobalConfig=Vf,se.SetFormDataOptions=Xx,se.asyncCompute=pf,se.buildTableColumnsFlatMap=Fs,se.compute=mf,se.crudOptionsPlugins=jo,se.default=gu,se.dict=If,se.exportTable=Sf,se.forEachColumns=vi,se.forEachTableColumns=Cs,se.getCrudOptionsPlugin=Ff,se.importTable=A1,se.loadFsExportUtil=Ef,se.loadFsImportUtil=bf,se.registerCrudOptionsPlugin=Tf,se.registerMergeColumnPlugin=gi,se.setLogger=Kc,se.useColumns=wf,se.useCompute=Pn,se.useCrud=Cf,se.useDict=vn,se.useDictDefine=Lf,se.useDrag=Mf,se.useExpose=kf,se.useFormWrapper=_f,se.useFs=Df,se.useFsAsync=D1,se.useI18n=nr,se.useMerge=Ze,se.useTypes=N1,se.utils=ui,Object.keys(de).forEach(e=>{e!=="default"&&!Object.prototype.hasOwnProperty.call(se,e)&&Object.defineProperty(se,e,{enumerable:!0,get:()=>de[e]})}),Object.defineProperties(se,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
