import { defineComponent as v, computed as b, ref as k, watch as V, openBlock as r, createElementBlock as o, Fragment as d, renderList as g, createElementVNode as y, mergeProps as s, toDisplayString as _, createBlock as U, resolveDynamicComponent as w, withCtx as p } from "vue";
import { useUi as N } from "@fast-crud/fast-crud";
import { _ as I } from "./index-e3d54c21.mjs";
import "lodash-es";
const $ = v({
  name: "FsFilesFormat",
  props: {
    /**
     * 文件列表
     * 支持格式： `url , {url} , [url1,url2] ,  [{url:url1},{url:url2}]`
     */
    modelValue: {},
    // tag颜色，`【primary, success, warning, danger ,info】`
    color: {
      default: ""
    },
    // 展示类型`【text, tag】`
    type: {
      default: "tag"
      // `可选【text,tag】`
    },
    // 链接配置
    a: {},
    // tag配置
    tag: {},
    // 构建下载url方法，支持异步
    buildUrl: {},
    // 批量构建下载url方法，支持异步
    buildUrls: {},
    // 根据value构建文件名
    getFileName: {}
  },
  setup(t, h) {
    const { ui: u } = N(), f = b(() => t.getFileName || function(e) {
      return typeof e != "string" ? (console.warn("获取文件名失败，请配置getFileName"), e) : (e == null ? void 0 : e.lastIndexOf("/")) >= 0 ? e.substring(e.lastIndexOf("/") + 1) : e;
    });
    function i(e) {
      return {
        url: void 0,
        value: e,
        name: f.value(e),
        color: t.color
      };
    }
    async function m(e) {
      if (t.buildUrls) {
        const a = e.map((n) => n.value), F = await t.buildUrls(a);
        for (let n = 0; n < e.length; n++)
          e[n].url = F[n];
      } else if (t.buildUrl)
        for (let a of e)
          a.url = await t.buildUrl(a.value);
      else
        for (let a = 0; a < e.length; a++)
          e[a].url = e[a].value;
    }
    async function l() {
      if (t.modelValue == null || t.modelValue === "")
        return [];
      let e = [];
      if (typeof t.modelValue == "string")
        e = [i(t.modelValue)];
      else if (t.modelValue instanceof Array) {
        e = [];
        for (const a of t.modelValue)
          e.push(i(a));
      }
      return await m(e), e;
    }
    const c = k([]);
    return V(
      () => t.modelValue,
      async () => {
        c.value = await l();
      },
      {
        immediate: !0
      }
    ), {
      ui: u,
      itemsRef: c
    };
  }
});
const B = { class: "fs-files-format" }, C = ["href"], R = ["href"];
function x(t, h, u, f, i, m) {
  return r(), o("div", B, [
    t.type === "text" ? (r(!0), o(d, { key: 0 }, g(t.itemsRef, (l) => (r(), o("span", {
      key: l.url,
      class: "fs-files-item"
    }, [
      y("a", s({
        href: l.url,
        target: "_blank"
      }, t.a), _(l.name), 17, C)
    ]))), 128)) : (r(!0), o(d, { key: 1 }, g(t.itemsRef, (l) => (r(), U(w(t.ui.tag.name), s({
      key: l.url,
      class: "fs-tag-item",
      type: l.color
    }, t.tag), {
      default: p(() => [
        y("a", s({
          href: l.url,
          target: "_blank"
        }, t.a), _(l.name), 17, R)
      ]),
      _: 2
    }, 1040, ["type"]))), 128))
  ]);
}
const O = /* @__PURE__ */ I($, [["render", x]]);
export {
  O as default
};
//# sourceMappingURL=fs-files-format-1f49ba46.mjs.map
