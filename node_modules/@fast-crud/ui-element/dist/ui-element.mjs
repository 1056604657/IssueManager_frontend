import { ElDialog as b, useFormItem as w, ElMessage as v, ElNotification as C, ElMessageBox as x } from "element-plus";
import { useUiRender as V, uiContext as y } from "@fast-crud/ui-interface";
import { createVNode as h, createTextVNode as S } from "vue";
import p, { isFunction as k } from "lodash-es";
import * as B from "@element-plus/icons-vue";
const {
  buildBinding: d,
  creator: t
} = V();
class N {
  constructor(s) {
    this.type = "element", this.modelValue = "modelValue", this.switch = t({
      activeColor: "active-color",
      activeText: "active-text",
      activeValue: "active-value",
      inactiveColor: "inactive-color",
      inactiveText: "inactive-text",
      inactiveValue: "inactive-value",
      modelValue: "modelValue",
      name: "el-switch"
    }), this.formWrapper = t({
      visible: "modelValue",
      customClass: (e) => "class",
      titleSlotName: "header",
      buildOnClosedBind(e, l) {
        return {
          onClosed: l
        };
      },
      buildWidthBind(e, l) {
        return {
          width: l
        };
      },
      buildInitBind(e) {
        return {};
      },
      buildInnerBind() {
        return {};
      },
      name: "fs-form-wrapper"
    }), this.messageBox = t({
      name: "el-message-box",
      instance: void 0,
      open: async (e) => this.messageBox.instance(e),
      confirm: async (e) => this.messageBox.instance(e)
    }), this.message = t({
      instance: void 0,
      name: "el-message",
      open: (e) => {
        this.message.instance.open(e);
      },
      success: (e) => {
        this.message.instance.success(e);
      },
      error: (e) => {
        this.message.instance.error(e);
      },
      warn: (e) => {
        this.message.instance.warning(e);
      },
      info: (e) => {
        this.message.instance(e);
      }
    }), this.notification = t({
      instance: void 0,
      name: "el-notification",
      open: (e) => {
        this.notification.instance.open(e);
      },
      success: (e) => {
        this.notification.instance.success(e);
      },
      error: (e) => {
        this.notification.instance.error(e);
      },
      warn: (e) => {
        this.notification.instance.warn(e);
      },
      info: (e) => {
        this.notification.instance.success(e);
      }
    }), this.icon = t({
      name: "",
      isComponent: !1
    }), this.icons = {
      add: "plus",
      columnsFilter: "set-up",
      compact: "rank",
      edit: "edit",
      remove: "delete",
      search: "search",
      refresh: "refresh",
      export: "upload",
      check: "check",
      sort: "sort",
      left: "arrow-left",
      right: "arrow-right",
      close: "close",
      arrowLeft: "left",
      arrowRight: "right",
      more: "more",
      plus: "plus",
      zoomIn: "zoom-in",
      zoomOut: "zoom-out",
      refreshLeft: "refresh-left",
      refreshRight: "refresh-right",
      upload: "upload",
      fullScreen: "full-screen",
      unFullScreen: "full-screen",
      question: "question-filled",
      caretUp: "CaretTop",
      caretDown: "CaretBottom",
      eye: "View",
      info: "warning"
    }, this.dialog = t({
      name: "el-dialog",
      visible: "modelValue",
      customClass: "class",
      titleSlotName: "header",
      footerSlotName: "footer",
      buildOnClosedBind(e) {
        return {
          onClosed: e
        };
      },
      footer() {
        return {};
      },
      open(e) {
        b.open(e);
      },
      builder(e) {
        return d(this, e, {
          props: {
            title: e.title,
            width: e.width
          },
          slots: {
            footer: e.footer
          }
        });
      }
    }), this.buttonGroup = t({
      name: "el-button-group"
    }), this.col = t({
      name: "el-col"
    }), this.row = t({
      name: "el-row"
    }), this.card = t({
      name: "el-card"
    }), this.checkboxGroup = t({
      name: "el-checkbox-group",
      modelValue: "modelValue"
    }), this.checkbox = t({
      name: "el-checkbox",
      resolveEvent(e) {
        return e;
      },
      modelValue: "modelValue",
      value: "label",
      onChange(e) {
        return {
          "onUpdate:modelValue": e
        };
      }
    }), this.drawer = t({
      name: "el-drawer",
      visible: "modelValue",
      customClass: "class",
      width: "size"
    }), this.collapseTransition = t({
      name: "el-collapse-transition"
    }), this.option = t({
      name: "el-option",
      value: "value",
      label: "label"
    }), this.select = t({
      name: "el-select",
      modelValue: "modelValue",
      clearable: "clearable",
      filterable: "filterable",
      buildMultiBinding(e) {
        return {
          multiple: e
        };
      }
    }), this.treeSelect = t({
      name: "el-tree-select",
      modelValue: "modelValue",
      clearable: "select.clearable",
      options: "data",
      value: "tree.value",
      label: "tree.label",
      children: "tree.children"
    }), this.radio = t({
      name: "el-radio",
      value: "label",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioButton = t({
      name: "el-radio-button",
      value: "label",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioGroup = t({
      name: "el-radio-group",
      modelValue: "modelValue"
    }), this.cascader = t({
      name: "el-cascader",
      modelValue: "modelValue",
      clearable: "clearable",
      fieldNames(e) {
        return {
          props: e
        };
      }
    }), this.form = t({
      name: "el-form",
      inlineLayout: {
        layout: "inline",
        inline: !0
      },
      validateWrap: async (e) => e.validate(),
      transformValidateErrors: (e) => {
        const l = {};
        return p.forEach(e, (n, a) => {
          l[a] = !0;
        }), l;
      }
    }), this.formItem = t({
      name: "el-form-item",
      prop: "prop",
      label: "label",
      rules: "rules",
      skipValidationWrapper: "div",
      injectFormItemContext() {
        const {
          formItem: e
        } = w();
        return {
          async onChange() {
            await (e == null ? void 0 : e.validate("change"));
          },
          async onBlur() {
            await (e == null ? void 0 : e.validate("blur"));
          }
        };
      }
    }), this.button = t({
      name: "el-button",
      textType: {
        type: "text"
      },
      linkType: {
        type: "text"
      },
      circle: {
        circle: !0
      },
      colors: (e) => ({
        type: e
      })
    }), this.pagination = t({
      name: "el-pagination",
      currentPage: "currentPage",
      total: "total",
      pageCount: null,
      onChange({
        setCurrentPage: e,
        setPageSize: l,
        doAfterChange: n
      }) {
        return {
          // element 页码改动回调
          onCurrentChange(a) {
            e(a), n();
          },
          onSizeChange(a) {
            l(a), n();
          }
        };
      }
    }), this.tableColumn = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.tableColumnGroup = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.table = t({
      name: "el-table",
      data: "data",
      renderMode: "slot",
      defaultRowKey: "id",
      fixedHeaderNeedComputeBodyHeight: !1,
      buildMaxHeight: (e) => ({
        maxHeight: e
      }),
      hasMaxHeight: (e) => (e == null ? void 0 : e.maxHeight) != null,
      headerDomSelector: "",
      vLoading: "loading",
      // 没太大用
      setSelectedRows({
        multiple: e,
        selectedRowKeys: l,
        tableRef: n,
        getRowKey: a
      }) {
        const i = a(), o = [];
        for (const r of l.value)
          for (const c of n.data)
            c[i] === r && o.push(c);
        if (e)
          for (const r of o)
            n.toggleRowSelection(r, !0);
        else
          l.value.length > 0 && n.setCurrentRow(o[0]);
      },
      buildSelectionCrudOptions(e) {
        function l(n) {
          const a = e.getRowKey(), i = e.getPageData();
          let o = a;
          k(a) || (o = (m) => m[a]);
          const r = i.map(o), c = e.selectedRowKeys.value.filter((m) => !r.includes(m));
          return p.union(c, n);
        }
        return e.multiple ? {
          table: {
            onSelectionChange: (a = []) => {
              const i = e.getRowKey();
              let o = a.map((r) => r[i]);
              e.crossPage && (o = l(o)), e.onSelectedKeysChanged(o);
            }
          },
          columns: {
            $checked: {
              form: {
                show: !1
              },
              column: {
                type: "selection",
                align: "center",
                width: "55px",
                order: -9999,
                reserveSelection: e.crossPage,
                columnSetDisabled: !0
                //禁止在列设置中选择
              }
            }
          }
        } : {
          table: {
            highlightCurrentRow: !0,
            onCurrentChange: (a) => {
              if (a == null) {
                e.onSelectedKeysChanged([]);
                return;
              }
              const i = e.getRowKey(), o = [a[i]];
              e.onSelectedKeysChanged(o);
            }
          }
        };
      },
      rebuildRenderScope: (e) => e,
      scrollTo(e) {
        var l, n;
        (n = (l = e.tableRef) == null ? void 0 : l.value) == null || n.setScrollTop(e.top);
      },
      onChange({
        onSortChange: e,
        onFilterChange: l,
        bubbleUp: n
      }) {
        return {
          onSortChange: (a) => {
            const {
              column: i,
              prop: o,
              order: r
            } = a;
            e && e({
              isServerSort: o && i.sortable === "custom",
              prop: o,
              order: r,
              asc: r === "ascending"
            }), n((c) => {
              c.onSortChange && c.onSortChange(a);
            });
          },
          onFilterChange: (a) => {
            l(a), n((i) => {
              i.onFilterChange && i.onFilterChange(a);
            });
          }
        };
      }
    }), this.textArea = t({
      name: "el-input",
      type: "textarea",
      modelValue: "modelValue",
      clearable: "clearable"
    }), this.tag = t({
      name: "el-tag",
      type: "type",
      colors: ["info", "success", "warning", "danger"]
    }), this.inputGroup = t({
      name: "el-input-group"
    }), this.input = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue"
    }), this.inputPassword = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue",
      passwordType: {
        showPassword: !0
      }
    }), this.number = t({
      name: "el-input-number",
      modelValue: "modelValue",
      builder(e) {
        return d(this, e, {});
      }
    }), this.datePicker = t({
      name: "el-date-picker",
      modelValue: "modelValue",
      buildDateType(e) {
        return {
          name: "el-date-picker",
          type: e
        };
      }
    }), this.timePicker = t({
      name: "el-time-picker",
      modelValue: "modelValue"
    }), this.dropdown = t({
      name: "el-dropdown",
      command(e) {
        return {
          onCommand(l) {
            e(l);
          }
        };
      },
      slotName: "dropdown",
      renderMode: "slot"
    }), this.dropdownMenu = t({
      name: "el-dropdown-menu",
      command: () => ({})
    }), this.dropdownItem = t({
      name: "el-dropdown-item",
      command: "command"
    }), this.imageGroup = t({
      name: "fs-box"
    }), this.image = t({
      name: "el-image",
      buildPreviewBind: ({
        url: e,
        urls: l,
        previewUrl: n,
        previewUrls: a,
        index: i
      }) => ({
        "preview-src-list": a,
        "initial-index": i
      }),
      fallback: "error"
    }), this.progress = t({
      name: "el-progress"
    }), this.loading = t({
      name: "loading",
      type: "directive"
    }), this.upload = t({
      id: "uid",
      name: "el-upload",
      type: "",
      typeImageCard: "picture-card",
      typeImage: "picture",
      getStatusFromEvent(e) {
        return e == null ? void 0 : e.status;
      },
      getFileListFromEvent(e, l, n) {
        return n;
      },
      status: {
        success: "success",
        uploading: "uploading"
      },
      isSuccess(e) {
        return e.status === "success";
      },
      limitAdd: 1
    }), this.tabs = t({
      name: "el-tabs",
      modelValue: "modelValue"
    }), this.tabPane = t({
      name: "el-tab-pane",
      key: "name",
      tab: "label"
    }), this.collapse = t({
      name: "el-collapse",
      modelValue: "modelValue",
      keyName: "name"
    }), this.collapseItem = t({
      name: "el-collapse-item",
      key: "name",
      titleSlotName: "title",
      /**
       * element collapse只支持title插槽
       */
      extraSlotName: "not_support_extra",
      builder(e) {
        return d(this, e, {
          slots: {
            [this.titleSlotName]() {
              return h("div", {
                class: "fsel-collapse-item-title fsel-flex-row space-between"
              }, [h("span", {
                class: "title-text"
              }, [e.titleSlot(), S(" ")]), h("span", {
                class: "title-extra"
              }, [e.extraSlot()])]);
            }
          }
        });
      }
    }), this.badge = t({
      name: "el-badge",
      value: "value",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.tooltip = t({
      name: "el-tooltip",
      content: "content",
      trigger: "default"
    }), this.divider = t({
      name: "el-divider"
    }), this.popover = t({
      name: "el-popover",
      contentSlotName: "default",
      triggerSlotName: "reference",
      visible: "visible"
    }), s && (this.notification.instance = s.Notification, this.message.instance = s.Message, this.messageBox.instance = s.MessageBox);
  }
}
const g = B;
function K(u) {
  for (const s in g)
    u.component(s, g[s]);
}
function f() {
  const u = new N({
    Message: v,
    Notification: C,
    MessageBox: x
  });
  return y.set(u), u;
}
const I = {
  install(u, s = {}) {
    return s.setupIcons !== !1 && K(u), f();
  },
  set: f
};
export {
  N as Element,
  I as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktZWxlbWVudC5tanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbGVtZW50LnRzeCIsIi4uLy4uL3NyYy9pY29ucy50cyIsIi4uLy4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGwsbnVsbCxudWxsXSwibmFtZXMiOlsiYnVpbGRCaW5kaW5nIiwiY3JlYXRvciIsInVzZVVpUmVuZGVyIiwiRWxlbWVudCIsImNvbnN0cnVjdG9yIiwidGFyZ2V0IiwidHlwZSIsIm1vZGVsVmFsdWUiLCJzd2l0Y2giLCJhY3RpdmVDb2xvciIsImFjdGl2ZVRleHQiLCJhY3RpdmVWYWx1ZSIsImluYWN0aXZlQ29sb3IiLCJpbmFjdGl2ZVRleHQiLCJpbmFjdGl2ZVZhbHVlIiwibmFtZSIsImZvcm1XcmFwcGVyIiwidmlzaWJsZSIsImN1c3RvbUNsYXNzIiwiaXMiLCJ0aXRsZVNsb3ROYW1lIiwiYnVpbGRPbkNsb3NlZEJpbmQiLCJvbkNsb3NlZCIsImJ1aWxkV2lkdGhCaW5kIiwid2lkdGgiLCJidWlsZEluaXRCaW5kIiwiYnVpbGRJbm5lckJpbmQiLCJtZXNzYWdlQm94IiwiaW5zdGFuY2UiLCJ1bmRlZmluZWQiLCJvcGVuIiwiY29udGV4dCIsImNvbmZpcm0iLCJtZXNzYWdlIiwic3VjY2VzcyIsIm1zZyIsImVycm9yIiwid2FybiIsIndhcm5pbmciLCJpbmZvIiwibm90aWZpY2F0aW9uIiwiaWNvbiIsImlzQ29tcG9uZW50IiwiaWNvbnMiLCJhZGQiLCJjb2x1bW5zRmlsdGVyIiwiY29tcGFjdCIsImVkaXQiLCJyZW1vdmUiLCJzZWFyY2giLCJyZWZyZXNoIiwiZXhwb3J0IiwiY2hlY2siLCJzb3J0IiwibGVmdCIsInJpZ2h0IiwiY2xvc2UiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwibW9yZSIsInBsdXMiLCJ6b29tSW4iLCJ6b29tT3V0IiwicmVmcmVzaExlZnQiLCJyZWZyZXNoUmlnaHQiLCJ1cGxvYWQiLCJmdWxsU2NyZWVuIiwidW5GdWxsU2NyZWVuIiwicXVlc3Rpb24iLCJjYXJldFVwIiwiY2FyZXREb3duIiwiZXllIiwiZGlhbG9nIiwiZm9vdGVyU2xvdE5hbWUiLCJmb290ZXIiLCJvcHRzIiwiRWxEaWFsb2ciLCJidWlsZGVyIiwicHJvcHMiLCJ0aXRsZSIsInNsb3RzIiwiYnV0dG9uR3JvdXAiLCJjb2wiLCJyb3ciLCJjYXJkIiwiY2hlY2tib3hHcm91cCIsImNoZWNrYm94IiwicmVzb2x2ZUV2ZW50IiwiZSIsInZhbHVlIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImRyYXdlciIsImNvbGxhcHNlVHJhbnNpdGlvbiIsIm9wdGlvbiIsImxhYmVsIiwic2VsZWN0IiwiY2xlYXJhYmxlIiwiZmlsdGVyYWJsZSIsImJ1aWxkTXVsdGlCaW5kaW5nIiwibXVsdGlwbGUiLCJ0cmVlU2VsZWN0Iiwib3B0aW9ucyIsImNoaWxkcmVuIiwicmFkaW8iLCJyYWRpb0J1dHRvbiIsInJhZGlvR3JvdXAiLCJjYXNjYWRlciIsImZpZWxkTmFtZXMiLCJuYW1lc01hcCIsImZvcm0iLCJpbmxpbmVMYXlvdXQiLCJsYXlvdXQiLCJpbmxpbmUiLCJ2YWxpZGF0ZVdyYXAiLCJmb3JtUmVmIiwidmFsaWRhdGUiLCJ0cmFuc2Zvcm1WYWxpZGF0ZUVycm9ycyIsImVycm9ycyIsIl8iLCJmb3JFYWNoIiwiaXRlbSIsImtleSIsImZvcm1JdGVtIiwicHJvcCIsInJ1bGVzIiwic2tpcFZhbGlkYXRpb25XcmFwcGVyIiwiaW5qZWN0Rm9ybUl0ZW1Db250ZXh0IiwidXNlRm9ybUl0ZW0iLCJvbkJsdXIiLCJidXR0b24iLCJ0ZXh0VHlwZSIsImxpbmtUeXBlIiwiY2lyY2xlIiwiY29sb3JzIiwicGFnaW5hdGlvbiIsImN1cnJlbnRQYWdlIiwidG90YWwiLCJwYWdlQ291bnQiLCJzZXRDdXJyZW50UGFnZSIsInNldFBhZ2VTaXplIiwiZG9BZnRlckNoYW5nZSIsIm9uQ3VycmVudENoYW5nZSIsImV2ZW50Iiwib25TaXplQ2hhbmdlIiwidGFibGVDb2x1bW4iLCJpbmRleCIsInRhYmxlQ29sdW1uR3JvdXAiLCJ0YWJsZSIsImRhdGEiLCJyZW5kZXJNb2RlIiwiZGVmYXVsdFJvd0tleSIsImZpeGVkSGVhZGVyTmVlZENvbXB1dGVCb2R5SGVpZ2h0IiwiYnVpbGRNYXhIZWlnaHQiLCJtYXhIZWlnaHQiLCJoYXNNYXhIZWlnaHQiLCJoZWFkZXJEb21TZWxlY3RvciIsInZMb2FkaW5nIiwic2V0U2VsZWN0ZWRSb3dzIiwic2VsZWN0ZWRSb3dLZXlzIiwidGFibGVSZWYiLCJnZXRSb3dLZXkiLCJyb3dLZXkiLCJjdXJTZWxlY3RlZFJvd3MiLCJwdXNoIiwidG9nZ2xlUm93U2VsZWN0aW9uIiwibGVuZ3RoIiwic2V0Q3VycmVudFJvdyIsImJ1aWxkU2VsZWN0aW9uQ3J1ZE9wdGlvbnMiLCJyZXEiLCJnZXRDcm9zc1BhZ2VTZWxlY3RlZCIsImN1clNlbGVjdGVkSWRzIiwiZ2V0UGFnZURhdGEiLCJtYXBJZCIsImlzRnVuY3Rpb24iLCJjdXJyZW50SWRzIiwibWFwIiwib3RoZXJQYWdlU2VsZWN0ZWQiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInVuaW9uIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJjaGFuZ2VkUm93cyIsInNlbGVjdGVkS2V5cyIsImNyb3NzUGFnZSIsIm9uU2VsZWN0ZWRLZXlzQ2hhbmdlZCIsImNvbHVtbnMiLCIkY2hlY2tlZCIsInNob3ciLCJjb2x1bW4iLCJhbGlnbiIsIm9yZGVyIiwicmVzZXJ2ZVNlbGVjdGlvbiIsImNvbHVtblNldERpc2FibGVkIiwiaGlnaGxpZ2h0Q3VycmVudFJvdyIsImNoYW5nZWQiLCJyZWJ1aWxkUmVuZGVyU2NvcGUiLCJzY29wZSIsInNjcm9sbFRvIiwic2V0U2Nyb2xsVG9wIiwidG9wIiwib25Tb3J0Q2hhbmdlIiwib25GaWx0ZXJDaGFuZ2UiLCJidWJibGVVcCIsImN0eCIsImlzU2VydmVyU29ydCIsInNvcnRhYmxlIiwiYXNjIiwiZXZlbnRzIiwiZmlsdGVycyIsInRleHRBcmVhIiwidGFnIiwiaW5wdXRHcm91cCIsImlucHV0IiwiaW5wdXRQYXNzd29yZCIsInBhc3N3b3JkVHlwZSIsInNob3dQYXNzd29yZCIsIm51bWJlciIsImRhdGVQaWNrZXIiLCJidWlsZERhdGVUeXBlIiwidGltZVBpY2tlciIsImRyb3Bkb3duIiwiY29tbWFuZCIsIm9uQ29tbWFuZCIsIiRldmVudCIsInNsb3ROYW1lIiwiZHJvcGRvd25NZW51IiwiZHJvcGRvd25JdGVtIiwiaW1hZ2VHcm91cCIsImltYWdlIiwiYnVpbGRQcmV2aWV3QmluZCIsInVybCIsInVybHMiLCJwcmV2aWV3VXJsIiwicHJldmlld1VybHMiLCJmYWxsYmFjayIsInByb2dyZXNzIiwibG9hZGluZyIsImlkIiwidHlwZUltYWdlQ2FyZCIsInR5cGVJbWFnZSIsImdldFN0YXR1c0Zyb21FdmVudCIsInN0YXR1cyIsImdldEZpbGVMaXN0RnJvbUV2ZW50IiwicmVzcG9uc2UiLCJmaWxlIiwiZmlsZUxpc3QiLCJ1cGxvYWRpbmciLCJpc1N1Y2Nlc3MiLCJmaWxlSXRlbSIsImxpbWl0QWRkIiwidGFicyIsInRhYlBhbmUiLCJ0YWIiLCJjb2xsYXBzZSIsImtleU5hbWUiLCJjb2xsYXBzZUl0ZW0iLCJleHRyYVNsb3ROYW1lIiwiX2NyZWF0ZVZOb2RlIiwidGl0bGVTbG90IiwiX2NyZWF0ZVRleHRWTm9kZSIsImV4dHJhU2xvdCIsImJhZGdlIiwidG9vbHRpcCIsImNvbnRlbnQiLCJ0cmlnZ2VyIiwiZGl2aWRlciIsInBvcG92ZXIiLCJjb250ZW50U2xvdE5hbWUiLCJ0cmlnZ2VyU2xvdE5hbWUiLCJOb3RpZmljYXRpb24iLCJNZXNzYWdlIiwiTWVzc2FnZUJveCIsImljb25zTGlzdCIsInNldHVwSWNvbnMiLCJhcHAiLCJzZXQiLCJlbGVtZW50VWkiLCJFbE1lc3NhZ2UiLCJFbE5vdGlmaWNhdGlvbiIsIkVsTWVzc2FnZUJveCIsInVpQ29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFzRUEsTUFBTTtBQUFBLEVBQUVBLGNBQUFBO0FBQUFBLEVBQWNDLFNBQUFBO0lBQVlDLEVBQVc7TUFDaENDLEVB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
